<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>15、SwiftUI之List绑定支持</title>
      <link href="/2021/04/29/SwiftUI/15%E3%80%81SwiftUI%E4%B9%8BList%E7%BB%91%E5%AE%9A%E6%94%AF%E6%8C%81/"/>
      <url>/2021/04/29/SwiftUI/15%E3%80%81SwiftUI%E4%B9%8BList%E7%BB%91%E5%AE%9A%E6%94%AF%E6%8C%81/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> SwiftUI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>14、SwiftUI之Custom Dialog控件</title>
      <link href="/2021/04/29/SwiftUI/14%E3%80%81SwiftUI%E4%B9%8BCustom%20Dialog%E6%8E%A7%E4%BB%B6/"/>
      <url>/2021/04/29/SwiftUI/14%E3%80%81SwiftUI%E4%B9%8BCustom%20Dialog%E6%8E%A7%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> SwiftUI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>13、Indicator控件</title>
      <link href="/2021/04/29/SwiftUI/13%E3%80%81Indicator%E6%8E%A7%E4%BB%B6/"/>
      <url>/2021/04/29/SwiftUI/13%E3%80%81Indicator%E6%8E%A7%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> SwiftUI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12、SwiftUI之Present &amp; Popover控件</title>
      <link href="/2021/04/29/SwiftUI/12%E3%80%81SwiftUI%E4%B9%8BPresent%20&amp;%20Popover%E6%8E%A7%E4%BB%B6/"/>
      <url>/2021/04/29/SwiftUI/12%E3%80%81SwiftUI%E4%B9%8BPresent%20&amp;%20Popover%E6%8E%A7%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> SwiftUI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11、SwiftUI之Alert &amp; ActionSheet控件</title>
      <link href="/2021/04/29/SwiftUI/11%E3%80%81SwiftUI%E4%B9%8BAlert%20&amp;%20ActionSheet%E6%8E%A7%E4%BB%B6/"/>
      <url>/2021/04/29/SwiftUI/11%E3%80%81SwiftUI%E4%B9%8BAlert%20&amp;%20ActionSheet%E6%8E%A7%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> SwiftUI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10、SwiftUI之Picker控件</title>
      <link href="/2021/04/29/SwiftUI/10%E3%80%81SwiftUI%E4%B9%8BPicker%E6%8E%A7%E4%BB%B6/"/>
      <url>/2021/04/29/SwiftUI/10%E3%80%81SwiftUI%E4%B9%8BPicker%E6%8E%A7%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> SwiftUI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9、SwiftUI之DatePicker控件</title>
      <link href="/2021/04/29/SwiftUI/9%E3%80%81SwiftUI%E4%B9%8BDatePicker%E6%8E%A7%E4%BB%B6/"/>
      <url>/2021/04/29/SwiftUI/9%E3%80%81SwiftUI%E4%B9%8BDatePicker%E6%8E%A7%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> SwiftUI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8、SwiftUI之ColorPicker控件</title>
      <link href="/2021/04/29/SwiftUI/8%E3%80%81SwiftUI%E4%B9%8BColorPicker%E6%8E%A7%E4%BB%B6/"/>
      <url>/2021/04/29/SwiftUI/8%E3%80%81SwiftUI%E4%B9%8BColorPicker%E6%8E%A7%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> SwiftUI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7、SwiftUI之Slider控件</title>
      <link href="/2021/04/29/SwiftUI/7%E3%80%81SwiftUI%E4%B9%8BSlider%E6%8E%A7%E4%BB%B6/"/>
      <url>/2021/04/29/SwiftUI/7%E3%80%81SwiftUI%E4%B9%8BSlider%E6%8E%A7%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> SwiftUI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6、SwiftUI之Stepper控件</title>
      <link href="/2021/04/29/SwiftUI/6%E3%80%81SwiftUI%E4%B9%8BStepper%E6%8E%A7%E4%BB%B6/"/>
      <url>/2021/04/29/SwiftUI/6%E3%80%81SwiftUI%E4%B9%8BStepper%E6%8E%A7%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Stepper-的使用"><a href="#一、Stepper-的使用" class="headerlink" title="一、Stepper 的使用"></a>一、Stepper 的使用</h1><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/image-20220519230456500.png" alt="image-20220519230456500"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> selectedIndex <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> colors: [<span class="type">Color</span>] <span class="operator">=</span> [.orange, .red, .gray, .blue, .green, .purple, .pink]</span><br><span class="line"><span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> basicValue <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"><span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> value <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> step <span class="operator">=</span> <span class="number">5</span></span><br><span class="line"><span class="keyword">let</span> range <span class="operator">=</span> <span class="number">1</span><span class="operator">...</span><span class="number">50</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> circleSize: <span class="type">CGFloat</span> <span class="operator">=</span> <span class="number">20.0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> usingStepper: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">    <span class="type">VStack</span>(spacing: <span class="number">20</span>) &#123;</span><br><span class="line">        <span class="type">Stepper</span>(<span class="string">&quot;Basic Usage: <span class="subst">\(basicValue)</span>&quot;</span>, value: <span class="variable">$basicValue</span>)</span><br><span class="line">            .background(<span class="type">Color</span>.blue)</span><br><span class="line">        <span class="type">Stepper</span>(value: <span class="variable">$value</span>, in: range, step: step) &#123; isEditing <span class="keyword">in</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;is edit change: <span class="subst">\(isEditing)</span>&quot;</span>)</span><br><span class="line">        &#125; label: &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;Current value: <span class="subst">\(value)</span> in <span class="subst">\(range.description)</span>, stepping by <span class="subst">\(step)</span>&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Stepper</span>(onIncrement: incrementStep, onDecrement: decrementStep) &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;Array index: <span class="subst">\(selectedIndex)</span> Color: <span class="subst">\(colors[selectedIndex].description)</span>&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        .padding(<span class="number">5</span>)</span><br><span class="line">        .background(colors[selectedIndex])</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">Stepper</span>(<span class="string">&quot;&quot;</span>, value: <span class="variable">$circleSize</span>, in: <span class="number">10</span><span class="operator">...</span><span class="number">500</span>, step: <span class="number">10.0</span>)</span><br><span class="line">                .labelsHidden()</span><br><span class="line">            <span class="type">Circle</span>()</span><br><span class="line">                .frame(width: circleSize, height: circleSize)</span><br><span class="line">                .foregroundColor(.blue)</span><br><span class="line">                .animation(.easeInOut)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">incrementStep</span>() &#123;</span><br><span class="line">    selectedIndex <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> selectedIndex <span class="operator">&gt;</span> colors.count &#123; selectedIndex <span class="operator">=</span> <span class="number">0</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">decrementStep</span>() &#123;</span><br><span class="line">    selectedIndex <span class="operator">-=</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> selectedIndex <span class="operator">&lt;</span> <span class="number">0</span> &#123; selectedIndex <span class="operator">=</span> colors.count <span class="operator">-</span> <span class="number">1</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SwiftUI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5、SwiftUI之Toggle控件</title>
      <link href="/2021/04/29/SwiftUI/5%E3%80%81SwiftUI%E4%B9%8BToggle%E6%8E%A7%E4%BB%B6/"/>
      <url>/2021/04/29/SwiftUI/5%E3%80%81SwiftUI%E4%B9%8BToggle%E6%8E%A7%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="一、基本用法"><a href="#一、基本用法" class="headerlink" title="一、基本用法"></a>一、基本用法</h1><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/image-20220519220813522.png" alt="image-20220519220813522"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> toggleSwitchState <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line"><span class="keyword">var</span> usingToggle: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">    <span class="type">VStack</span>(spacing: <span class="number">40</span>) &#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;Toggle state is: <span class="subst">\(toggleSwitchState <span class="operator">?</span> <span class="string">&quot;ON&quot;</span> : <span class="string">&quot;OFF&quot;</span>)</span>&quot;</span>)</span><br><span class="line">        <span class="type">Toggle</span>(<span class="string">&quot;Vibrate On Ring&quot;</span>, isOn: <span class="variable">$toggleSwitchState</span>)</span><br><span class="line">            .background(<span class="type">Color</span>.yellow)</span><br><span class="line">        <span class="type">Toggle</span>(<span class="string">&quot;&quot;</span>, isOn: <span class="variable">$toggleSwitchState</span>)</span><br><span class="line">            .background(<span class="type">Color</span>.purple)</span><br><span class="line">        <span class="type">Toggle</span>(isOn: <span class="variable">$toggleSwitchState</span>) &#123;</span><br><span class="line">            <span class="type">VStack</span> &#123;</span><br><span class="line">                <span class="type">Color</span>.blue</span><br><span class="line">                    .frame(width: <span class="number">100</span>, height: <span class="number">100</span>)</span><br><span class="line">                    .cornerRadius(<span class="number">20</span>)</span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;Vibrate On Ring&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="二、隐藏label"><a href="#二、隐藏label" class="headerlink" title="二、隐藏label"></a>二、隐藏label</h1><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/image-20220519223636370.png" alt="image-20220519223636370"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> toggleSwitchState <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line"><span class="keyword">var</span> usingToggle: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">    <span class="type">VStack</span>(spacing: <span class="number">40</span>) &#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;Toggle state is: <span class="subst">\(toggleSwitchState <span class="operator">?</span> <span class="string">&quot;ON&quot;</span> : <span class="string">&quot;OFF&quot;</span>)</span>&quot;</span>)</span><br><span class="line">        <span class="type">Toggle</span>(<span class="string">&quot;Vibrate On Ring&quot;</span>, isOn: <span class="variable">$toggleSwitchState</span>)</span><br><span class="line">        <span class="type">Toggle</span>(<span class="string">&quot;&quot;</span>, isOn: <span class="variable">$toggleSwitchState</span>)</span><br><span class="line">        <span class="type">Toggle</span>(isOn: <span class="variable">$toggleSwitchState</span>) &#123;</span><br><span class="line">            <span class="type">VStack</span> &#123;</span><br><span class="line">                <span class="type">Color</span>.blue</span><br><span class="line">                    .frame(width: <span class="number">100</span>, height: <span class="number">100</span>)</span><br><span class="line">                    .cornerRadius(<span class="number">20</span>)</span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;Vibrate On Ring&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    .labelsHidden() <span class="comment">///隐藏文本, 只有类似 UISwitch 一样的控件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、Toggle-选中颜色"><a href="#三、Toggle-选中颜色" class="headerlink" title="三、Toggle 选中颜色"></a>三、Toggle 选中颜色</h1><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/image-20220519223754386.png" alt="image-20220519223754386"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> toggleSwitchState <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">var</span> usingToggle: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span>(spacing: <span class="number">40</span>) &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;Toggle state is: <span class="subst">\(toggleSwitchState <span class="operator">?</span> <span class="string">&quot;ON&quot;</span> : <span class="string">&quot;OFF&quot;</span>)</span>&quot;</span>)</span><br><span class="line">            <span class="type">Toggle</span>(<span class="string">&quot;Vibrate On Ring&quot;</span>, isOn: <span class="variable">$toggleSwitchState</span>)</span><br><span class="line">            <span class="type">Toggle</span>(<span class="string">&quot;&quot;</span>, isOn: <span class="variable">$toggleSwitchState</span>)</span><br><span class="line">            <span class="type">Toggle</span>(isOn: <span class="variable">$toggleSwitchState</span>) &#123;</span><br><span class="line">                <span class="type">VStack</span> &#123;</span><br><span class="line">                    <span class="type">Color</span>.blue</span><br><span class="line">                        .frame(width: <span class="number">100</span>, height: <span class="number">100</span>)</span><br><span class="line">                        .cornerRadius(<span class="number">20</span>)</span><br><span class="line">                    <span class="type">Text</span>(<span class="string">&quot;Vibrate On Ring&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        .labelsHidden() <span class="comment">///隐藏文本, 只有类似 UISwitch 一样的控件</span></span><br><span class="line"><span class="comment">//        .toggleStyle(SwitchToggleStyle())</span></span><br><span class="line"><span class="comment">//        .toggleStyle(DefaultToggleStyle()) ///默认样式</span></span><br><span class="line">        .toggleStyle(<span class="type">SwitchToggleStyle</span>(tint: .red)) <span class="comment">///选中颜色</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="四、自定义-Toggle-样式"><a href="#四、自定义-Toggle-样式" class="headerlink" title="四、自定义 Toggle 样式"></a>四、自定义 Toggle 样式</h1><h2 id="1-自定义边框"><a href="#1-自定义边框" class="headerlink" title="1.自定义边框"></a>1.自定义边框</h2><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/image-20220519223841751.png" alt="image-20220519223841751"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> toggleSwitchState <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line"><span class="keyword">var</span> usingToggle: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">    <span class="type">VStack</span>(spacing: <span class="number">40</span>) &#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;Toggle state is: <span class="subst">\(toggleSwitchState <span class="operator">?</span> <span class="string">&quot;ON&quot;</span> : <span class="string">&quot;OFF&quot;</span>)</span>&quot;</span>)</span><br><span class="line">        <span class="type">Toggle</span>(<span class="string">&quot;Vibrate On Ring&quot;</span>, isOn: <span class="variable">$toggleSwitchState</span>)</span><br><span class="line">        <span class="type">Toggle</span>(<span class="string">&quot;&quot;</span>, isOn: <span class="variable">$toggleSwitchState</span>)</span><br><span class="line">        <span class="type">Toggle</span>(isOn: <span class="variable">$toggleSwitchState</span>) &#123;</span><br><span class="line">            <span class="type">VStack</span> &#123;</span><br><span class="line">                <span class="type">Color</span>.blue</span><br><span class="line">                    .frame(width: <span class="number">100</span>, height: <span class="number">100</span>)</span><br><span class="line">                    .cornerRadius(<span class="number">20</span>)</span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;Vibrate On Ring&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    .labelsHidden() <span class="comment">///隐藏文本, 只有类似 UISwitch 一样的控件</span></span><br><span class="line">    .toggleStyle(<span class="type">RedBorderedToggleStyle</span>()) <span class="comment">///自定义样式</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">RedBorderedToggleStyle</span>: <span class="title class_">ToggleStyle</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">makeBody</span>(<span class="params">configuration</span>: <span class="type">Configuration</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Toggle</span>(configuration).border(<span class="type">Color</span>.red)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-自定义label"><a href="#2-自定义label" class="headerlink" title="2.自定义label"></a>2.自定义label</h2><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/image-20220519224018580.png" alt="image-20220519224018580"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> toggleSwitchState <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">var</span> usingToggle: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span>(spacing: <span class="number">40</span>) &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;Toggle state is: <span class="subst">\(toggleSwitchState <span class="operator">?</span> <span class="string">&quot;ON&quot;</span> : <span class="string">&quot;OFF&quot;</span>)</span>&quot;</span>)</span><br><span class="line">            <span class="type">Toggle</span>(<span class="string">&quot;Vibrate On Ring&quot;</span>, isOn: <span class="variable">$toggleSwitchState</span>)</span><br><span class="line">            <span class="type">Toggle</span>(<span class="string">&quot;&quot;</span>, isOn: <span class="variable">$toggleSwitchState</span>)</span><br><span class="line">            <span class="type">Toggle</span>(isOn: <span class="variable">$toggleSwitchState</span>) &#123;</span><br><span class="line">                <span class="type">VStack</span> &#123;</span><br><span class="line">                    <span class="type">Color</span>.blue</span><br><span class="line">                        .frame(width: <span class="number">100</span>, height: <span class="number">100</span>)</span><br><span class="line">                        .cornerRadius(<span class="number">20</span>)</span><br><span class="line">                    <span class="type">Text</span>(<span class="string">&quot;Vibrate On Ring&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        .labelsHidden() <span class="comment">///隐藏文本, 只有类似 UISwitch 一样的控件</span></span><br><span class="line"><span class="comment">//        .toggleStyle(RedBorderedToggleStyle()) ///自定义样式</span></span><br><span class="line">        .toggleStyle(<span class="type">SystemToggleStyle</span>(tint: .red)) <span class="comment">///自定义toggle</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">SystemToggleStyle</span>: <span class="title class_">ToggleStyle</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> tint: <span class="type">Color</span></span><br><span class="line">        <span class="keyword">func</span> <span class="title function_">makeBody</span>(<span class="params">configuration</span>: <span class="type">Configuration</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">            <span class="type">HStack</span> &#123;</span><br><span class="line">                configuration.label</span><br><span class="line">                <span class="type">Spacer</span>()</span><br><span class="line">                <span class="type">Button</span> &#123;</span><br><span class="line">                    configuration.isOn.toggle()</span><br><span class="line">                &#125; label: &#123;</span><br><span class="line">                    <span class="type">ToggleContentView</span>(isOn: configuration.isOn, tint: tint)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            .padding(.horizontal, <span class="number">2</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">ToggleContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> isOn: <span class="type">Bool</span></span><br><span class="line">            <span class="keyword">let</span> tint: <span class="type">Color</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">                <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">20</span>)</span><br><span class="line">                    .frame(width: <span class="number">56</span>, height: <span class="number">30</span>)</span><br><span class="line">                    .foregroundColor(isOn <span class="operator">?</span> tint : .secondary)</span><br><span class="line">                    .overlay(</span><br><span class="line">                        <span class="type">Circle</span>()</span><br><span class="line">                            .foregroundColor(<span class="type">Color</span>.white)</span><br><span class="line">                            .frame(width: <span class="number">26</span>)</span><br><span class="line">                            .padding(<span class="number">2</span>),</span><br><span class="line">                        alignment: isOn <span class="operator">?</span> .trailing : .leading</span><br><span class="line">                    )</span><br><span class="line">                    .animation(.linear(duration: <span class="number">0.25</span>))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="3-checkBox-Toggle"><a href="#3-checkBox-Toggle" class="headerlink" title="3.checkBox Toggle"></a>3.checkBox Toggle</h2><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/image-20220519224208032.png" alt="image-20220519224208032"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> toggleSwitchState <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">var</span> usingToggle: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span>(spacing: <span class="number">40</span>) &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;Toggle state is: <span class="subst">\(toggleSwitchState <span class="operator">?</span> <span class="string">&quot;ON&quot;</span> : <span class="string">&quot;OFF&quot;</span>)</span>&quot;</span>)</span><br><span class="line">            <span class="type">Toggle</span>(<span class="string">&quot;Vibrate On Ring&quot;</span>, isOn: <span class="variable">$toggleSwitchState</span>)</span><br><span class="line">            <span class="type">Toggle</span>(<span class="string">&quot;&quot;</span>, isOn: <span class="variable">$toggleSwitchState</span>)</span><br><span class="line">            <span class="type">Toggle</span>(isOn: <span class="variable">$toggleSwitchState</span>) &#123;</span><br><span class="line">                <span class="type">VStack</span> &#123;</span><br><span class="line">                    <span class="type">Color</span>.blue</span><br><span class="line">                        .frame(width: <span class="number">100</span>, height: <span class="number">100</span>)</span><br><span class="line">                        .cornerRadius(<span class="number">20</span>)</span><br><span class="line">                    <span class="type">Text</span>(<span class="string">&quot;Vibrate On Ring&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        .labelsHidden() <span class="comment">///隐藏文本, 只有类似 UISwitch 一样的控件</span></span><br><span class="line">        .toggleStyle(<span class="type">CheckBoxToggleStyle</span>())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">CheckBoxToggleStyle</span>: <span class="title class_">ToggleStyle</span> &#123;</span><br><span class="line">        <span class="keyword">enum</span> <span class="title class_">CheckBoxShape</span>: <span class="title class_">String</span> &#123;</span><br><span class="line">            <span class="keyword">case</span> circle</span><br><span class="line">            <span class="keyword">case</span> square</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> shape: <span class="type">CheckBoxShape</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">init</span>(<span class="params">shape</span>: <span class="type">CheckBoxShape</span> <span class="operator">=</span> .circle) &#123;</span><br><span class="line">            <span class="keyword">self</span>.shape <span class="operator">=</span> shape</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">func</span> <span class="title function_">makeBody</span>(<span class="params">configuration</span>: <span class="type">Configuration</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">            <span class="type">Button</span> &#123;</span><br><span class="line">                configuration.isOn.toggle()</span><br><span class="line">            &#125; label: &#123;</span><br><span class="line">                <span class="type">Image</span>(systemName: configuration.isOn <span class="operator">?</span> <span class="string">&quot;checkmark.<span class="subst">\(shape.rawValue)</span>.fill&quot;</span> : shape.rawValue)</span><br><span class="line">                    .resizable()</span><br><span class="line">                    .frame(width: <span class="number">30</span>, height: <span class="number">30</span>)</span><br><span class="line">                    .foregroundColor(configuration.isOn <span class="operator">?</span> .accentColor : .secondary)</span><br><span class="line"><span class="comment">//                    Spacer()</span></span><br><span class="line"><span class="comment">//                configuration.label</span></span><br><span class="line">            &#125;</span><br><span class="line">            .buttonStyle(<span class="type">PlainButtonStyle</span>())</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="4-自定义-Toggle-UI"><a href="#4-自定义-Toggle-UI" class="headerlink" title="4.自定义 Toggle UI"></a>4.自定义 Toggle UI</h2><p><img src="/Users/meme/Library/Application Support/typora-user-images/image-20220519224310385.png" alt="image-20220519224310385"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> toggleSwitchState <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">var</span> usingToggle: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span>(spacing: <span class="number">40</span>) &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;Toggle state is: <span class="subst">\(toggleSwitchState <span class="operator">?</span> <span class="string">&quot;ON&quot;</span> : <span class="string">&quot;OFF&quot;</span>)</span>&quot;</span>)</span><br><span class="line">            <span class="type">Toggle</span>(<span class="string">&quot;Vibrate On Ring&quot;</span>, isOn: <span class="variable">$toggleSwitchState</span>)</span><br><span class="line">            <span class="type">Toggle</span>(<span class="string">&quot;&quot;</span>, isOn: <span class="variable">$toggleSwitchState</span>)</span><br><span class="line">            <span class="type">Toggle</span>(isOn: <span class="variable">$toggleSwitchState</span>) &#123;</span><br><span class="line">                <span class="type">VStack</span> &#123;</span><br><span class="line">                    <span class="type">Color</span>.blue</span><br><span class="line">                        .frame(width: <span class="number">100</span>, height: <span class="number">100</span>)</span><br><span class="line">                        .cornerRadius(<span class="number">20</span>)</span><br><span class="line">                    <span class="type">Text</span>(<span class="string">&quot;Vibrate On Ring&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        .labelsHidden() <span class="comment">///隐藏文本, 只有类似 UISwitch 一样的控件</span></span><br><span class="line">        .toggleStyle(<span class="type">ToggleCardStyle</span>())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ToggleCardStyle</span>: <span class="title class_">ToggleStyle</span> &#123;</span><br><span class="line">        <span class="keyword">func</span> <span class="title function_">makeBody</span>(<span class="params">configuration</span>: <span class="type">Configuration</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">            <span class="type">VStack</span> &#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;change your state&quot;</span>)</span><br><span class="line">                    .foregroundColor(configuration.isOn <span class="operator">?</span> .green : .gray)</span><br><span class="line">                <span class="type">Toggle</span>(configuration).labelsHidden()</span><br><span class="line">            &#125;</span><br><span class="line">            .padding()</span><br><span class="line">            .overlay(</span><br><span class="line">                <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">10</span>)</span><br><span class="line">                    .stroke(configuration.isOn <span class="operator">?</span> .green : .gray, lineWidth: <span class="number">1</span>)</span><br><span class="line">            )</span><br><span class="line">            .onTapGesture &#123;</span><br><span class="line">                configuration.isOn.toggle()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SwiftUI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4、SwiftUI之Image控件</title>
      <link href="/2021/04/29/SwiftUI/4%E3%80%81SwiftUI%E4%B9%8BImage%E6%8E%A7%E4%BB%B6/"/>
      <url>/2021/04/29/SwiftUI/4%E3%80%81SwiftUI%E4%B9%8BImage%E6%8E%A7%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="一、基本使用"><a href="#一、基本使用" class="headerlink" title="一、基本使用"></a>一、基本使用</h1><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/image-20220519212758694.png" alt="image-20220519212758694"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> basicUsage: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Image</span>(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">        <span class="comment">///需要设置这个 才能设置 aspect</span></span><br><span class="line">            .resizable()</span><br><span class="line">            .aspectRatio(contentMode: .fit)</span><br><span class="line"><span class="comment">//            .scaledToFill()</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="二、加载Bundle-图片"><a href="#二、加载Bundle-图片" class="headerlink" title="二、加载Bundle 图片"></a>二、加载Bundle 图片</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> initWithBundle: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Group</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> resBundlePath <span class="operator">=</span> <span class="type">Bundle</span>.main.path(forResource: <span class="string">&quot;Resources&quot;</span>, ofType: <span class="string">&quot;bundle&quot;</span>),</span><br><span class="line">                <span class="keyword">let</span> resBundle <span class="operator">=</span> <span class="type">Bundle</span>(path: resBundlePath),</span><br><span class="line">                <span class="keyword">let</span> uiImage <span class="operator">=</span> <span class="type">UIImage</span>(named: <span class="string">&quot;img.jpg&quot;</span>, in: resBundle, with: <span class="literal">nil</span>) &#123;</span><br><span class="line">                <span class="type">Image</span>(uiImage: uiImage)</span><br><span class="line">                    .resizable()</span><br><span class="line">                    .aspectRatio(contentMode: .fit)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">Color</span>.red</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        VStack &#123; () -&gt; AnyView</span></span><br><span class="line"><span class="comment">//            guard let resBundlePath = Bundle.main.path(forResource: &quot;Resources&quot;, ofType: &quot;bundle&quot;),</span></span><br><span class="line"><span class="comment">//                  let resBundle = Bundle(path: resBundlePath),</span></span><br><span class="line"><span class="comment">//                  let uiImage = UIImage(named: &quot;img.jpg&quot;, in: resBundle, with: nil) else &#123;</span></span><br><span class="line"><span class="comment">//                      return AnyView(Color.red)</span></span><br><span class="line"><span class="comment">//                  &#125;</span></span><br><span class="line"><span class="comment">//                  return AnyView(</span></span><br><span class="line"><span class="comment">//                    Image(uiImage: uiImage)</span></span><br><span class="line"><span class="comment">//                      .resizable()</span></span><br><span class="line"><span class="comment">//                      .aspectRatio(contentMode: .fit)</span></span><br><span class="line"><span class="comment">//                                 )</span></span><br><span class="line"><span class="comment">//                  &#125;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="三、各种图片加载方式"><a href="#三、各种图片加载方式" class="headerlink" title="三、各种图片加载方式"></a>三、各种图片加载方式</h1><p><a href="https://developer.apple.com/sf-symbols/">SF Symbols</a></p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/image-20220519212728149.png" alt="image-20220519212728149"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> initWithIcon: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">    <span class="type">VStack</span>(spacing: <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="type">Image</span>(systemName: <span class="string">&quot;moon&quot;</span>)</span><br><span class="line">            .font(.largeTitle)</span><br><span class="line">        <span class="type">HStack</span> &#123;</span><br><span class="line">            <span class="type">HStack</span>(spacing: <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;123&quot;</span>)</span><br><span class="line">                <span class="type">Image</span>(systemName: <span class="string">&quot;doc&quot;</span>)</span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;456&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            .font(.system(size: <span class="number">34</span>, weight: .bold))</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;123<span class="subst">\(Image(systemName: <span class="string">&quot;doc&quot;</span>))</span>456&quot;</span>)</span><br><span class="line">                .font(.system(size: <span class="number">34</span>, weight: .bold))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Image</span>(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">            .resizable()</span><br><span class="line">            .frame(width: <span class="number">100</span>, height: <span class="number">100</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四、Resize"><a href="#四、Resize" class="headerlink" title="四、Resize"></a>四、Resize</h1><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/image-20220519214502585.png" alt="image-20220519214502585"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> resize: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line"><span class="comment">//        Image(&quot;1&quot;)</span></span><br><span class="line"><span class="comment">//            .resizable(resizingMode: .tile)</span></span><br><span class="line"><span class="comment">//            .edgesIgnoringSafeArea(.all)</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">//        Image(&quot;1&quot;)</span></span><br><span class="line"><span class="comment">//        ///指定区域拉伸</span></span><br><span class="line"><span class="comment">//            .resizable(capInsets: .init(top: 100, leading: 100, bottom: 100, trailing: 100), resizingMode: .stretch)</span></span><br><span class="line"><span class="comment">//            .edgesIgnoringSafeArea(.all)</span></span><br><span class="line">        <span class="type">Image</span>(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">        <span class="comment">///差值, 设置上就会平滑, none 就会有锯齿感</span></span><br><span class="line">            .interpolation(.none)</span><br><span class="line">        <span class="comment">///抗锯齿</span></span><br><span class="line">            .antialiased(<span class="literal">true</span>)</span><br><span class="line">            .resizable()</span><br><span class="line">            .frame(width: <span class="number">300</span>, height: <span class="number">300</span>)</span><br><span class="line">            .clipped()</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="五、Render-Mode"><a href="#五、Render-Mode" class="headerlink" title="五、Render Mode"></a>五、Render Mode</h1><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/image-20220519214953720.png" alt="image-20220519214953720"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> renderMode: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">    <span class="type">TabView</span> &#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">            .tabItem &#123;</span><br><span class="line">                <span class="type">Image</span>(systemName: <span class="string">&quot;moon&quot;</span>)</span><br><span class="line">                <span class="comment">///蓝色</span></span><br><span class="line">                    .renderingMode(.template)</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">            .tabItem &#123;</span><br><span class="line">                <span class="type">Image</span>(systemName: <span class="string">&quot;moon&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">            .tabItem &#123;</span><br><span class="line">                <span class="type">Image</span>(systemName: <span class="string">&quot;moon&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">///自定义选中颜色</span></span><br><span class="line">    .accentColor(.green)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="六、ImageScale"><a href="#六、ImageScale" class="headerlink" title="六、ImageScale"></a>六、ImageScale</h1><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/image-20220519215630025.png" alt="image-20220519215630025"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> imageScale: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">    <span class="type">VStack</span>(spacing: <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">HStack</span> &#123;</span><br><span class="line">            <span class="type">Image</span>(systemName: <span class="string">&quot;paperplane&quot;</span>)</span><br><span class="line">                .imageScale(.small)</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;text&quot;</span>)</span><br><span class="line">        &#125;.background(<span class="type">Color</span>.red)</span><br><span class="line">        <span class="type">HStack</span> &#123;</span><br><span class="line">            <span class="type">Image</span>(systemName: <span class="string">&quot;paperplane&quot;</span>)</span><br><span class="line">                .imageScale(.medium)</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;text&quot;</span>)</span><br><span class="line">        &#125;.background(<span class="type">Color</span>.green)</span><br><span class="line">        <span class="type">HStack</span> &#123;</span><br><span class="line">            <span class="type">Image</span>(systemName: <span class="string">&quot;paperplane&quot;</span>)</span><br><span class="line">                .imageScale(.large)</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;text&quot;</span>)</span><br><span class="line">        &#125;.background(<span class="type">Color</span>.purple)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SwiftUI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3、SwiftUI之TextField控件</title>
      <link href="/2021/04/29/SwiftUI/3%E3%80%81SwiftUI%E4%B9%8BTextField%E6%8E%A7%E4%BB%B6/"/>
      <url>/2021/04/29/SwiftUI/3%E3%80%81SwiftUI%E4%B9%8BTextField%E6%8E%A7%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="一、基本应用"><a href="#一、基本应用" class="headerlink" title="一、基本应用"></a>一、基本应用</h1><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/image-20220519175715099.png" alt="image-20220519175715099"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extension</span> <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">endEditing</span>() &#123;</span><br><span class="line">        <span class="type">UIApplication</span>.shared.sendAction(<span class="keyword">#selector</span>(<span class="type">UIResponder</span>.resignFirstResponder), to: <span class="literal">nil</span>, from: <span class="literal">nil</span>, for: <span class="literal">nil</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> email: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> isEditing <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">var</span> basicUsage: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span>(spacing: <span class="number">20</span>) &#123;</span><br><span class="line">            <span class="type">TextField</span>(<span class="string">&quot;Input your email address&quot;</span>, text: <span class="variable">$email</span>) &#123; isEditing <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">self</span>.isEditing <span class="operator">=</span> isEditing</span><br><span class="line">            &#125; onCommit: &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Your email address is: <span class="subst">\(email)</span>&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            .autocapitalization(.none)</span><br><span class="line">            .padding()</span><br><span class="line">            .border(tipBorder)</span><br><span class="line">            <span class="type">HStack</span> &#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;Your email is: <span class="subst">\(email)</span>&quot;</span>)</span><br><span class="line">                <span class="type">Spacer</span>()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">Spacer</span>()</span><br><span class="line">        &#125;</span><br><span class="line">        .padding()</span><br><span class="line">        .background(</span><br><span class="line">            <span class="type">Color</span>.white</span><br><span class="line">                .onTapGesture &#123;</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;tap action click...&quot;</span>)</span><br><span class="line">                    endEditing()</span><br><span class="line">                &#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> tipBorder: <span class="keyword">some</span> <span class="type">ShapeStyle</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> isEditing &#123;</span><br><span class="line">            <span class="keyword">return</span> validate(email) <span class="operator">?</span> <span class="type">Color</span>.green : <span class="type">Color</span>.red</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="type">Color</span>.gray</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">validate</span>(<span class="keyword">_</span> <span class="params">email</span>: <span class="type">String</span>) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> isValid(email: email)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">isValid</span>(<span class="params">email</span>: <span class="type">String</span>) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> emailRegex <span class="operator">=</span> <span class="string">&quot;[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+<span class="subst">\\</span>.[A-Za-z]&#123;2,4&#125;&quot;</span></span><br><span class="line">        <span class="keyword">let</span> predicate <span class="operator">=</span> <span class="type">NSPredicate</span>(format: <span class="string">&quot;SELF MATCHES %@&quot;</span>, emailRegex)</span><br><span class="line">        <span class="keyword">return</span> predicate.evaluate(with: email)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="二、格式化-TextField"><a href="#二、格式化-TextField" class="headerlink" title="二、格式化 TextField"></a>二、格式化 TextField</h1><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/image-20220519180135481.png" alt="image-20220519180135481"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> nameComponents <span class="operator">=</span> <span class="type">PersonNameComponents</span>()</span><br><span class="line">    <span class="keyword">let</span> nameFormatter <span class="operator">=</span> <span class="type">PersonNameComponentsFormatter</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> formaterTextField: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">TextField</span>(<span class="string">&quot;Proper name&quot;</span>, value: <span class="variable">$nameComponents</span>, formatter: nameFormatter, onCommit: &#123;</span><br><span class="line">                display(components: nameComponents)</span><br><span class="line">            &#125;)</span><br><span class="line">            .padding()</span><br><span class="line">            .disableAutocorrection(<span class="literal">true</span>)</span><br><span class="line">            .border(<span class="type">Color</span>.gray)</span><br><span class="line">            <span class="type">Text</span>(nameComponents.debugDescription)</span><br><span class="line">        &#125;</span><br><span class="line">        .padding()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">display</span>(<span class="params">components</span>: <span class="type">PersonNameComponents</span>) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;components is: <span class="subst">\(components)</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="三、Modifiers"><a href="#三、Modifiers" class="headerlink" title="三、Modifiers"></a>三、Modifiers</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> modifiers: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">TextField</span>(<span class="string">&quot;Input your email address&quot;</span>, text: <span class="variable">$email</span>)</span><br><span class="line">            .textContentType(.<span class="type">URL</span>)</span><br><span class="line">            .keyboardType(.emailAddress)</span><br><span class="line">        <span class="comment">///文本大小写</span></span><br><span class="line">            .autocapitalization(.none)</span><br><span class="line">        <span class="comment">///提示文字</span></span><br><span class="line">            .disableAutocorrection(<span class="literal">true</span>)</span><br><span class="line">        <span class="comment">///placeholder 的大小写</span></span><br><span class="line">            .textCase(.none)</span><br><span class="line"><span class="comment">//            .returnKeyType(.none)</span></span><br><span class="line">        <span class="comment">///光标颜色</span></span><br><span class="line">            .accentColor(.green)</span><br><span class="line">            .padding()</span><br><span class="line">            .border(<span class="type">Color</span>.gray)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="四、TextField-样式"><a href="#四、TextField-样式" class="headerlink" title="四、TextField 样式"></a>四、TextField 样式</h1><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/image-20220519181351512.png" alt="image-20220519181351512"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> givenName: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> familyName: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> styleTextField: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">VStack</span> &#123;</span><br><span class="line">                <span class="type">TextField</span>(<span class="string">&quot;Given Name&quot;</span>, text: <span class="variable">$givenName</span>)</span><br><span class="line">                <span class="type">TextField</span>(<span class="string">&quot;Family Name&quot;</span>, text: <span class="variable">$familyName</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            .textFieldStyle(<span class="type">RoundedBorderTextFieldStyle</span>())</span><br><span class="line">            <span class="type">VStack</span> &#123;</span><br><span class="line">                <span class="type">TextField</span>(<span class="string">&quot;Given Name&quot;</span>, text: <span class="variable">$givenName</span>)</span><br><span class="line">                <span class="type">TextField</span>(<span class="string">&quot;Family Name&quot;</span>, text: <span class="variable">$familyName</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            .textFieldStyle(<span class="type">PlainTextFieldStyle</span>())</span><br><span class="line">            <span class="type">VStack</span> &#123;</span><br><span class="line">                <span class="type">TextField</span>(<span class="string">&quot;Given Name&quot;</span>, text: <span class="variable">$givenName</span>)</span><br><span class="line">                <span class="type">TextField</span>(<span class="string">&quot;Family Name&quot;</span>, text: <span class="variable">$familyName</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            .textFieldStyle(<span class="type">DefaultTextFieldStyle</span>())</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="五、自定义TextField-样式"><a href="#五、自定义TextField-样式" class="headerlink" title="五、自定义TextField 样式"></a>五、自定义TextField 样式</h1><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/image-20220519184826470.png" alt="image-20220519184826470"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@State</span> <span class="keyword">var</span> searchContent <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">var</span> content <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">var</span> customStyle: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span>(alignment: .leading, spacing: <span class="number">20</span>) &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;Custom TextField Style&quot;</span>).font(.title2)</span><br><span class="line">            <span class="type">TextField</span>(<span class="string">&quot;Search...&quot;</span>, text: <span class="variable">$searchContent</span>)</span><br><span class="line">                .textFieldStyle(<span class="type">OvalTextFieldStyle</span>())</span><br><span class="line">            <span class="type">TextField</span>(<span class="string">&quot;Search...&quot;</span>, text: <span class="variable">$searchContent</span>)</span><br><span class="line">                .textFieldStyle(<span class="type">UnderlineTextFieldStyle</span>())</span><br><span class="line">            <span class="type">TextField</span>(<span class="string">&quot;Search...&quot;</span>, text: <span class="variable">$searchContent</span>)</span><br><span class="line">                .textFieldStyle(<span class="type">ClearTextFieldStyle</span>(text: <span class="variable">$searchContent</span>))</span><br><span class="line">            <span class="type">SuperTextField</span>(placeHolder: <span class="type">Text</span>(<span class="string">&quot;我是 placeHolder  TextField, 请输入内容&quot;</span>).foregroundColor(.green), text: <span class="variable">$content</span>) &#123; isEditing <span class="keyword">in</span></span><br><span class="line">                </span><br><span class="line">            &#125; onCommit: &#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;.padding()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">OvalTextFieldStyle</span>: <span class="title class_">TextFieldStyle</span> &#123;</span><br><span class="line">        <span class="keyword">func</span> <span class="title function_">_body</span>(<span class="params">configuration</span>: <span class="type">TextField</span>&lt;<span class="keyword">Self</span>._Label&gt;) -&gt; <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">            <span class="type">HStack</span> &#123;</span><br><span class="line">                <span class="type">Image</span>(systemName: <span class="string">&quot;magnifyingglass&quot;</span>)</span><br><span class="line">                    .foregroundColor(.gray)</span><br><span class="line">                configuration</span><br><span class="line">                    .padding(.vertical, <span class="number">10</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            .padding(.horizontal, <span class="number">10</span>)</span><br><span class="line">            .background(<span class="type">Color</span>.yellow)</span><br><span class="line">            .cornerRadius(<span class="number">20</span>)</span><br><span class="line">            .shadow(color: .gray, radius: <span class="number">2</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">UnderlineTextFieldStyle</span>: <span class="title class_">TextFieldStyle</span> &#123;</span><br><span class="line">        <span class="keyword">func</span> <span class="title function_">_body</span>(<span class="params">configuration</span>: <span class="type">TextField</span>&lt;<span class="keyword">Self</span>._Label&gt;) -&gt; <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">            configuration</span><br><span class="line">                .overlay(</span><br><span class="line">                    <span class="type">Rectangle</span>()</span><br><span class="line">                        .frame(height: <span class="number">2</span>)</span><br><span class="line">                        .padding(.top, <span class="number">35</span>)</span><br><span class="line">                )</span><br><span class="line">                .foregroundColor(.pink)</span><br><span class="line">                .padding(<span class="number">10</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">///自定义 clear TextField</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">ClearTextFieldStyle</span>: <span class="title class_">TextFieldStyle</span> &#123;</span><br><span class="line">        <span class="meta">@Binding</span> <span class="keyword">var</span> text: <span class="type">String</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">func</span> <span class="title function_">_body</span>(<span class="params">configuration</span>: <span class="type">TextField</span>&lt;<span class="keyword">Self</span>._Label&gt;) -&gt; <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">            <span class="type">HStack</span> &#123;</span><br><span class="line">                configuration.padding()</span><br><span class="line">                <span class="keyword">if</span> <span class="operator">!</span>text.isEmpty &#123;</span><br><span class="line">                    <span class="type">Button</span> &#123;</span><br><span class="line">                        <span class="keyword">self</span>.text <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">                    &#125; label: &#123;</span><br><span class="line">                        <span class="type">Image</span>(systemName: <span class="string">&quot;xmark.circle.fill&quot;</span>)</span><br><span class="line">                            .foregroundColor(.gray)</span><br><span class="line">                    &#125;</span><br><span class="line">                    .padding(.trailing, <span class="number">10</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            .overlay(</span><br><span class="line">                <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">12</span>)</span><br><span class="line">                    .stroke(<span class="type">Color</span>.gray, lineWidth: <span class="number">1</span>)</span><br><span class="line">            )</span><br><span class="line">            .padding(.horizontal, <span class="number">10</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">///自定义 Placeholder TextField</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">SuperTextField</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> placeHolder: <span class="type">Text</span></span><br><span class="line">        <span class="meta">@Binding</span> <span class="keyword">var</span> text: <span class="type">String</span></span><br><span class="line">        <span class="keyword">let</span> onEditingChanged: (<span class="type">Bool</span>) -&gt; <span class="type">Void</span></span><br><span class="line">        <span class="keyword">let</span> onCommit: () -&gt; <span class="type">Void</span></span><br><span class="line">        <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">            <span class="type">ZStack</span>(alignment: .leading) &#123;</span><br><span class="line">                <span class="keyword">if</span> text.isEmpty &#123;</span><br><span class="line">                    <span class="type">HStack</span> &#123;</span><br><span class="line">                        placeHolder</span><br><span class="line">                        <span class="type">Spacer</span>()</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">TextField</span>(<span class="string">&quot;&quot;</span>, text: <span class="variable">$text</span>, onEditingChanged: onEditingChanged, onCommit: onCommit)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            .border(<span class="type">Color</span>.gray)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SwiftUI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2、SwiftUI之Button控件</title>
      <link href="/2021/04/29/SwiftUI/2%E3%80%81SwiftUI%E4%B9%8BButton%E6%8E%A7%E4%BB%B6/"/>
      <url>/2021/04/29/SwiftUI/2%E3%80%81SwiftUI%E4%B9%8BButton%E6%8E%A7%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="一、基础应用"><a href="#一、基础应用" class="headerlink" title="一、基础应用"></a>一、基础应用</h1><p><img src="https://huayoyu-1254261238.cos.ap-shanghai.myqcloud.com/md/image-20220517220654506.png" alt="image-20220517220654506"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> basicUsage: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">    <span class="type">VStack</span>(spacing: <span class="number">20</span>) &#123;</span><br><span class="line">        <span class="type">HStack</span> &#123;</span><br><span class="line">            <span class="type">Button</span> &#123;</span><br><span class="line">                signIn()</span><br><span class="line">            &#125; label: &#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;Sign In 1&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">Button</span>(action: signIn) &#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;Sign In 2&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">HStack</span> &#123;</span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;Register 1&quot;</span>) &#123;</span><br><span class="line">                register()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;Register 2&quot;</span>, action: register)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">signIn</span>() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;sign&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">register</span>() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;register&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、添加到容器上"><a href="#二、添加到容器上" class="headerlink" title="二、添加到容器上"></a>二、添加到容器上</h1><p><img src="https://huayoyu-1254261238.cos.ap-shanghai.myqcloud.com/md/image-20220517220716348.png" alt="image-20220517220716348"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> addToContainers: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">List</span> &#123;</span><br><span class="line">            <span class="type">ForEach</span>(items) &#123; item <span class="keyword">in</span></span><br><span class="line">                <span class="type">Text</span>(item.title)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;Add Item&quot;</span>, action: addItem)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Item</span>: <span class="title class_">Identifiable</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> id <span class="operator">=</span> <span class="type">UUID</span>()</span><br><span class="line">        <span class="keyword">let</span> title: <span class="type">String</span></span><br><span class="line">        <span class="keyword">let</span> desc: <span class="type">String</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> items: [<span class="type">Item</span>] <span class="operator">=</span> []</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">addItem</span>() &#123;</span><br><span class="line">        items.append(<span class="type">Item</span>(title: <span class="string">&quot;new item title&quot;</span>, desc: <span class="string">&quot;new item desc&quot;</span>))</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="三、按钮样式"><a href="#三、按钮样式" class="headerlink" title="三、按钮样式"></a>三、按钮样式</h1><p><img src="https://huayoyu-1254261238.cos.ap-shanghai.myqcloud.com/md/image-20220517220732092.png" alt="image-20220517220732092"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> styleButtonsiOS: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">    <span class="type">VStack</span>(spacing: <span class="number">20</span>) &#123;</span><br><span class="line">        <span class="type">Button</span>(<span class="string">&quot;Sign In&quot;</span>, action: signIn)</span><br><span class="line">            .buttonStyle(<span class="type">PlainButtonStyle</span>())</span><br><span class="line">        <span class="type">Button</span>(<span class="string">&quot;Sign In&quot;</span>, action: signIn)</span><br><span class="line">            .buttonStyle(<span class="type">BorderlessButtonStyle</span>())</span><br><span class="line">        <span class="type">Button</span>(<span class="string">&quot;Sign In&quot;</span>, action: signIn)</span><br><span class="line">            .buttonStyle(<span class="type">DefaultButtonStyle</span>())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四、自定义按钮样式"><a href="#四、自定义按钮样式" class="headerlink" title="四、自定义按钮样式"></a>四、自定义按钮样式</h1><p><img src="https://huayoyu-1254261238.cos.ap-shanghai.myqcloud.com/md/image-20220517220635027.png" alt="image-20220517220635027"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ButtonStyle 自定义样式使用系统默认的标准交互</span></span><br><span class="line">    <span class="comment">// PrimitiveButtonStyle 自定义样式的同时且自定义交互逻辑</span></span><br><span class="line">    <span class="keyword">var</span> customButtonStyle: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span>(spacing: <span class="number">20</span>) &#123;</span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;Scale Effect&quot;</span>, action: signIn).buttonStyle(<span class="type">ScaleEffectButtonStyle</span>())</span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;Red Bordered&quot;</span>, action: signIn).buttonStyle(<span class="type">RedBorderedButtonStyle</span>())</span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;Scale Effect + Border&quot;</span>, action: signIn)</span><br><span class="line">                .buttonStyle(<span class="type">RedBorderedButtonStyle</span>())</span><br><span class="line">                .buttonStyle(<span class="type">ScaleEffectButtonStyle</span>())</span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;Scale Effect + Border&quot;</span>, action: signIn)</span><br><span class="line">                .buttonStyle(<span class="type">ScaleEffectButtonStyle</span>())</span><br><span class="line">                .buttonStyle(<span class="type">RedBorderedButtonStyle</span>())</span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;Long Press Tap&quot;</span>, action: signIn).buttonStyle(<span class="type">LongPressButtonStyle</span>())</span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;Long Press + Border + Scale Effect&quot;</span>, action: signIn).buttonStyle(<span class="type">ComposeButtonStyle</span>())</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">ScaleEffectButtonStyle</span>: <span class="title class_">ButtonStyle</span> &#123;</span><br><span class="line">        <span class="keyword">func</span> <span class="title function_">makeBody</span>(<span class="params">configuration</span>: <span class="type">Configuration</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">            <span class="type">HStack</span> &#123;</span><br><span class="line">                <span class="type">Spacer</span>()</span><br><span class="line">                configuration.label.padding().foregroundColor(configuration.isPressed <span class="operator">?</span> .red : .white)</span><br><span class="line">                <span class="type">Spacer</span>()</span><br><span class="line">            &#125;</span><br><span class="line">            .frame(width: <span class="number">300</span>)</span><br><span class="line">            .background(<span class="type">Color</span>.blue.cornerRadius(<span class="number">10.0</span>))</span><br><span class="line">            .scaleEffect(configuration.isPressed <span class="operator">?</span> <span class="number">0.9</span> : <span class="number">1.0</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">RedBorderedButtonStyle</span>: <span class="title class_">PrimitiveButtonStyle</span> &#123;</span><br><span class="line">        <span class="keyword">func</span> <span class="title function_">makeBody</span>(<span class="params">configuration</span>: <span class="type">Configuration</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">            <span class="type">Button</span>(configuration).border(<span class="type">Color</span>.red, width: <span class="number">2</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LongPressButtonStyle</span>: <span class="title class_">PrimitiveButtonStyle</span> &#123;</span><br><span class="line">        <span class="keyword">func</span> <span class="title function_">makeBody</span>(<span class="params">configuration</span>: <span class="type">Configuration</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">            <span class="type">Button</span>(configuration)</span><br><span class="line">                .gesture(</span><br><span class="line">                    <span class="type">LongPressGesture</span>()</span><br><span class="line">                        .onEnded(&#123; <span class="keyword">_</span> <span class="keyword">in</span></span><br><span class="line">                            configuration.trigger()</span><br><span class="line">                        &#125;)</span><br><span class="line">                )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">ComposeButtonStyle</span>: <span class="title class_">PrimitiveButtonStyle</span> &#123;</span><br><span class="line">        <span class="keyword">func</span> <span class="title function_">makeBody</span>(<span class="params">configuration</span>: <span class="type">Configuration</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">            <span class="type">Button</span>(configuration)</span><br><span class="line">                .buttonStyle(<span class="type">LongPressButtonStyle</span>())</span><br><span class="line">                .buttonStyle(<span class="type">RedBorderedButtonStyle</span>())</span><br><span class="line">            .buttonStyle(<span class="type">ScaleEffectButtonStyle</span>())</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SwiftUI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1、SwiftUI之Text控件</title>
      <link href="/2021/04/29/SwiftUI/1%E3%80%81SwiftUI%E4%B9%8BText%E6%8E%A7%E4%BB%B6/"/>
      <url>/2021/04/29/SwiftUI/1%E3%80%81SwiftUI%E4%B9%8BText%E6%8E%A7%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="一、基础应用"><a href="#一、基础应用" class="headerlink" title="一、基础应用"></a>一、基础应用</h1><p><img src="https://huayoyu-1254261238.cos.ap-shanghai.myqcloud.com/md/image-20220517214610444.png" alt="image-20220517214610444"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> basic: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">    <span class="type">VStack</span> &#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;huayoyu&quot;</span>)</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;huayoyu&quot;</span>)</span><br><span class="line">            .foregroundColor(.red)</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;huayoyu&quot;</span>)</span><br><span class="line">            .font(.title)</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;huayoyu&quot;</span>)</span><br><span class="line">            .font(<span class="type">Font</span>.system(size: <span class="number">30</span>, weight: .medium, design: .rounded))</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;huayoyu&quot;</span>)</span><br><span class="line">            .font(.title)</span><br><span class="line">            .italic()</span><br><span class="line">            .bold()</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;custom font&quot;</span>)</span><br><span class="line">            .font(.custom(<span class="string">&quot;Menlo-BoldItalic&quot;</span>, size: <span class="number">30</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、文本自适应"><a href="#二、文本自适应" class="headerlink" title="二、文本自适应"></a>二、文本自适应</h1><p><img src="https://huayoyu-1254261238.cos.ap-shanghai.myqcloud.com/md/image-20220517214810701.png" alt="image-20220517214810701"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> myTextField <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">var</span> textFit: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;To be, or not to be, that is the question&quot;</span>)</span><br><span class="line">                .frame(width: <span class="number">100</span>)</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;To be, or not to be, that is the question&quot;</span>)</span><br><span class="line">                .frame(width: <span class="number">100</span>)</span><br><span class="line">                .lineLimit(<span class="number">1</span>)</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;This is a wide text element&quot;</span>)</span><br><span class="line">                .frame(width: <span class="number">200</span>, height: <span class="number">50</span>, alignment: .leading)</span><br><span class="line">                .lineLimit(<span class="number">1</span>)</span><br><span class="line">                .allowsTightening(<span class="literal">true</span>)</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;This is a wide text element&quot;</span>)</span><br><span class="line">                .frame(width: <span class="number">200</span>, height: <span class="number">50</span>, alignment: .leading)</span><br><span class="line">                .lineLimit(<span class="number">1</span>)</span><br><span class="line">                .allowsTightening(<span class="literal">false</span>)</span><br><span class="line">            <span class="type">HStack</span> &#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;This is a long label that will be scaled to fit&quot;</span>)</span><br><span class="line">                    .lineLimit(<span class="number">1</span>)</span><br><span class="line">                    .minimumScaleFactor(<span class="number">0.5</span>)</span><br><span class="line">                <span class="type">TextField</span>(<span class="string">&quot;My Long Text Field&quot;</span>, text: <span class="variable">$myTextField</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">VStack</span> &#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;This is a wide text element This is a wide text element This is a wide text element This is a wide text element This is a wide text element&quot;</span>)</span><br><span class="line">                    .frame(width: <span class="number">120</span>, height: <span class="number">150</span>)</span><br><span class="line">                    .truncationMode(.tail)</span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;This is a wide text element This is a wide text element This is a wide text element This is a wide text element This is a wide text element&quot;</span>)</span><br><span class="line">                    .frame(width: <span class="number">120</span>, height: <span class="number">150</span>)</span><br><span class="line">                    .truncationMode(.head)</span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;This is a wide text element This is a wide text element This is a wide text element This is a wide text element This is a wide text element&quot;</span>)</span><br><span class="line">                    .frame(width: <span class="number">120</span>, height: <span class="number">150</span>)</span><br><span class="line">                    .truncationMode(.middle)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="三、格式化输入"><a href="#三、格式化输入" class="headerlink" title="三、格式化输入"></a>三、格式化输入</h1><p><img src="https://huayoyu-1254261238.cos.ap-shanghai.myqcloud.com/md/image-20220517214826648.png" alt="image-20220517214826648"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> price <span class="operator">=</span> <span class="number">10.394052</span></span><br><span class="line"><span class="keyword">let</span> startDate <span class="operator">=</span> <span class="type">Date</span>(timeIntervalSinceNow: <span class="operator">-</span><span class="number">3600</span>)</span><br><span class="line"><span class="keyword">var</span> fromatDisplay: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">    <span class="type">VStack</span> &#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;$<span class="subst">\(price, specifier: <span class="string">&quot;%.2f&quot;</span>)</span>&quot;</span>)</span><br><span class="line">        <span class="type">Text</span>(startDate, style: .time)</span><br><span class="line">        <span class="type">Text</span>(startDate, style: .date)</span><br><span class="line">        <span class="type">Text</span>(startDate, style: .relative)</span><br><span class="line">        <span class="type">Text</span>(startDate, style: .offset)</span><br><span class="line">        <span class="type">Text</span>(startDate, style: .timer)</span><br><span class="line">        <span class="type">Text</span>(startDate<span class="operator">...</span><span class="type">Date</span>())</span><br><span class="line">        <span class="type">Text</span>(<span class="type">DateInterval</span>(start: startDate, duration: <span class="number">300</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四、文本样式"><a href="#四、文本样式" class="headerlink" title="四、文本样式"></a>四、文本样式</h1><p><img src="https://huayoyu-1254261238.cos.ap-shanghai.myqcloud.com/md/image-20220517214840409.png" alt="image-20220517214840409"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> otherStyle: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;huayoyu&quot;</span>)</span><br><span class="line">                .font(.largeTitle)</span><br><span class="line">                .strikethrough(<span class="literal">true</span>, color: .red)</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;huayoyu&quot;</span>)</span><br><span class="line">                .font(.largeTitle)</span><br><span class="line">                .underline(<span class="literal">true</span>, color: .green)</span><br><span class="line">            <span class="type">HStack</span> &#123;</span><br><span class="line">                <span class="type">VStack</span>(alignment: .leading) &#123;</span><br><span class="line">                    <span class="type">Text</span>(<span class="string">&quot;ABCDEF&quot;</span>)</span><br><span class="line">                        .kerning(<span class="operator">-</span><span class="number">3</span>)</span><br><span class="line">                    <span class="type">Text</span>(<span class="string">&quot;ABCDEF&quot;</span>)</span><br><span class="line">                    <span class="type">Text</span>(<span class="string">&quot;ABCDEF&quot;</span>)</span><br><span class="line">                        .kerning(<span class="number">3</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">Spacer</span>()</span><br><span class="line">                <span class="type">VStack</span>(alignment: .center) &#123;</span><br><span class="line">                    <span class="type">Text</span>(<span class="string">&quot;ABCDEF&quot;</span>)</span><br><span class="line">                        .kerning(<span class="operator">-</span><span class="number">3</span>)</span><br><span class="line">                    <span class="type">Text</span>(<span class="string">&quot;ABCDEF&quot;</span>)</span><br><span class="line">                    <span class="type">Text</span>(<span class="string">&quot;ABCDEF&quot;</span>)</span><br><span class="line">                        .kerning(<span class="number">3</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            .padding(.horizontal, <span class="number">60</span>)</span><br><span class="line">            <span class="type">HStack</span>(alignment: .top) &#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">                    .baselineOffset(<span class="operator">-</span><span class="number">10</span>)</span><br><span class="line">                    .border(<span class="type">Color</span>.red)</span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">                    .border(<span class="type">Color</span>.green)</span><br><span class="line">                    .background(<span class="type">Color</span>.red)</span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">                    .baselineOffset(<span class="number">10</span>)</span><br><span class="line">                    .border(<span class="type">Color</span>.blue)</span><br><span class="line">            &#125;</span><br><span class="line">            .background(<span class="type">Color</span>(white: <span class="number">0.9</span>))</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;huayoyu&quot;</span>)</span><br><span class="line">                .textCase(.uppercase)</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;This is a string in a  TextField with 10 point spaceing applied between the bottom of one line and the top of the next&quot;</span>)</span><br><span class="line">                .frame(width: <span class="number">200</span>, height: <span class="number">200</span>, alignment: .leading)</span><br><span class="line">                .lineSpacing(<span class="number">10</span>)</span><br><span class="line">                .background(<span class="type">Color</span>.red)</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;This is a string in a  TextField with 10 point spaceing applied between the bottom of one line and the top of the next&quot;</span>)</span><br><span class="line">                .frame(width: <span class="number">200</span>, height: <span class="number">200</span>, alignment: .leading)</span><br><span class="line">                .multilineTextAlignment(.center)</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">                .flipsForRightToLeftLayoutDirection(<span class="literal">true</span>)</span><br><span class="line">                .environment(\.layoutDirection, .rightToLeft)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="五、组合文本"><a href="#五、组合文本" class="headerlink" title="五、组合文本"></a>五、组合文本</h1><p><img src="https://huayoyu-1254261238.cos.ap-shanghai.myqcloud.com/md/image-20220517214854293.png" alt="image-20220517214854293"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> combineText: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;huayoyu&quot;</span>)</span><br><span class="line">        .foregroundColor(.red)</span><br><span class="line">        .font(.title)</span><br><span class="line">    <span class="operator">+</span> <span class="type">Text</span>(<span class="string">&quot;huayoyu&quot;</span>)</span><br><span class="line">        .foregroundColor(.green)</span><br><span class="line">        .font(.largeTitle)</span><br><span class="line">        .italic()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SwiftUI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac+Jenkins+Git+参数化构建+Shell+iOS+蒲公英+钉钉自动打包</title>
      <link href="/2020/07/14/Mac+Jenkins+Git+%E5%8F%82%E6%95%B0%E5%8C%96%E6%9E%84%E5%BB%BA+Shell+iOS+%E8%92%B2%E5%85%AC%E8%8B%B1+%E9%92%89%E9%92%89%E8%87%AA%E5%8A%A8%E6%89%93%E5%8C%85/"/>
      <url>/2020/07/14/Mac+Jenkins+Git+%E5%8F%82%E6%95%B0%E5%8C%96%E6%9E%84%E5%BB%BA+Shell+iOS+%E8%92%B2%E5%85%AC%E8%8B%B1+%E9%92%89%E9%92%89%E8%87%AA%E5%8A%A8%E6%89%93%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<blockquote><p>作为iOS开发，每次打包都特别麻烦，需要耗费不少时间。于是我们可以采用Jenkins来做持续化集成，自动打包。</p></blockquote><p>这里采用的是在<strong>Mac</strong>上安装<strong>Jenkins</strong>环境，拉取<strong>Git</strong>上的代码，通过<strong>参数化配置</strong>，编写<strong>shell脚本</strong>，打包<strong>Xcode工程iOS代码</strong>，自动发布到<strong>蒲公英</strong>上，同时通过<strong>钉钉</strong>来推送打包的状态</p><h1 id="一、Jenkins环境的安装配置"><a href="#一、Jenkins环境的安装配置" class="headerlink" title="一、Jenkins环境的安装配置"></a>一、Jenkins环境的安装配置</h1><p>首先我们需要安装Jenkins的运行环境，安装Java 8。<br>配置好Java环境后，我们再进行安装Jenkins，这里我们采用的是war包安装的方式。</p><ol><li>我们需要从<a href="[https://www.jenkins.io/](https://www.jenkins.io/">Jenkins官网</a><br>)下载war包</li><li>将war包拷贝相应的目录，这里我放在了用户目录下，然后执行安装命令<code>java -jar jenkins.war</code></li><li>安装完成后，会显示如下界面，其中有一串Jenkins的登录密码，然后打开<a href="http://localhost:8080即可显示Jenkins页面![安装">http://localhost:8080即可显示Jenkins页面![安装</a><br>](<a href="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220520001520181.png">http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220520001520181.png</a>)</li></ol><p>期间我们可能需要稍等一会儿，首次启动Jenkins会进行一些相关配置。<br>然后我们就可以看到如下界面。<br><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220520001520903.png" alt="Snip20200714_4.png"></p><p>另外如果你有装tomcat，你也可以将Jenkins.war包放在tomcat的webapps目录下，然后启动tomcat服务器：<code>sudo sh startup.sh</code>(如果你没有在.bash_profile环境变量下配置tomcat的启动路径，那么你需要到tomcat的bin目录下执行该命令)<br>当看到tomcat启动完成后，在浏览器输入<a href="http://localhost:8080/jenkins，即可看到Jenkins启动页。">http://localhost:8080/jenkins，即可看到Jenkins启动页。</a><br>关闭tomcat的命令是：<code>sh ./shutdown.sh</code></p><ol><li>将刚刚看到的密码复制到启动页的管理员密码处，就解锁了Jenkins<br>然后进入下一步，选择安装推荐的插件，接着会自动安装相关插件。<br><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220520001521389.png" alt="Snip20200714_7.png"></li></ol><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220520001521542.png" alt="Snip20200714_6.png"></p><ol><li>接着我们创建一个管理员用户</li><li>配置Jenkins的地址，就完成了Jenkins的安装配置</li></ol><h1 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h1><p>接下来我们就开始配置自动打包Xcode工程</p><h3 id="1-首先我们创建一个新的构建任务"><a href="#1-首先我们创建一个新的构建任务" class="headerlink" title="1.首先我们创建一个新的构建任务"></a>1.首先我们创建一个新的构建任务</h3><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220520001521668.png" alt="image.png"><br>点击新建Item，输入任务名称，选择FreeStyle project，即可完成创建构建任务。<br>创建完成后如上图所示，这里我建了一个叫newProject的任务。</p><h3 id="2-安装相关插件"><a href="#2-安装相关插件" class="headerlink" title="2. 安装相关插件"></a>2. 安装相关插件</h3><p>回到Jenkins首页，选择进入Jenkins的管理配置页<br><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220520001521786.png" alt="image.png"><br>选择Manager Plugins，管理插件，在可选插件页搜索并安装<br>1）DingTalk插件，这是为了来做构建后钉钉通知的<br>2）GitLab Plugin和Gitlab Hook Plugin，用GitLab管理源代码的<br>3）Xcode integration，用来使用Xcode命令打包工程的<br>4）Git parameter，用来进行参数化构建的<br>安装完钉钉插件后对钉钉做一些相关配置<br>先在钉钉上建一个群，然后在群里添加一个自定义的webhook机器人，拿到webHook地址和加密的字串<br><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220520001521909.png" alt="Snip20200714_3.png"><br>然后进入到Jenkins的配置页，对钉钉做一些配置，填入上面的webhook地址和加密字串，id是系统自动生成的，选择通知时机。然后测试一下，看到群里收到钉钉消息就成功了。保存退出<br><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220520001522031.png" alt="image.png"></p><h3 id="3-然后进入到构建任务的设置界面"><a href="#3-然后进入到构建任务的设置界面" class="headerlink" title="3.然后进入到构建任务的设置界面"></a>3.然后进入到构建任务的设置界面</h3><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220520001522296.png" alt="image.png"></p><h4 id="1）General"><a href="#1）General" class="headerlink" title="1）General"></a>1）General</h4><p>首先我们可以看到一个钉钉配置，这里我们勾选上钉钉机器人即可，另外我们还可以自定定义通知人和消息内容，到这里，我们就完成了钉钉的消息推送配置。<br><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220520001522472.png" alt="image.png"></p><p>接着我们进行参数化构建，可以根据自己需求选择是否需要参数化构建，这里参数化构建指的我们可以在构建打包工程之前通过这里配置的参数，来打不同的包，这里我们可以设置Jenkins的内置参数，也可以自定义参数，自定义的参数可以通过脚本修改Xcode工程中的配置文件，从而达到工程读取不同的配置文件内容展现不同的功能，这里两种方式都有演示。<br><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220520001523114.png" alt="QQ20200710-162104.png"><br>这里我配置了一个Jenkins的参数和一个自定义参数，其中iOS_Branch_Tag可以用来区分构建不同分支上的代码，iOS_Code_Params是用来演示配置文件的参数，后面会讲到</p><h4 id="2）源码管理"><a href="#2）源码管理" class="headerlink" title="2）源码管理"></a>2）源码管理</h4><p>我们这里是采用的git方式管理代码，因此我们选择Git，然后配置好URL和身份信息，没有身份信息点击添加，填写用户名和密码即可。<br>然后选择我们进行构建的分支，由于我们是采用参数化配置构建分支的，因此这里我们填入上面配置的参数。</p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220520001523207.png" alt="image.png"></p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220520001523331.png" alt="image.png"></p><h4 id="3）构建触发器"><a href="#3）构建触发器" class="headerlink" title="3）构建触发器"></a>3）构建触发器</h4><p>这里可以根据自己的需求进行配置：可以选择当有Git操作时就构建，也可以自己设置定时任务等。。。，这里我选择当有Git操作就执行打包任务.</p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220520001523489.png" alt="image.png"></p><h4 id="4）构建环境"><a href="#4）构建环境" class="headerlink" title="4）构建环境"></a>4）构建环境</h4><p>这里我们没有什么需要进行配置的</p><h4 id="5）构建"><a href="#5）构建" class="headerlink" title="5）构建"></a>5）构建</h4><p>这里我们选择使用shell脚本进行构建,直接执行脚本就可以。这里建了一个shell脚本文件，用来执行</p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220520001523562.png" alt="image.png"></p><p>这一步是最重要也是最复杂的一步<br>我们需要编写构建的脚本代码，在这之前我先列举一下常用的环境变量<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Jenkins常用内置参数：</span><br><span class="line"></span><br><span class="line">echo $HOME：MAC下用户目录。例如：$HOME表示：/Users/用户名</span><br><span class="line"></span><br><span class="line">echo $WORKSPACE：Jenkins的工作目录。例如你创建了一个newProject的工作空间，那么对应的路径就是： /Users/用户名/.jenkins/workspace/newProject</span><br><span class="line"></span><br><span class="line">echo $JOB_NAME：Jenkins的工作目录名称。例如你创建了一个newProject的工作空间，那么对应的名称为：newProject</span><br><span class="line"></span><br><span class="line">echo $BUILD_NUMBER：Jenkins的构建版本号。例如：43</span><br><span class="line"></span><br><span class="line">echo $HUDSON_URL/ echo $JENKINS_URL：jenkins的url。例如：http://localhost:8080/</span><br><span class="line"></span><br><span class="line">echo $BUILD_URL：build的url。例如：[http://localhost:8080/job/newProject/43/](http://localhost:8080/job/newProject/43/)</span><br><span class="line"></span><br><span class="line">echo $JOB_URL：job的url。例如：[http://localhost:8080/job/newProject/](http://localhost:8080/job/newProject/)</span><br><span class="line"></span><br><span class="line">echo $BUILD_DISPLAY_NAME：当前版本的显示名称，默认为“＃153”。例如：#43</span><br><span class="line"></span><br><span class="line">echo $BUILD_TAG：“jenkins- $ &#123;JOB_NAME&#125; - $ &#123;BUILD_NUMBER&#125; ”的字符串。JOB_NAME中的所有正斜杠（/）都会用破折号（ - ）替换。方便放入资源文件，jar文件等，以方便识别。例如：jenkins-newProject-43</span><br><span class="line"></span><br><span class="line">echo $EXECUTOR_NUMBER：识别执行此构建的当前执行程序（在同一台计算机的执行程序中）的唯一编号。这是您在“构建执行者状态”中看到的数字，但数字从0开始，而不是1。例如：1</span><br><span class="line"></span><br><span class="line">echo $NODE_NAME：代理的名称，如果构建是代理，或者“主”，如果在主机上运行。例如：master</span><br><span class="line"></span><br><span class="line">echo $NODE_LABELS：空格分隔的节点分配的标签列表。例如：master</span><br><span class="line"></span><br><span class="line">echo $JENKINS_HOME：Jenkins在硬盘上存储路径。例如：/Users/meme/.jenkins</span><br></pre></td></tr></table></figure></p><p>下面使我们的打包脚本<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"># 设置mac的keychain的开机密码</span><br><span class="line">security unlock-keychain -p &quot;开机密码&quot; $HOME/Library/Keychains/login.keychain-db</span><br><span class="line"></span><br><span class="line"># 更新pod</span><br><span class="line">pod install</span><br><span class="line"></span><br><span class="line"># 删除之前构建的数据</span><br><span class="line">rm -rf $WORKSPACE/exportPath</span><br><span class="line">rm -rf $WORKSPACE/dist</span><br><span class="line"></span><br><span class="line"># 修改本地参数配置文件, 根据Jenkins配置修改工程配置文件</span><br><span class="line"># 采用sed语法</span><br><span class="line">JENKINS_CONFIG_FILE=$WORKSPACE/NewLive/Jenkins/jenkins_config.json</span><br><span class="line">PATTERN1=&quot;iOS_Code_Params.*&quot;</span><br><span class="line"></span><br><span class="line">PATTERN2=&quot;iOS_Code_Params\&quot;:params1,&quot;</span><br><span class="line">sed -ig &#x27;s/&#x27;$PATTERN1&#x27;/&#x27;$PATTERN2&#x27;/g&#x27; $JENKINS_CONFIG_FILE</span><br><span class="line"></span><br><span class="line">if [ &quot;params1&quot; = &quot;$iOS_Code_Params&quot; ];then</span><br><span class="line">PATTERN2=&quot;iOS_Code_Params\&quot;:params1,&quot;</span><br><span class="line">sed -ig &#x27;s/&#x27;$PATTERN1&#x27;/&#x27;$PATTERN2&#x27;/g&#x27; $JENKINS_CONFIG_FILE</span><br><span class="line">else</span><br><span class="line">PATTERN2=&quot;iOS_Code_Params\&quot;:params2,&quot;</span><br><span class="line">sed -ig &#x27;s/&#x27;$PATTERN1&#x27;/&#x27;$PATTERN2&#x27;/g&#x27; $JENKINS_CONFIG_FILE</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># 利用xcodebuild 生成 .xcarchive 文件</span><br><span class="line">xcodebuild -archivePath NewLive/NewLive.xcarchive -workspace $WORKSPACE/NewLive/NewLive.xcworkspace  -sdk iphoneos -scheme &quot;NewLive&quot; -configuration &quot;Debug&quot; archive</span><br><span class="line"># 生成 ipa 文件</span><br><span class="line">xcodebuild -exportArchive  -archivePath NewLive/&quot;NewLive.xcarchive&quot; -exportOptionsPlist $WORKSPACE/JenkinsConfig/NewMeme.plist -exportPath &quot;exportPath&quot;</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># 将编译后的文件复制到jenkins对应的结构目录里面</span><br><span class="line">#</span><br><span class="line">mkdir -p $WORKSPACE/dist/$JOB_NAME</span><br><span class="line">mv $WORKSPACE/NewLive/NewLive.xcarchive $WORKSPACE/dist/$JOB_NAME/$JOB_NAME-$BUILD_NUMBER.xcarchive</span><br><span class="line">mv $WORKSPACE/exportPath/NewLive.ipa $WORKSPACE/dist/$JOB_NAME/$JOB_NAME-$BUILD_NUMBER.ipa</span><br><span class="line"></span><br><span class="line"># 上传蒲公英</span><br><span class="line">#蒲公英上的User Key</span><br><span class="line">uKey=&quot;7506db9b52d4c572ce0594c67fb633f2&quot;</span><br><span class="line">#蒲公英上的API Key</span><br><span class="line">apiKey=&quot;8e217b9ab23df1ee940ae31a8577378c&quot;</span><br><span class="line">#要上传的ipa文件路径</span><br><span class="line">IPA_PATH=&quot;$WORKSPACE/dist/$JOB_NAME/$JOB_NAME-$BUILD_NUMBER.ipa&quot;</span><br><span class="line">#执行上传至蒲公英的命令，这句不需要修改</span><br><span class="line">curl -F &quot;file=@$&#123;IPA_PATH&#125;&quot; -F &quot;uKey=$&#123;uKey&#125;&quot; -F &quot;_api_key=$&#123;apiKey&#125;&quot; https://www.pgyer.com/apiv1/app/upload</span><br><span class="line"></span><br><span class="line"># 生成bugly用的符号表, 手动上传至Bugly符号表管理,可以设置Xcode Run Script 自动上传至Bugly符号表管理</span><br><span class="line">#if [ &quot;Debug&quot; = &quot;$Configuration&quot; ];then</span><br><span class="line">#echo &quot;测试模式下没有bugly的包&quot;</span><br><span class="line">#else</span><br><span class="line">#Java -jar /Users/meme/bin/buglySymboliOS.jar -i $WORKSPACE/dist/$JOB_NAME/$JOB_NAME-$BUILD_NUMBER.xcarchive/dSYMs/么么直播.app.dSYM -o $WORKSPACE/dist/$JOB_NAME/$JOB_NAME-$BUILD_NUMBER.dSYMs.bugly.zip</span><br><span class="line">#fi</span><br></pre></td></tr></table></figure><br>对于以上脚本做几点解释：</p><ol><li>由于我们是独立的打包机，可能会锁屏，所以需要输入开机密码</li><li>我们的工程有用到pod，所以打包之前需要更新下pod库</li><li>接着是删除之前构建的文件，防止存储空间不够，不过如果你要作为发布版本打包的话，你需要将打包文件存下来，后面可能需要代码的符号表。你也可以自己做个配置处理</li><li>接着是为了处理参数化构建，我们上面在General中定义了一个自定义参数iOS_Code_Params，这里预设了两个选项param1和param2，同时我们在工程的Jenkins目录下见了一个jenkins_config.json的配置文件。<br><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220520001523599.png" alt="A7317682-7508-4BEB-994C-EE843B2BD384.png"><br><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220520001523669.png" alt="image.png"><br><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220520001523724.png" alt="image.png"></li></ol><p>这段代码就是根据Jenkins构建前选择的配置修改工程中的配置文件。<br>然后我们代码里读取响应的配置文件，如下：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">override func viewDidLoad() &#123;</span><br><span class="line">    super.viewDidLoad()</span><br><span class="line">    presentAlert(getJenkinsParams())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func getJenkinsParams() -&gt; String &#123;</span><br><span class="line">    // false 使用hybrid_link 测试使用的</span><br><span class="line">    // true 使用dev_hybrid_link 开发使用的</span><br><span class="line">    var params = &quot;&quot;</span><br><span class="line">    do &#123;</span><br><span class="line">        let filePath = Bundle.main.path(forResource: &quot;jenkins_config&quot;, ofType: &quot;json&quot;)</span><br><span class="line">        if FileManager.default.fileExists(atPath: filePath ?? &quot;&quot;) &#123;</span><br><span class="line">            var configDic: [AnyHashable : Any]? = nil</span><br><span class="line">            if let data = NSData(contentsOfFile: filePath ?? &quot;&quot;) &#123;</span><br><span class="line">                configDic = try! JSONSerialization.jsonObject(with: data as Data, options: .mutableContainers) as? [AnyHashable : Any]</span><br><span class="line">            &#125;</span><br><span class="line">            if let param = configDic?[&quot;iOS_Code_Params&quot;] as? String &#123;</span><br><span class="line">                params = param</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    return params</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func presentAlert(_ message: String, okTitle: String = &quot;确定&quot;, finished: NLFinishedBlock? = nil) &#123;</span><br><span class="line">        guard !message.isEmpty else &#123;</span><br><span class="line">            return</span><br><span class="line">        &#125;</span><br><span class="line">        let alertView = UIAlertController(title: message, message: &quot;&quot;, preferredStyle: .alert)</span><br><span class="line">        alertView.addAction(UIAlertAction(title: okTitle, style: .default) &#123; _ in</span><br><span class="line">            finished?()</span><br><span class="line">        &#125;)</span><br><span class="line">        UIViewController.current()?.present(alertView, animated: true, completion: nil)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br>这里简单处理 下，就是读取配置文件然后弹出来。<br>根据自己需求设置参数和文件位置，另外这里采用的是sed语法，有兴趣可以自己了解一下。</p><ol><li>接下来我们通过xcodebuild命令进行打包，这个命令做过iOS应该都比较熟悉了，首先生成.xcarchive文件，然后根据.xcarchive文件生成.ipa文件。这里注意要设置对代码文件的位置，以及.xcarchive文件和.ipa文件的输出路径，这里我放在了工程目录下。</li><li>我们这里打包采用的手动配置证书，Xocde证书要配置好，在执行xcodebuild命令之前，我们需要准备一个.plist文件，文件里包含有打包的环境（debug还是release），证书，pp文件名称。。。，这些我们可以根据以前手动打包生成的.ipa文件时，有一个.plist文件，改一下.plist文件内容即可。或者觉得不太清楚的话，先手动打个包，将打包好的.plist文件拷贝过来即可，注意要设置好路径。<br>7.这里使用脚本就是为了用户在Jenkins配置里填一堆乱七八糟的东西，还要下载各种插件等等，比较麻烦，脚本的话一下就搞定了，后面配置其他工程也方便。<br>8.如果不喜欢使用xcodebuild命令的话，也可以使用fastlane进行打包，这个还更方便点.<br>9.我这里做了移动文件的操作，你们可以按需来<br>10.上传到蒲公英上，需要自己进蒲公英注册个应用拿到ukey和api key，最后上传即可<br>11.这里还加了一段生成Bugly符号表的操作，其实我们可以直接在Xcode的Run Script中加入，可以自动生成符号表并上传到Bugly后台。</li></ol><h4 id="6）构建后操作"><a href="#6）构建后操作" class="headerlink" title="6）构建后操作"></a>6）构建后操作</h4><p>这里加了一个归档成品，就是读取到打包出来的.ipa文件，可以在Jenkins的工作控件页面看到.ipa文件直接下载。这两个路径是上面脚本中最终将.ipa拷贝到的路径位置。<br><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220520001523894.png" alt="image.png"></p><p>到这里，关于项目的Jenkins配置就完成了。<br>我们回到项目首页，配置相关参数进行构建即可</p><p>当开始构建、构建成功、构建失败，都会有消息推送到钉钉群里<br>构建成功后，你可以在Jenkins页面上看到打包出来的.ipa文件，以及蒲公英上传的.ipa文件，同时还可以看到Bugly后台的符号表文件（前提是在Xcode工程中配置过了）</p><h2 id="相关截图："><a href="#相关截图：" class="headerlink" title="相关截图："></a>相关截图：</h2><ol><li>相关构建参数选择，选择完后，进行开始构建</li></ol><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220520001523961.png" alt="image.png"></p><ol><li>构建过程中我们可以点控制台输出查看构建日志</li></ol><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220520001524077.png" alt="image.png"></p><ol><li>构建成功后，会在任务界面上显示包文件，点击可以直接下载</li></ol><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220520001524218.png" alt="image.png"></p><p>4.钉钉群消息</p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220520001524396.png" alt="image.png"></p><p>5.还有蒲公英和Bugly的就不截图了</p><blockquote><p>总结：<br>我们采用Jenkins在Mac上对Xcode工程做了自动打包操作，涉及到有自定义构建参数，Git代码，shell脚本打包，蒲公英自动上传，钉钉推送打包状态。<br>其中注意的是编写shell脚本时各个目录结构，证书、PP文件的配置。<br>对于参数化构建，打包方式（xcodebuild、Fastlane）、蒲公英自动上传和钉钉通知可以按各自需求</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 持续集成 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter上拉加载下拉刷新</title>
      <link href="/2019/03/22/Flutter/Flutter%E4%B8%8A%E6%8B%89%E5%8A%A0%E8%BD%BD%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0/"/>
      <url>/2019/03/22/Flutter/Flutter%E4%B8%8A%E6%8B%89%E5%8A%A0%E8%BD%BD%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>简单学习记录下,flutter的简单的上拉加载下拉刷新</p></blockquote><p>效果图<br><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/strip-20220520001408296.gif" alt="refresh.gif"></p><p>上代码<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line">class RefreshWidget extends StatefulWidget &#123;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  _RefreshState createState() &#123;</span><br><span class="line">    return _RefreshState();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class _RefreshState extends State&lt;RefreshWidget&gt; &#123;</span><br><span class="line">  // 用一个key来保存下拉刷新控件RefreshIndicator</span><br><span class="line">  GlobalKey&lt;RefreshIndicatorState&gt; _refreshKey = GlobalKey&lt;RefreshIndicatorState&gt;();</span><br><span class="line">  // 承载listView的滚动视图</span><br><span class="line">  ScrollController _scrollController = ScrollController();</span><br><span class="line">  // 数据源</span><br><span class="line">  List&lt;String&gt; _dataSource = List&lt;String&gt;();</span><br><span class="line">  // 当前加载的页数</span><br><span class="line">  int _pageSize = 0;</span><br><span class="line"></span><br><span class="line">  // 加载数据</span><br><span class="line">  void _loadData(int index) &#123;</span><br><span class="line">    for (int i=0; i&lt;15; i++) &#123;</span><br><span class="line">      _dataSource.add((i+15*index).toString());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 下拉刷新</span><br><span class="line">  Future&lt;Null&gt; _onRefresh() &#123;</span><br><span class="line">    return Future.delayed(Duration(seconds: 2), () &#123;</span><br><span class="line">      print(&quot;正在刷新...&quot;);</span><br><span class="line">      _pageSize = 0;</span><br><span class="line">      _dataSource.clear();</span><br><span class="line">      setState(() &#123;</span><br><span class="line">        _loadData(_pageSize);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 加载更多</span><br><span class="line">  Future&lt;Null&gt; _loadMoreData() &#123;</span><br><span class="line">    return Future.delayed(Duration(seconds: 1), () &#123;</span><br><span class="line">      print(&quot;正在加载更多...&quot;);</span><br><span class="line"></span><br><span class="line">      setState(() &#123;</span><br><span class="line">        _pageSize++;</span><br><span class="line">        _loadData(_pageSize);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 刷新</span><br><span class="line">  showRefreshLoading() &#123;</span><br><span class="line">    new Future.delayed(const Duration(seconds: 0), () &#123;</span><br><span class="line">      _refreshKey.currentState.show().then((e) &#123;&#125;);</span><br><span class="line">      return true;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  void initState() &#123;</span><br><span class="line">    showRefreshLoading();</span><br><span class="line">    _scrollController.addListener(() &#123;</span><br><span class="line">      if (_scrollController.position.pixels == _scrollController.position.maxScrollExtent) &#123;</span><br><span class="line">        _loadMoreData();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    super.initState();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return RefreshIndicator(</span><br><span class="line">      key: _refreshKey,</span><br><span class="line">      onRefresh: _onRefresh,</span><br><span class="line">      child: ListView.separated(</span><br><span class="line">        controller: _scrollController,</span><br><span class="line">        padding: EdgeInsets.all(8.0),</span><br><span class="line">        physics: const AlwaysScrollableScrollPhysics(),</span><br><span class="line">        itemBuilder: (buildContext, index) &#123;</span><br><span class="line">          return items(context, index);</span><br><span class="line">        &#125;,</span><br><span class="line">        itemCount: _dataSource.isEmpty ? 0 : _dataSource.length+1,</span><br><span class="line">        separatorBuilder: (buildContext, index) &#123;</span><br><span class="line">          return Divider(</span><br><span class="line">            height: 1,</span><br><span class="line">            color: Colors.lightGreen,</span><br><span class="line">          );</span><br><span class="line">        &#125;,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // item控件</span><br><span class="line">  Widget items(context, index) &#123;</span><br><span class="line">    if (index == _dataSource.length) &#123;</span><br><span class="line">      return Container(</span><br><span class="line">        child: Padding(</span><br><span class="line">            padding: const EdgeInsets.all(15.0),</span><br><span class="line">            child: Center(</span><br><span class="line">              child: Row(</span><br><span class="line">                mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">                children: &lt;Widget&gt;[</span><br><span class="line">                  CircularProgressIndicator(</span><br><span class="line">                    backgroundColor: Theme.of(context).primaryColor,</span><br><span class="line">                  ),</span><br><span class="line">                  SizedBox(</span><br><span class="line">                    width: 10.0,</span><br><span class="line">                  ),</span><br><span class="line">                  Text(</span><br><span class="line">                    &quot;正在加载&quot;,</span><br><span class="line">                    style: TextStyle(</span><br><span class="line">                        fontWeight: FontWeight.bold,</span><br><span class="line">                        fontSize: 14.0,</span><br><span class="line">                        color: Colors.deepPurple</span><br><span class="line">                    ),</span><br><span class="line">                  )</span><br><span class="line">                ],</span><br><span class="line">              ),</span><br><span class="line">            )</span><br><span class="line">        ),</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">    return Center(</span><br><span class="line">        child: Padding(</span><br><span class="line">          padding: const EdgeInsets.all(20.0),</span><br><span class="line">          child: Text.rich(TextSpan(</span><br><span class="line">              children: [</span><br><span class="line">                TextSpan(text: &quot;我是第&quot;),</span><br><span class="line">                TextSpan(</span><br><span class="line">                    text: &quot;$&#123;_dataSource[index]&#125;&quot;,</span><br><span class="line">                    style: TextStyle(</span><br><span class="line">                        color: Colors.red,</span><br><span class="line">                        fontSize: 18.0,</span><br><span class="line">                        fontWeight: FontWeight.bold</span><br><span class="line">                    )</span><br><span class="line">                ),</span><br><span class="line">                TextSpan(text: &quot;个&quot;)</span><br><span class="line">              ]</span><br><span class="line">          )),</span><br><span class="line">        )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里有段代码<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 刷新</span><br><span class="line">  showRefreshLoading() &#123;</span><br><span class="line">    new Future.delayed(const Duration(seconds: 0), () &#123;</span><br><span class="line">      _refreshKey.currentState.show().then((e) &#123;&#125;);</span><br><span class="line">      return true;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><br><code>_refreshKey.currentState.show()</code>表示刷新时的头部，他放在一个延时的异步操作中，当时还在考虑为什么放在异步里，直接在<code>initState</code>里调用不行么，试了一下，报错，错误日志是因为<code>RefreshIndicator</code>为空，也就是图层还没渲染完成，build方法还没执行完，这里加异步是为了等渲染完成后再进行操作，即使延迟时间为0秒。</p><p>另外注意<code>RefreshIndicator</code>这个Widget，里面有一个<code>onRefresh</code>属性，他只接收一个Future对象，所以为什么这里下拉刷新，加载更多方法要设置返回值为Future。</p><p>还有这里的<code>itemCount</code>属性为<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_dataSource.isEmpty ? 0 : _dataSource.length+1</span><br></pre></td></tr></table></figure><br>是当没有数据时只有顶部圆圈存在，当有数据时，除了每条数据占据一行以外，当滑到最下面时，有一个加载widget占据一行。</p><blockquote><p>另外还有<a href="https://github.com/xuelongqy/flutter_easyrefresh">flutter_easyrefresh</a>刷新加载这个第三方，改天试试。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud08：SpringCloud Config分布式配置中心</title>
      <link href="/2019/01/08/SpringCloud/SpringCloud08%EF%BC%9ASpringCloud%20Config%E5%88%86%E5%B8%83%E5%BC%8F%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/"/>
      <url>/2019/01/08/SpringCloud/SpringCloud08%EF%BC%9ASpringCloud%20Config%E5%88%86%E5%B8%83%E5%BC%8F%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本系列对应的是尚硅谷周阳Spring Cloud的思维导图整理的笔记，用来方便自己后面的知识点回顾。分别以每个知识点作为一篇文章详细讲述。</p></blockquote><p>知识点传送门：<br><a href="https://github.com/HuiYouHua/SpringCloud">项目源码</a></p><ul><li><a href="https://www.jianshu.com/p/c4c8c19d9f23">SpringCloud01：微服务概述与SpringCloud</a></li><li><a href="https://www.jianshu.com/p/9bc7aa82a07d">SpringCloud02：Rest微服务构建案例工程模块</a></li><li><a href="https://www.jianshu.com/p/afaef0642065">SpringCloud03：Eureka服务注册与发现</a></li><li><a href="https://www.jianshu.com/p/952b4895b6ae">SpringCloud04：Ribbon负载均衡</a></li><li><a href="https://www.jianshu.com/p/b2ec4c74ff75">SpringCloud05：Feign负载均衡</a></li><li><a href="https://www.jianshu.com/p/1b4da963374d">SpringCloud06：Hystrix断路器</a></li><li><a href="https://www.jianshu.com/p/91364d0e535d">SpringCloud07：zuul路由网关</a></li><li><a href="https://www.jianshu.com/p/31f79b4cd84d">SpringCloud08：SpringCloud Config分布式配置中心</a></li></ul><h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><h2 id="1-分布式系统面临的—配置问题"><a href="#1-分布式系统面临的—配置问题" class="headerlink" title="1.分布式系统面临的—配置问题"></a>1.分布式系统面临的—配置问题</h2><p>微服务意味着要将单体应用中的业务拆分成一个个子服务，每个服务的粒度相对较小，因此系统中会出现大量的服务。由于每个服务都需要必要的配置信息才能运行，所以一套集中式的动态的配置管理设施是必不可少的。SpringCloud提供了ConfigServer来解决这个问题，我们每一个微服务自己带着一个application.yml，上百个配置文件的管理。</p><h2 id="2-是什么"><a href="#2-是什么" class="headerlink" title="2.是什么"></a>2.是什么</h2><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220520000313961.png" alt="Snip20190108_1.png"></p><p>SpringCloud Config为微服务架构中的微服务提供集中化的外部配置支持，配置服务器为<strong>各个不同微服务应用</strong>的所有环境提供了一个<strong>中心化的外部配置</strong>。</p><p>SpringCloud Config分为<strong>服务端和客户端两部分</strong>。</p><p>服务端也称为<strong>分布式配置中心，它是一个独立的微服务应用</strong>，用来连接配置服务器并为客户端提供获取配置信息，加密/解密信息等访问接口。</p><p>客户端则是通过指定的配置中心来管理应用资源，以及与业务相关的配置内容，并在启动的时候从配置中心获取和加载配置信息，配置服务器默认采用git来存储配置信息，这样就有助于对环境配置进行版本管理，并且可以通过git客户端工具来方便的管理和访问配置内容。</p><h2 id="3-能干嘛"><a href="#3-能干嘛" class="headerlink" title="3.能干嘛"></a>3.能干嘛</h2><ol><li>集中管理配置文件</li><li>不同环境不同配置，动态化的配置更新，分环境部署比如dev/test/prod/beta/release</li><li>运行期间动态调整配置，不再需要在每个服务部署的机器上编写配置文件，服务会向配置中心统一拉取配置自己的信息</li><li>当配置发生变动时，服务不需要重启即可感知到配置的变化并应用新的配置</li><li>将配置信息以REST就接口的形式暴露</li></ol><h2 id="4-与GitHub整合配置"><a href="#4-与GitHub整合配置" class="headerlink" title="4.与GitHub整合配置"></a>4.与GitHub整合配置</h2><p>由于SpringCloud Config默认使用Git来存储配置文件（也有其它方式，比如支持SVN和本地文件），但最推荐的还是Git，而且使用的是http/https访问的形式</p><h1 id="二、SpringCloud-Config服务端配置"><a href="#二、SpringCloud-Config服务端配置" class="headerlink" title="二、SpringCloud Config服务端配置"></a>二、SpringCloud Config服务端配置</h1><h2 id="1-用自己的GitHub账号在GitHub上新建一个名为microservicecloud-config的新Respository"><a href="#1-用自己的GitHub账号在GitHub上新建一个名为microservicecloud-config的新Respository" class="headerlink" title="1.用自己的GitHub账号在GitHub上新建一个名为microservicecloud-config的新Respository"></a>1.用自己的GitHub账号在GitHub上新建一个名为microservicecloud-config的新Respository</h2><h2 id="2-由上一步获得SSH协议的git地址"><a href="#2-由上一步获得SSH协议的git地址" class="headerlink" title="2.由上一步获得SSH协议的git地址"></a>2.由上一步获得SSH协议的git地址</h2><h2 id="3-本地硬盘目录上新建git仓库并clone"><a href="#3-本地硬盘目录上新建git仓库并clone" class="headerlink" title="3.本地硬盘目录上新建git仓库并clone"></a>3.本地硬盘目录上新建git仓库并clone</h2><h2 id="4-在本地microservicecloud-config新建一个application-yml"><a href="#4-在本地microservicecloud-config新建一个application-yml" class="headerlink" title="4.在本地microservicecloud-config新建一个application.yml"></a>4.在本地microservicecloud-config新建一个application.yml</h2><p>保存格式必须为<strong>UTF-8</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">profiles:</span><br><span class="line">active:</span><br><span class="line">- dev</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">spring:</span><br><span class="line">profiles: dev #开发环境</span><br><span class="line">application:</span><br><span class="line">name: microservicecloud-config-atguigu-dev</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">spring:</span><br><span class="line">profiles: test #测试环境</span><br><span class="line">application:</span><br><span class="line">name: microservicecloud-config-atguigu-test</span><br><span class="line"># 请保存为UTF-8格式</span><br></pre></td></tr></table></figure></p><h2 id="5-将上一步的YML文件推送到github上"><a href="#5-将上一步的YML文件推送到github上" class="headerlink" title="5.将上一步的YML文件推送到github上"></a>5.将上一步的YML文件推送到github上</h2><h2 id="6-新建Module模块microservicecloud-config-3344，它即为Cloud的配置中心模块"><a href="#6-新建Module模块microservicecloud-config-3344，它即为Cloud的配置中心模块" class="headerlink" title="6.新建Module模块microservicecloud-config-3344，它即为Cloud的配置中心模块"></a>6.新建Module模块microservicecloud-config-3344，它即为Cloud的配置中心模块</h2><h2 id="7-POM"><a href="#7-POM" class="headerlink" title="7.POM"></a>7.POM</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">&lt;parent&gt;</span><br><span class="line">&lt;groupId&gt;com.atguigu.springcloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;microservicecloud&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">&lt;artifactId&gt;microservicecloud-config-3344&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;!-- springCloud Config --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-config-server&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- 避免Config的Git插件报错：org/eclipse/jgit/api/TransportConfigCallback --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.eclipse.jgit&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;org.eclipse.jgit&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;4.10.0.201712302008-r&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- 图形化监控 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- 熔断 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-hystrix&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-jetty&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- 热部署插件 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;springloaded&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h2 id="8-YML"><a href="#8-YML" class="headerlink" title="8.YML"></a>8.YML</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server: </span><br><span class="line">  port: 3344 </span><br><span class="line">  </span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name:  microservicecloud-config</span><br><span class="line">  cloud:</span><br><span class="line">    config:</span><br><span class="line">      server:</span><br><span class="line">        git:</span><br><span class="line">          uri: git@github.com:zzyybs/microservicecloud-config.git #GitHub上面的git仓库名字</span><br></pre></td></tr></table></figure><h2 id="9-主启动类Config-3344-StartSpringCloudApp"><a href="#9-主启动类Config-3344-StartSpringCloudApp" class="headerlink" title="9.主启动类Config_3344_StartSpringCloudApp"></a>9.主启动类Config_3344_StartSpringCloudApp</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package com.atguigu.springcloud;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.config.server.EnableConfigServer;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableConfigServer</span><br><span class="line">public class Config_3344_StartSpringCloudApp</span><br><span class="line">&#123;</span><br><span class="line">public static void main(String[] args)</span><br><span class="line">&#123;</span><br><span class="line">SpringApplication.run(Config_3344_StartSpringCloudApp.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-修改host文件，增加映射"><a href="#10-修改host文件，增加映射" class="headerlink" title="10.修改host文件，增加映射"></a>10.修改host文件，增加映射</h2><p>127.0.0.1 config-3344.com</p><h2 id="11-测试通过Config微服务是否可以从GitHub上获取配置内容"><a href="#11-测试通过Config微服务是否可以从GitHub上获取配置内容" class="headerlink" title="11.测试通过Config微服务是否可以从GitHub上获取配置内容"></a>11.测试通过Config微服务是否可以从GitHub上获取配置内容</h2><ol><li>启动微服务3344</li><li><a href="http://config-3344.com:3344/application-dev.yml">http://config-3344.com:3344/application-dev.yml</a></li><li><a href="http://config-3344.com:3344/application-test.yml">http://config-3344.com:3344/application-test.yml</a></li><li><a href="http://config-3344.com:3344/application-xxx.yml(不存在的配置">http://config-3344.com:3344/application-xxx.yml(不存在的配置</a>)<h2 id="12-配置读取规则"><a href="#12-配置读取规则" class="headerlink" title="12.配置读取规则"></a>12.配置读取规则</h2>访问配置规则地址，通常采用2，即上面的读取方式</li><li>/{application}/{profile}[/{label}]</li><li>/{application}-{profile}.yml</li><li>/{label}/{application}-{profile}.yml</li></ol><p>成功实现了用SpringCloud Config通过GitHub获取配置信息</p><h1 id="三、SpringCloud-Config客户端配置与测试"><a href="#三、SpringCloud-Config客户端配置与测试" class="headerlink" title="三、SpringCloud Config客户端配置与测试"></a>三、SpringCloud Config客户端配置与测试</h1><h2 id="1-在仓库新建microservicecloud-config-client-yml"><a href="#1-在仓库新建microservicecloud-config-client-yml" class="headerlink" title="1.在仓库新建microservicecloud-config-client.yml"></a>1.在仓库新建microservicecloud-config-client.yml</h2><h2 id="2-microservicecloud-config-client-yml内容"><a href="#2-microservicecloud-config-client-yml内容" class="headerlink" title="2.microservicecloud-config-client.yml内容"></a>2.microservicecloud-config-client.yml内容</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">profiles:</span><br><span class="line">active:</span><br><span class="line">- dev</span><br><span class="line">---</span><br><span class="line">server:</span><br><span class="line"> port: 8201</span><br><span class="line">spring:</span><br><span class="line">profiles: dev </span><br><span class="line">application:</span><br><span class="line">name: microservicecloud-config-client</span><br><span class="line">eureka:</span><br><span class="line">client:</span><br><span class="line">service-url:</span><br><span class="line">defaultZone: http://eureka-dev.com:7001/eureka/</span><br><span class="line">---</span><br><span class="line">server:</span><br><span class="line"> port: 8202</span><br><span class="line">spring:</span><br><span class="line">profiles: test </span><br><span class="line">application:</span><br><span class="line">name: microservicecloud-config-client</span><br><span class="line">eureka:</span><br><span class="line">client:</span><br><span class="line">service-url:</span><br><span class="line">defaultZone: http://eureka-test.com:7001/eureka/</span><br></pre></td></tr></table></figure><h2 id="3-提交microservicecloud-config-client-yml文件到GitHub上"><a href="#3-提交microservicecloud-config-client-yml文件到GitHub上" class="headerlink" title="3.提交microservicecloud-config-client.yml文件到GitHub上"></a>3.提交microservicecloud-config-client.yml文件到GitHub上</h2><h2 id="4-新建microservicecloud-config-client-3355"><a href="#4-新建microservicecloud-config-client-3355" class="headerlink" title="4.新建microservicecloud-config-client-3355"></a>4.新建microservicecloud-config-client-3355</h2><h2 id="5-修改POM文件"><a href="#5-修改POM文件" class="headerlink" title="5.修改POM文件"></a>5.修改POM文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">&lt;parent&gt;</span><br><span class="line">&lt;groupId&gt;com.atguigu.springcloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;microservicecloud&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">&lt;artifactId&gt;microservicecloud-config-client-3355&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;!-- SpringCloud Config客户端 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-hystrix&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-jetty&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;springloaded&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h2 id="6-bootstrap-yml"><a href="#6-bootstrap-yml" class="headerlink" title="6.bootstrap.yml"></a>6.bootstrap.yml</h2><p>application.yml是用户级的资源配置项<br>bootstrap.yml是系统级的，<strong>优先级更加高</strong></p><p>Spring Cloud会创建一个 ‘Bootstrap Context’，作为Spring应用的’Application Context’的<strong>父上下文</strong>，初始化的时候，’Bootstrap Context’负责从外部源加载配置属性并解析配置。这两个上下文共享一个从外部获取的’Environment’。’Bootstrap’属性有高优先级。默认情况下，它们不会被本地配置负载。’Bootstrap Context’和’Application Context’有着不同的约定，所以新增了一个’bootstrap.yml’文件，保证’Bootstrap Context’和’Application Context’配置的分离。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    config:</span><br><span class="line">      name: microservicecloud-config-client #需要从github上读取的资源名称，注意没有yml后缀名</span><br><span class="line">      profile: test   #本次访问的配置项</span><br><span class="line">      label: master   </span><br><span class="line">      uri: http://config-3344.com:3344  #本微服务启动后先去找3344号服务，通过SpringCloudConfig获取GitHub的服务地址</span><br></pre></td></tr></table></figure></p><h2 id="7-application-yml"><a href="#7-application-yml" class="headerlink" title="7.application.yml"></a>7.application.yml</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: microservicecloud-config-client</span><br></pre></td></tr></table></figure><h2 id="8-修改host文件，增加映射"><a href="#8-修改host文件，增加映射" class="headerlink" title="8.修改host文件，增加映射"></a>8.修改host文件，增加映射</h2><p>127.0.0.1 client-config.com</p><h2 id="9-新建rest类，验证是否能从GitHub上读取配置"><a href="#9-新建rest类，验证是否能从GitHub上读取配置" class="headerlink" title="9.新建rest类，验证是否能从GitHub上读取配置"></a>9.新建rest类，验证是否能从GitHub上读取配置</h2><p>ConfigClientRest.java<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">package com.atguigu.springcloud.rest;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">public class ConfigClientRest</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">@Value(&quot;$&#123;spring.application.name&#125;&quot;)</span><br><span class="line">private String applicationName;</span><br><span class="line"></span><br><span class="line">@Value(&quot;$&#123;eureka.client.service-url.defaultZone&#125;&quot;)</span><br><span class="line">private String eurekaServers;</span><br><span class="line"></span><br><span class="line">@Value(&quot;$&#123;server.port&#125;&quot;)</span><br><span class="line">private String port;</span><br><span class="line"></span><br><span class="line">@RequestMapping(&quot;/config&quot;)</span><br><span class="line">public String getConfig()</span><br><span class="line">&#123;</span><br><span class="line">String str = &quot;applicationName: &quot; + applicationName + &quot;\t eurekaServers:&quot; + eurekaServers + &quot;\t port: &quot; + port;</span><br><span class="line">System.out.println(&quot;******str: &quot; + str);</span><br><span class="line">return &quot;applicationName: &quot; + applicationName + &quot;\t eurekaServers:&quot; + eurekaServers + &quot;\t port: &quot; + port;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="10-主启动类ConfigClient-3355-StartSpringCloudApp"><a href="#10-主启动类ConfigClient-3355-StartSpringCloudApp" class="headerlink" title="10.主启动类ConfigClient_3355_StartSpringCloudApp"></a>10.主启动类ConfigClient_3355_StartSpringCloudApp</h2><h2 id="11-测试"><a href="#11-测试" class="headerlink" title="11.测试"></a>11.测试</h2><p>dev: <a href="http://client-config.com:8201/config">http://client-config.com:8201/config</a><br>test: <a href="http://client-config.com:8202/config">http://client-config.com:8202/config</a><br>成功实现了客户端3355访问SpringCloud_Config3344通过GitHub获取配置信息</p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud07：zuul路由网关</title>
      <link href="/2019/01/08/SpringCloud/SpringCloud07%EF%BC%9Azuul%E8%B7%AF%E7%94%B1%E7%BD%91%E5%85%B3/"/>
      <url>/2019/01/08/SpringCloud/SpringCloud07%EF%BC%9Azuul%E8%B7%AF%E7%94%B1%E7%BD%91%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本系列对应的是尚硅谷周阳Spring Cloud的思维导图整理的笔记，用来方便自己后面的知识点回顾。分别以每个知识点作为一篇文章详细讲述。</p></blockquote><p>知识点传送门：<br><a href="https://github.com/HuiYouHua/SpringCloud">项目源码</a></p><ul><li><a href="https://www.jianshu.com/p/c4c8c19d9f23">SpringCloud01：微服务概述与SpringCloud</a></li><li><a href="https://www.jianshu.com/p/9bc7aa82a07d">SpringCloud02：Rest微服务构建案例工程模块</a></li><li><a href="https://www.jianshu.com/p/afaef0642065">SpringCloud03：Eureka服务注册与发现</a></li><li><a href="https://www.jianshu.com/p/952b4895b6ae">SpringCloud04：Ribbon负载均衡</a></li><li><a href="https://www.jianshu.com/p/b2ec4c74ff75">SpringCloud05：Feign负载均衡</a></li><li><a href="https://www.jianshu.com/p/1b4da963374d">SpringCloud06：Hystrix断路器</a></li><li><a href="https://www.jianshu.com/p/91364d0e535d">SpringCloud07：zuul路由网关</a></li><li><a href="https://www.jianshu.com/p/31f79b4cd84d">SpringCloud08：SpringCloud Config分布式配置中心</a></li></ul><h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><h2 id="1-是什么"><a href="#1-是什么" class="headerlink" title="1.是什么"></a>1.是什么</h2><p>Zuul包含了对请求的路由和过滤两个最主要的功能：<br>其中路由功能负责将外部请求转发到具体的微服务实例上，是实现外部访问统一入口的基础而过滤器功能则负责对请求的处理过程进行干预，是实现请求校验、服务聚合等功能的基础.</p><p>Zuul和Eureka进行整合，将Zuul自身注册为Eureka服务治理下的应用，同时从Eureka中获得其他微服务的消息，也即以后的访问微服务都是通过Zuul跳转后获得。</p><p>注意：Zuul服务最终还是会注册进Eureka</p><p><strong>提供=代理+路由+过滤三大功能</strong></p><p><a href="https://github.com/Netflix/zuul/wiki/Getting-Started">官网资料</a></p><h1 id="二、路由基本配置"><a href="#二、路由基本配置" class="headerlink" title="二、路由基本配置"></a>二、路由基本配置</h1><h2 id="1-新建Module模块microservicecloud-zuul-gateway-9527"><a href="#1-新建Module模块microservicecloud-zuul-gateway-9527" class="headerlink" title="1. 新建Module模块microservicecloud-zuul-gateway-9527"></a>1. 新建Module模块microservicecloud-zuul-gateway-9527</h2><h2 id="2-修改POM文件"><a href="#2-修改POM文件" class="headerlink" title="2.修改POM文件"></a>2.修改POM文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">  xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;parent&gt;</span><br><span class="line">   &lt;groupId&gt;com.atguigu.springcloud&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;microservicecloud&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">  &lt;/parent&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;artifactId&gt;microservicecloud-zuul-gateway-9527&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;dependencies&gt;</span><br><span class="line">   &lt;!-- zuul路由网关 --&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-cloud-starter-zuul&lt;/artifactId&gt;</span><br><span class="line">   &lt;/dependency&gt; </span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">   &lt;!-- actuator监控 --&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">   &lt;!--  hystrix容错--&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-cloud-starter-hystrix&lt;/artifactId&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">   &lt;!-- 日常标配 --&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;com.atguigu.springcloud&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;microservicecloud-api&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;$&#123;project.version&#125;&lt;/version&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-boot-starter-jetty&lt;/artifactId&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">   &lt;!-- 热部署插件 --&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;springloaded&lt;/artifactId&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">  &lt;/dependencies&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h2 id="3-修改YML"><a href="#3-修改YML" class="headerlink" title="3.修改YML"></a>3.修改YML</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">server: </span><br><span class="line">  port: 9527</span><br><span class="line"> </span><br><span class="line">spring: </span><br><span class="line">  application:</span><br><span class="line">    name: microservicecloud-zuul-gateway</span><br><span class="line"> </span><br><span class="line">eureka: </span><br><span class="line">  client: </span><br><span class="line">    service-url: </span><br><span class="line">      defaultZone: http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka,http://eureka7003.com:7003/eureka  </span><br><span class="line">  instance:</span><br><span class="line">    instance-id: gateway-9527.com</span><br><span class="line">    prefer-ip-address: true </span><br><span class="line"></span><br><span class="line">info:</span><br><span class="line">  app.name: atguigu-microcloud</span><br><span class="line">  company.name: www.atguigu.com</span><br><span class="line">  build.artifactId: $project.artifactId$</span><br><span class="line">  build.version: $project.version$</span><br></pre></td></tr></table></figure><h2 id="4-hosts修改"><a href="#4-hosts修改" class="headerlink" title="4.hosts修改"></a>4.hosts修改</h2><p>127.0.0.1  myzuul.com</p><h2 id="5-主启动类"><a href="#5-主启动类" class="headerlink" title="5.主启动类"></a>5.主启动类</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package com.atguigu.springcloud;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.netflix.zuul.EnableZuulProxy;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableZuulProxy</span><br><span class="line">public class Zuul_9527_StartSpringCloudApp</span><br><span class="line">&#123;</span><br><span class="line">  public static void main(String[] args)</span><br><span class="line">  &#123;</span><br><span class="line">   SpringApplication.run(Zuul_9527_StartSpringCloudApp.class, args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-启动"><a href="#6-启动" class="headerlink" title="6.启动"></a>6.启动</h2><ol><li>三个eureka集群</li><li>一个服务提供类microservicecloud-provider-dept-8001</li><li>一个路由</li></ol><h2 id="7-测试"><a href="#7-测试" class="headerlink" title="7. 测试"></a>7. 测试</h2><p>不用路由: <a href="http://localhost:8001/dept/get/2">http://localhost:8001/dept/get/2</a><br>启用路由: <a href="http://myzuul.com:9527/microservicecloud-dept/dept/get/2">http://myzuul.com:9527/microservicecloud-dept/dept/get/2</a></p><h1 id="三、路由访问映射规则"><a href="#三、路由访问映射规则" class="headerlink" title="三、路由访问映射规则"></a>三、路由访问映射规则</h1><h2 id="1-工程microservicecloud-zuul-gateway-9527"><a href="#1-工程microservicecloud-zuul-gateway-9527" class="headerlink" title="1.工程microservicecloud-zuul-gateway-9527"></a>1.工程microservicecloud-zuul-gateway-9527</h2><h2 id="2-代理名称"><a href="#2-代理名称" class="headerlink" title="2.代理名称"></a>2.代理名称</h2><p>问题：<br>路由访问OK：<a href="http://myzuul.com:9527/mydept/dept/get/1">http://myzuul.com:9527/mydept/dept/get/1</a><br>原路径访问OK：<a href="http://myzuul.com:9527/microservicecloud-dept/dept/get/2">http://myzuul.com:9527/microservicecloud-dept/dept/get/2</a></p><h2 id="3-原真实服务名忽略"><a href="#3-原真实服务名忽略" class="headerlink" title="3.原真实服务名忽略"></a>3.原真实服务名忽略</h2><p>修改YML文件</p><p>单个服务<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">zuul: </span><br><span class="line">  ignored-services: microservicecloud-dept </span><br><span class="line">  routes: </span><br><span class="line">    mydept.serviceId: microservicecloud-dept</span><br><span class="line">    mydept.path: /mydept/**</span><br></pre></td></tr></table></figure></p><p>多个服务<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">zuul: </span><br><span class="line">  ignored-services: &quot;*&quot;</span><br><span class="line">  routes: </span><br><span class="line">    mydept.serviceId: microservicecloud-dept</span><br><span class="line">    mydept.path: /mydept/**</span><br></pre></td></tr></table></figure></p><h2 id="4-设置统一公共前缀"><a href="#4-设置统一公共前缀" class="headerlink" title="4.设置统一公共前缀"></a>4.设置统一公共前缀</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">zuul: </span><br><span class="line">  prefix: /atguigu</span><br><span class="line">  ignored-services: &quot;*&quot;</span><br><span class="line">  routes: </span><br><span class="line">    mydept.serviceId: microservicecloud-dept</span><br><span class="line">    mydept.path: /mydept/**</span><br></pre></td></tr></table></figure><p>访问地址 <a href="http://myzuul.com:9527/atguigu/mydept/dept/get/1">http://myzuul.com:9527/atguigu/mydept/dept/get/1</a></p><h2 id="5-最后YML"><a href="#5-最后YML" class="headerlink" title="5.最后YML"></a>5.最后YML</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">server: </span><br><span class="line">  port: 9527</span><br><span class="line"> </span><br><span class="line">spring: </span><br><span class="line">  application:</span><br><span class="line">    name: microservicecloud-zuul-gateway</span><br><span class="line"> </span><br><span class="line">zuul: </span><br><span class="line">  prefix: /atguigu</span><br><span class="line">  ignored-services: &quot;*&quot;</span><br><span class="line">  routes: </span><br><span class="line">    mydept.serviceId: microservicecloud-dept</span><br><span class="line">    mydept.path: /mydept/**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">eureka: </span><br><span class="line">  client: </span><br><span class="line">    service-url: </span><br><span class="line">      defaultZone: http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka,http://eureka7003.com:7003/eureka  </span><br><span class="line">  instance:</span><br><span class="line">    instance-id: gateway-9527.com</span><br><span class="line">    prefer-ip-address: true </span><br><span class="line"> </span><br><span class="line">info:</span><br><span class="line">  app.name: atguigu-microcloud</span><br><span class="line">  company.name: www.atguigu.com</span><br><span class="line">  build.artifactId: $project.artifactId$</span><br><span class="line">  build.version: $project.version$</span><br><span class="line"> </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud06：Hystrix断路器</title>
      <link href="/2019/01/08/SpringCloud/SpringCloud06%EF%BC%9AHystrix%E6%96%AD%E8%B7%AF%E5%99%A8/"/>
      <url>/2019/01/08/SpringCloud/SpringCloud06%EF%BC%9AHystrix%E6%96%AD%E8%B7%AF%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本系列对应的是尚硅谷周阳Spring Cloud的思维导图整理的笔记，用来方便自己后面的知识点回顾。分别以每个知识点作为一篇文章详细讲述。</p></blockquote><p>知识点传送门：<br><a href="https://github.com/HuiYouHua/SpringCloud">项目源码</a></p><ul><li><a href="https://www.jianshu.com/p/c4c8c19d9f23">SpringCloud01：微服务概述与SpringCloud</a></li><li><a href="https://www.jianshu.com/p/9bc7aa82a07d">SpringCloud02：Rest微服务构建案例工程模块</a></li><li><a href="https://www.jianshu.com/p/afaef0642065">SpringCloud03：Eureka服务注册与发现</a></li><li><a href="https://www.jianshu.com/p/952b4895b6ae">SpringCloud04：Ribbon负载均衡</a></li><li><a href="https://www.jianshu.com/p/b2ec4c74ff75">SpringCloud05：Feign负载均衡</a></li><li><a href="https://www.jianshu.com/p/1b4da963374d">SpringCloud06：Hystrix断路器</a></li><li><a href="https://www.jianshu.com/p/91364d0e535d">SpringCloud07：zuul路由网关</a></li><li><a href="https://www.jianshu.com/p/31f79b4cd84d">SpringCloud08：SpringCloud Config分布式配置中心</a></li></ul><h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><h2 id="1-分布式系统面临的问题"><a href="#1-分布式系统面临的问题" class="headerlink" title="1.分布式系统面临的问题"></a>1.分布式系统面临的问题</h2><p>分布式系统面临的问题<br><strong>复杂分布式体系结构中的应用程序有数十个依赖关系，每个依赖关系在某些时候将不可避免地失败。</strong></p><p>服务雪崩<br>多个微服务之间调用的时候，假设微服务A调用微服务B和微服务C，微服务B和微服务C又调用其它的微服务，这就是所谓的“<strong>扇出</strong>”。如果扇出的链路上某个微服务的调用响应时间过长或者不可用，对微服务A的调用就会占用越来越多的系统资源，进而引起系统崩溃，所谓的“雪崩效应”.</p><p>对于高流量的应用来说，单一的后端依赖可能会导致所有服务器上的所有资源都在几秒钟内饱和。比失败更糟糕的是，这些应用程序还可能导致服务之间的延迟增加，备份队列，线程和其他系统资源紧张，导致整个系统发生更多的级联故障。这些都表示需要对故障和延迟进行隔离和管理，以便单个依赖关系的失败，不能取消整个应用程序或系统。</p><h2 id="2-Hystirx是什么"><a href="#2-Hystirx是什么" class="headerlink" title="2.Hystirx是什么"></a>2.Hystirx是什么</h2><p>Hystrix是一个用于处理分布式系统的<strong>延迟</strong>和<strong>容错</strong>的开源库，在分布式系统里，许多依赖不可避免的会调用失败，比如超时、异常等，Hystrix能够保证在一个依赖出问题的情况下，<strong>不会导致整体服务失败，避免级联故障，以提高分布式系统的弹性</strong>。</p><p>“断路器”本身是一种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控（类似熔断保险丝），<strong>向调用方返回一个符合预期的、可处理的备选响应（FallBack），而不是长时间的等待或者抛出调用方无法处理的异常</strong>，这样就保证了服务调用方的线程不会被长时间、不必要地占用，从而避免了故障在分布式系统中的蔓延，乃至雪崩。</p><h2 id="3-Hystrix能干嘛"><a href="#3-Hystrix能干嘛" class="headerlink" title="3.Hystrix能干嘛"></a>3.Hystrix能干嘛</h2><ul><li>服务降级</li><li>服务熔断</li><li>服务限流</li><li><p>接近实时的监控。。。</p><p><a href="https://github.com/Netflix/Hystrix/wiki/How-To-Use">官网介绍</a></p></li></ul><h1 id="二、服务熔断"><a href="#二、服务熔断" class="headerlink" title="二、服务熔断"></a>二、服务熔断</h1><h2 id="1-是什么"><a href="#1-是什么" class="headerlink" title="1.是什么"></a>1.是什么</h2><p>熔断机制是应对雪崩效应的一种微服务链路保护机制。<br>当扇出链路的某个微服务不可用或者响应时间太长时，会进行服务的降级，<strong>进而熔断该节点微服务的调用，快速返回”错误”的响应信息</strong>。当检测到该节点微服务调用响应正常后恢复调用链路。在SpringCloud框架里熔断机制通过Hystrix实现。Hystrix会监控微服务间调用的状况，当失败的调用到一定阈值，缺省是5秒内20次调用失败就会启动熔断机制。熔断机制的注解是@HystrixCommand。</p><h2 id="2-参考microservicecloud-provider-dept-8001，新建microservicecloud-provider-dept-hystrix-8001"><a href="#2-参考microservicecloud-provider-dept-8001，新建microservicecloud-provider-dept-hystrix-8001" class="headerlink" title="2.参考microservicecloud-provider-dept-8001，新建microservicecloud-provider-dept-hystrix-8001"></a>2.参考microservicecloud-provider-dept-8001，新建microservicecloud-provider-dept-hystrix-8001</h2><h2 id="3-修改POM文件"><a href="#3-修改POM文件" class="headerlink" title="3.修改POM文件"></a>3.修改POM文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--  hystrix --&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-cloud-starter-hystrix&lt;/artifactId&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="4-YML文件"><a href="#4-YML文件" class="headerlink" title="4.YML文件"></a>4.YML文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8001</span><br><span class="line">  </span><br><span class="line">mybatis:</span><br><span class="line">  config-location: classpath:mybatis/mybatis.cfg.xml  #mybatis所在路径</span><br><span class="line">  type-aliases-package: com.atguigu.springcloud.entities #entity别名类</span><br><span class="line">  mapper-locations:</span><br><span class="line">  - classpath:mybatis/mapper/**/*.xml #mapper映射文件</span><br><span class="line">    </span><br><span class="line">spring:</span><br><span class="line">   application:</span><br><span class="line">    name: microservicecloud-dept </span><br><span class="line">   datasource:</span><br><span class="line">    type: com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">    driver-class-name: org.gjt.mm.mysql.Driver</span><br><span class="line">    url: jdbc:mysql://localhost:3306/cloudDB01</span><br><span class="line">    username: root</span><br><span class="line">    password: 123456</span><br><span class="line">    dbcp2:</span><br><span class="line">      min-idle: 5</span><br><span class="line">      initial-size: 5</span><br><span class="line">      max-total: 5</span><br><span class="line">      max-wait-millis: 200</span><br><span class="line">      </span><br><span class="line">eureka:</span><br><span class="line">  client: #客户端注册进eureka服务列表内</span><br><span class="line">    service-url: </span><br><span class="line">      defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span><br><span class="line">  instance:</span><br><span class="line">    instance-id: microservicecloud-dept8001-hystrix   #自定义服务名称信息</span><br><span class="line">    prefer-ip-address: true     #访问路径可以显示IP地址</span><br><span class="line">      </span><br><span class="line">info:</span><br><span class="line">  app.name: atguigu-microservicecloud</span><br><span class="line">  company.name: www.atguigu.com</span><br><span class="line">  build.artifactId: $project.artifactId$</span><br><span class="line">  build.version: $project.version$</span><br></pre></td></tr></table></figure><h2 id="5-修改DeptController"><a href="#5-修改DeptController" class="headerlink" title="5.修改DeptController"></a>5.修改DeptController</h2><p><strong>@HystrixCommand报异常后如何处理</strong><br>一旦调用服务方法失败并抛出了错误信息后，会自动调用@HystrixCommand标注好的fallbackMethod调用类中的指定方法<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">package com.atguigu.springcloud.controller;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import com.atguigu.springcloud.entities.Dept;</span><br><span class="line">import com.atguigu.springcloud.service.DeptService;</span><br><span class="line">import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">public class DeptController</span><br><span class="line">&#123;</span><br><span class="line">  @Autowired</span><br><span class="line">  private DeptService service = null;</span><br><span class="line">  </span><br><span class="line">  @RequestMapping(value=&quot;/dept/get/&#123;id&#125;&quot;,method=RequestMethod.GET)</span><br><span class="line">    @HystrixCommand(fallbackMethod = &quot;processHystrix_Get&quot;)</span><br><span class="line">  public Dept get(@PathVariable(&quot;id&quot;) Long id)</span><br><span class="line">  &#123;</span><br><span class="line">   Dept dept =  this.service.get(id);</span><br><span class="line">   if(null == dept)</span><br><span class="line">   &#123;</span><br><span class="line">     throw new RuntimeException(&quot;该ID：&quot;+id+&quot;没有没有对应的信息&quot;);</span><br><span class="line">   &#125;</span><br><span class="line">   return dept;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  public Dept processHystrix_Get(@PathVariable(&quot;id&quot;) Long id)</span><br><span class="line">  &#123;</span><br><span class="line">   return new Dept().setDeptno(id)</span><br><span class="line">           .setDname(&quot;该ID：&quot;+id+&quot;没有没有对应的信息,null--@HystrixCommand&quot;)</span><br><span class="line">           .setDb_source(&quot;no this database in MySQL&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="6-修改主启动类DeptProvider8001-Hystrix-App并添加新注解-EnableCircuitBreaker"><a href="#6-修改主启动类DeptProvider8001-Hystrix-App并添加新注解-EnableCircuitBreaker" class="headerlink" title="6.修改主启动类DeptProvider8001_Hystrix_App并添加新注解@EnableCircuitBreaker"></a>6.修改主启动类DeptProvider8001_Hystrix_App并添加新注解@EnableCircuitBreaker</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package com.atguigu.springcloud;</span><br><span class="line"> </span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker;</span><br><span class="line">import org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line">import org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"> </span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableEurekaClient //本服务启动后会自动注册进eureka服务中</span><br><span class="line">@EnableCircuitBreaker//对hystrixR熔断机制的支持</span><br><span class="line">public class DeptProvider8001_Hystrix_App</span><br><span class="line">&#123;</span><br><span class="line">  public static void main(String[] args)</span><br><span class="line">  &#123;</span><br><span class="line">   SpringApplication.run(DeptProvider8001_Hystrix_App.class, args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-测试"><a href="#7-测试" class="headerlink" title="7.测试"></a>7.测试</h2><ol><li>3个eureka先启动</li><li>主启动类DeptProvider8001_Hystrix_App</li><li>Consumer启动microservicecloud-consumer-dept-80</li><li><a href="http://localhost/consumer/dept/get/112">http://localhost/consumer/dept/get/112</a><br>如果对应的ID：112，数据库里面没有这个记录，我们报错后统一返回。</li></ol><h1 id="三、服务降级"><a href="#三、服务降级" class="headerlink" title="三、服务降级"></a>三、服务降级</h1><h2 id="1-是什么-1"><a href="#1-是什么-1" class="headerlink" title="1.是什么"></a>1.是什么</h2><p>整体资源快不够了，忍痛将某些服务先关掉，待渡过难关，再开启回来。</p><p><strong>服务降级处理是在客户端实现完成的，与服务端没有关系</strong></p><h2 id="2-修改microservicecloud-api工程，"><a href="#2-修改microservicecloud-api工程，" class="headerlink" title="2.修改microservicecloud-api工程，"></a>2.修改microservicecloud-api工程，</h2><p>根据已经有的DeptClientService接口新建一个实现了<br>FallbackFactory接口的类DeptClientServiceFallbackFactory<br>千万不要忘记在类上面新增@Component注解，大坑！！！<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">package com.atguigu.springcloud.service;</span><br><span class="line"> </span><br><span class="line">import java.util.List;</span><br><span class="line"> </span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"> </span><br><span class="line">import com.atguigu.springcloud.entities.Dept;</span><br><span class="line"> </span><br><span class="line">import feign.hystrix.FallbackFactory;</span><br><span class="line"> </span><br><span class="line">@Component//不要忘记添加，不要忘记添加</span><br><span class="line">public class DeptClientServiceFallbackFactory implements FallbackFactory&lt;DeptClientService&gt;</span><br><span class="line">&#123;</span><br><span class="line">  @Override</span><br><span class="line">  public DeptClientService create(Throwable throwable)</span><br><span class="line">  &#123;</span><br><span class="line">   return new DeptClientService() &#123;</span><br><span class="line">     @Override</span><br><span class="line">     public Dept get(long id)</span><br><span class="line">     &#123;</span><br><span class="line">       return new Dept().setDeptno(id)</span><br><span class="line">               .setDname(&quot;该ID：&quot;+id+&quot;没有没有对应的信息,Consumer客户端提供的降级信息,此刻服务Provider已经关闭&quot;)</span><br><span class="line">               .setDb_source(&quot;no this database in MySQL&quot;);</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     @Override</span><br><span class="line">     public List&lt;Dept&gt; list()</span><br><span class="line">     &#123;</span><br><span class="line">       return null;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     @Override</span><br><span class="line">     public boolean add(Dept dept)</span><br><span class="line">     &#123;</span><br><span class="line">       return false;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="3-修改microservicecloud-api工程，DeptClientService接口在注解-FeignClient中添加fallbackFactory属性值"><a href="#3-修改microservicecloud-api工程，DeptClientService接口在注解-FeignClient中添加fallbackFactory属性值" class="headerlink" title="3.修改microservicecloud-api工程，DeptClientService接口在注解@FeignClient中添加fallbackFactory属性值"></a>3.修改microservicecloud-api工程，DeptClientService接口在注解@FeignClient中添加fallbackFactory属性值</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">package com.atguigu.springcloud.service;</span><br><span class="line"> </span><br><span class="line">import java.util.List;</span><br><span class="line"> </span><br><span class="line">import org.springframework.cloud.netflix.feign.FeignClient;</span><br><span class="line">import org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"> </span><br><span class="line">import com.atguigu.springcloud.entities.Dept;</span><br><span class="line"> </span><br><span class="line">@FeignClient(value = &quot;MICROSERVICECLOUD-DEPT&quot;,fallbackFactory=DeptClientServiceFallbackFactory.class)</span><br><span class="line">public interface DeptClientService</span><br><span class="line">&#123;</span><br><span class="line">  @RequestMapping(value = &quot;/dept/get/&#123;id&#125;&quot;,method = RequestMethod.GET)</span><br><span class="line">  public Dept get(@PathVariable(&quot;id&quot;) long id);</span><br><span class="line"> </span><br><span class="line">  @RequestMapping(value = &quot;/dept/list&quot;,method = RequestMethod.GET)</span><br><span class="line">  public List&lt;Dept&gt; list();</span><br><span class="line"> </span><br><span class="line">  @RequestMapping(value = &quot;/dept/add&quot;,method = RequestMethod.POST)</span><br><span class="line">  public boolean add(Dept dept);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-microservicecloud-api工程"><a href="#4-microservicecloud-api工程" class="headerlink" title="4.microservicecloud-api工程"></a>4.microservicecloud-api工程</h2><p>mvn clean install</p><h2 id="5-microservicecloud-consumer-dept-feign工程修改YML"><a href="#5-microservicecloud-consumer-dept-feign工程修改YML" class="headerlink" title="5.microservicecloud-consumer-dept-feign工程修改YML"></a>5.microservicecloud-consumer-dept-feign工程修改YML</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 80</span><br><span class="line"> </span><br><span class="line">feign: </span><br><span class="line">  hystrix: </span><br><span class="line">    enabled: true</span><br><span class="line"> </span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    register-with-eureka: false</span><br><span class="line">    service-url: </span><br><span class="line">      defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/  </span><br></pre></td></tr></table></figure><h2 id="6-测试"><a href="#6-测试" class="headerlink" title="6.测试"></a>6.测试</h2><ol><li>3个eureka先启动</li><li>微服务microservicecloud-provider-dept-8001启动</li><li>microservicecloud-consumer-dept-feign启动</li><li>正常访问测试 <a href="http://localhost/consumer/dept/get/1">http://localhost/consumer/dept/get/1</a></li><li>故意关闭微服务microservicecloud-provider-dept-8001</li><li>客户端自己调用提示 <a href="http://localhost/consumer/dept/get/1">http://localhost/consumer/dept/get/1</a><br>此时服务端provider已经down了，但是我们做了服务降级处理，让客户端在服务端不可用时也会获得提示信息而不会挂起耗死服务器</li></ol><h1 id="四、服务监控hystrixDashboard"><a href="#四、服务监控hystrixDashboard" class="headerlink" title="四、服务监控hystrixDashboard"></a>四、服务监控hystrixDashboard</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h2><p>除了隔离依赖服务的调用以外，Hystrix还提供了<strong>准实时的调用监控（Hystrix Dashboard）</strong>，Hystrix会持续地记录所有通过Hystrix发起的请求的执行信息，并以<strong>统计报表和图形的形式展示给用户</strong>，包括每秒执行多少请求多少成功，多少失败等。Netflix通过hystrix-metrics-event-stream项目实现了对以上指标的监控。Spring Cloud也提供了Hystrix Dashboard的整合，对监控内容转化成可视化界面。</p><h2 id="2-新建工程microservicecloud-consumer-hystrix-dashboard"><a href="#2-新建工程microservicecloud-consumer-hystrix-dashboard" class="headerlink" title="2.新建工程microservicecloud-consumer-hystrix-dashboard"></a>2.新建工程microservicecloud-consumer-hystrix-dashboard</h2><h2 id="3-修改POM文件-1"><a href="#3-修改POM文件-1" class="headerlink" title="3.修改POM文件"></a>3.修改POM文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- hystrix和 hystrix-dashboard相关--&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;spring-cloud-starter-hystrix&lt;/artifactId&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;spring-cloud-starter-hystrix-dashboard&lt;/artifactId&gt;</span><br><span class="line">   &lt;/dependency&gt; </span><br></pre></td></tr></table></figure><h2 id="4-修改YML文件"><a href="#4-修改YML文件" class="headerlink" title="4.修改YML文件"></a>4.修改YML文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 9001</span><br></pre></td></tr></table></figure><h2 id="5-主启动类改名-新注解-EnableHystrixDashboard"><a href="#5-主启动类改名-新注解-EnableHystrixDashboard" class="headerlink" title="5.主启动类改名+新注解@EnableHystrixDashboard"></a>5.主启动类改名+新注解@EnableHystrixDashboard</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package com.atguigu.springcloud;</span><br><span class="line"> </span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.netflix.hystrix.dashboard.EnableHystrixDashboard;</span><br><span class="line"> </span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableHystrixDashboard</span><br><span class="line">public class DeptConsumer_DashBoard_App</span><br><span class="line">&#123;</span><br><span class="line">  public static void main(String[] args)</span><br><span class="line">  &#123;</span><br><span class="line">   SpringApplication.run(DeptConsumer_DashBoard_App.class,args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-所有Provider微服务提供类-8001-8002-8003-都需要监控依赖配置"><a href="#6-所有Provider微服务提供类-8001-8002-8003-都需要监控依赖配置" class="headerlink" title="6.所有Provider微服务提供类(8001/8002/8003)都需要监控依赖配置"></a>6.所有Provider微服务提供类(8001/8002/8003)都需要监控依赖配置</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- actuator监控信息完善 --&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="7-启动microservicecloud-consumer-hystrix-dashboard该微服务监控消费端"><a href="#7-启动microservicecloud-consumer-hystrix-dashboard该微服务监控消费端" class="headerlink" title="7.启动microservicecloud-consumer-hystrix-dashboard该微服务监控消费端"></a>7.启动microservicecloud-consumer-hystrix-dashboard该微服务监控消费端</h2><p><a href="http://localhost:9001/hystrix">http://localhost:9001/hystrix</a></p><h2 id="8-启动3个eureka集群"><a href="#8-启动3个eureka集群" class="headerlink" title="8.启动3个eureka集群"></a>8.启动3个eureka集群</h2><h2 id="9-启动microservicecloud-provider-dept-hystrix-8001"><a href="#9-启动microservicecloud-provider-dept-hystrix-8001" class="headerlink" title="9.启动microservicecloud-provider-dept-hystrix-8001"></a>9.启动microservicecloud-provider-dept-hystrix-8001</h2><p><a href="http://localhost:8001/dept/get/1">http://localhost:8001/dept/get/1</a><br><a href="http://localhost:8001/hystrix.stream">http://localhost:8001/hystrix.stream</a></p><h2 id="10-启动的相关微服务工程"><a href="#10-启动的相关微服务工程" class="headerlink" title="10.启动的相关微服务工程"></a>10.启动的相关微服务工程</h2><h2 id="11-监控测试"><a href="#11-监控测试" class="headerlink" title="11.监控测试"></a>11.监控测试</h2><p>1）多次刷新<a href="http://localhost:8001/dept/get/1">http://localhost:8001/dept/get/1</a><br>2）观察监控窗口</p><ol><li>填写监控地址<ul><li>Delay：该参数用来控制服务器上轮询监控信息的延迟时间，默认为2000毫秒，可以通过配置该属性来降低客户端的网络和CPU消耗。</li><li>Title：该参数对应了头部标题Hystrix Stream之后的内容，默认会使用具体监控实例的URL，可以通过配置该信息来展示更合适的标题。 </li></ul></li><li>查看监控结果<br>7色 1圈 1线</li></ol><ul><li>实心圆：共有两种含义。它通过颜色的变化代表了实例的健康程度，它的健康度从绿色&lt;黄色&lt;橙色&lt;红色递减。<br>该实心圆除了颜色的变化之外，它的大小也会根据实例的请求流量发生变化，流量越大该实心圆就越大。所以通过该实心圆的展示，就可以在大量的实例中快速的发现故障实例和高压力实例。</li><li>曲线：用来记录2分钟内流量的相对变化，可以通过它来观察到流量的上升和下降趋势。</li></ul>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS App启动优化</title>
      <link href="/2019/01/07/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/iOS%20App%E5%90%AF%E5%8A%A8%E4%BC%98%E5%8C%96/"/>
      <url>/2019/01/07/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/iOS%20App%E5%90%AF%E5%8A%A8%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="1-App启动过程"><a href="#1-App启动过程" class="headerlink" title="1.App启动过程"></a>1.App启动过程</h2><ul><li>解析Info.plist<ul><li>加载相关信息，例如如闪屏</li><li>沙箱建立、权限检查</li></ul></li><li>Mach-O加载<ul><li>如果是胖二进制文件，寻找合适当前CPU类别的部分</li><li>加载所有依赖的Mach-O文件（递归调用Mach-O加载的方法）</li><li>定位内部、外部指针引用，例如字符串、函数等</li><li>执行声明为<strong>attribute</strong>((constructor))的C函数</li><li>加载类扩展（Category）中的方法</li><li>C++静态对象加载、调用ObjC的 +load 函数</li></ul></li><li>程序执行<ul><li>调用main()</li><li>调用UIApplicationMain()</li><li>调用applicationWillFinishLaunching</li></ul></li></ul><blockquote><p><strong>扩展</strong></p><ol><li><strong>Mach-O文件是什么：</strong></li></ol><ul><li>Mach-O 是 Mach object 文件格式的缩写,它是一种用于记录可执行文件、对象代码、共享库、动态加载代码和内存转储的文件格式。作为 a.out 格式的替代品,Mach-O 提供了更好的扩展性,并提升了符号表中信息的访问速度。</li></ul><ol><li><strong>常见的Mach-O文件类型</strong></li></ol><ul><li>MH_OBJECT<br>   目标文件（.o）<br>   静态库文件(.a），静态库其实就是N个.o合并在一起<ul><li>MH_EXECUTE：可执行文件<br>.app/xx</li><li>MH_DYLIB：动态库文件<br>.dylib<br>.framework/xx</li></ul></li><li>MH_DYLINKER：动态链接编辑器<br>  /usr/lib/dyld<ul><li>MH_DSYM：存储着二进制文件符号信息的文件<br>.dSYM/Contents/Resources/DWARF/xx（常用于分析APP的崩溃信息）</li></ul></li></ul><ol><li><strong>目标文件类型</strong></li></ol><ul><li>Mach-O 文件<br>  Mach-O 文件包含一种架构(i386、x86_64、arm64 等等)的对象代码</li></ul><ul><li>通用二进制文件<br>   也叫作胖文件，胖文件可能包含若干包含不同架构(i386、x86_64、arm、arm64 等等)对象代码的对象文件</li></ul></blockquote><p>毫无疑问移动应用的启动时间是影响用户体验的一个重要方面，那么我们究竟该如何通过启动时间来衡量一个应用性能的好坏呢？启动时间可以从冷启动和热启动两个角度去测量：</p><ul><li><p>冷启动：指的是应用尚未运行，必须加载并构建整个应用，完成初始化的工作，冷启动往往比热启动耗时长，而且每个应用的冷启动耗时差别也很大，所以冷启动存在很大的优化空间，冷启动时间从applicationDidFinishLaunching:withOptions:方法开始计算，很多应用会在该方法对其使用的第三方库初始化。</p></li><li><p>热启动：应用已经在后台运行（常见的场景是用户按了 Home 按钮），由于某个事件将应用唤醒到前台，应用会在 applicationWillEnterForeground: 方法接收应用进入前台的事件</p></li></ul><p>APP的启动时间，直接影响用户对你的APP的第一体验和判断。如果启动时间过长，不单单体验直线下降，而且可能会激发苹果的watch dog机制kill掉你的APP，那就悲剧了，用户会觉得APP怎么一启动就卡死然后崩溃了，不能用，然后长按APP点击删除键。（Xcode在debug模式下是没有开启watch dog的，所以我们一定要连接真机测试我们的APP）</p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220520001103172.png" alt="1.png"></p><blockquote><p>t(App 总启动时间) = t1( <code>main()</code>之前的加载时间 ) + t2( <code>main()</code>之后的加载时间 )。</p><ul><li>t1 = 系统的 dylib (动态链接库)和 App 可执行文件的加载时间；</li></ul><ul><li>t2 = <code>main()</code>函数执行之后到<code>AppDelegate</code>类中的<code>applicationDidFinishLaunching:withOptions:</code>方法执行结束前这段时间。</li></ul></blockquote><p>所以我们对APP启动时间的获取和优化都是从这两个阶段着手，下面先看看<code>main()</code>函数执行之前如何获取启动时间。</p><h2 id="2-衡量main-函数执行之前的耗时"><a href="#2-衡量main-函数执行之前的耗时" class="headerlink" title="2.衡量main()函数执行之前的耗时"></a>2.衡量main()函数执行之前的耗时</h2><p>对于衡量main()之前也就是time1的耗时，苹果官方提供了一种方法，即在真机调试的时候，勾选<code>DYLD_PRINT_STATISTICS</code>选项（如果想获取更详细的信息可以使用<code>DYLD_PRINT_STATISTICS_DETAILS</code>），如下图：</p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220520001103218.png" alt="2.png"></p><p>输出结果如下：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Total pre-main time:  34.22 milliseconds (100.0%)</span><br><span class="line">         dylib loading time:  14.43 milliseconds (42.1%)</span><br><span class="line">        rebase/binding time:   1.82 milliseconds (5.3%)</span><br><span class="line">            ObjC setup time:   3.89 milliseconds (11.3%)</span><br><span class="line">           initializer time:  13.99 milliseconds (40.9%)</span><br><span class="line">           slowest intializers :</span><br><span class="line">             libSystem.B.dylib :   2.20 milliseconds (6.4%)</span><br><span class="line">   libBacktraceRecording.dylib :   2.90 milliseconds (8.4%)</span><br><span class="line">    libMainThreadChecker.dylib :   6.55 milliseconds (19.1%)</span><br><span class="line">       libswiftCoreImage.dylib :   0.71 milliseconds (2.0%)</span><br></pre></td></tr></table></figure></p><p>系统级别的动态链接库，因为苹果做了优化，所以耗时并不多，而大多数时候，t1的时间大部分会消耗在我们自身App中的代码上和链接第三方库上。<br>**main()函数之前耗时的影响因素</p><ul><li>动态库加载越多，启动越慢。</li><li>ObjC类越多，启动越慢</li><li>C的constructor函数越多，启动越慢</li><li>C++静态对象越多，启动越慢</li><li>ObjC的+load越多，启动越慢</li></ul><p>所以我们应如何减少main()调用之前的耗时呢，我们可以优化的点有：</p><blockquote><ol><li>减少不必要的framework，特别是第三方的，因为动态链接比较耗时；</li><li>check framework应设为optional和required，如果该framework在当前App支持的所有iOS系统版本都存在，那么就设为required，否则就设为optional，因为optional会有些额外的检查；</li><li>合并或者删减一些OC类，关于清理项目中没用到的类，可以借助AppCode代码检查工具：</li></ol><ul><li>删减一些无用的静态变量</li><li>删减没有被调用到或者已经废弃的方法</li><li>将不必须在+load方法中做的事情延迟到+initialize中</li><li>尽量不要用C++虚函数(创建虚函数表有开销)</li></ul></blockquote><h2 id="3-衡量main-函数执行之后的耗时"><a href="#3-衡量main-函数执行之后的耗时" class="headerlink" title="3.衡量main()函数执行之后的耗时"></a>3.衡量main()函数执行之后的耗时</h2><p>第二阶段的耗时统计，我们认为是从<code>main ()</code>执行之后到<code>applicationDidFinishLaunching:withOptions:</code>方法最后，那么我们可以通过打点的方式进行统计。  Objective-C项目因为有main文件，所以我么直接可以通过添加代码获取：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 1. 在 main.m 添加如下代码:</span><br><span class="line">CFAbsoluteTime AppStartLaunchTime;</span><br><span class="line"></span><br><span class="line">int main(int argc, char * argv[]) &#123;</span><br><span class="line">    AppStartLaunchTime = CFAbsoluteTimeGetCurrent();</span><br><span class="line">  .....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 2. 在 AppDelegate.m 的开头声明</span><br><span class="line">extern CFAbsoluteTime AppStartLaunchTime;</span><br><span class="line"></span><br><span class="line">// 3. 最后在AppDelegate.m 的 didFinishLaunchingWithOptions 中添加</span><br><span class="line">dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">  NSLog(@&quot;App启动时间--%f&quot;,(CFAbsoluteTimeGetCurrent()-AppStartLaunchTime));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>main函数之后的优化：</p><blockquote><ul><li>尽量使用纯代码编写，减少xib的使用；</li></ul><ul><li>启动阶段的网络请求，是否都放到异步请求；</li></ul><ul><li>一些耗时的操作是否可以放到后面去执行，或异步执行等。</li></ul></blockquote><h2 id="4-applicationWillFinishLaunching的耗时"><a href="#4-applicationWillFinishLaunching的耗时" class="headerlink" title="4.applicationWillFinishLaunching的耗时"></a>4.applicationWillFinishLaunching的耗时</h2><p>如果有这样这样的代码：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">//AppDelegate.m</span><br><span class="line">@implementation AppDelegate</span><br><span class="line"></span><br><span class="line">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &#123;</span><br><span class="line">    self.rootViewController = [[[MQQTabBarController alloc] init] autorelease];</span><br><span class="line"></span><br><span class="line">    self.window = [[[UIWindow alloc] init] autorelease];</span><br><span class="line">    [self.window makeKeyAndVisible];</span><br><span class="line">    self.window.rootViewController = self.rootViewController;</span><br><span class="line">    </span><br><span class="line">    UITabBarController *tabBarViewController = [[[UITabBarController alloc] init] autorelease];</span><br><span class="line"></span><br><span class="line">    NSLog(@&quot;%s&quot;, __PRETTY_FUNCTION__);    </span><br><span class="line">    return YES;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"> </span><br><span class="line">//MQQTabBarController.m</span><br><span class="line">@implementation MQQTabBarController</span><br><span class="line"></span><br><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    NSLog(@&quot;%s&quot;, __PRETTY_FUNCTION__);</span><br><span class="line">    [super viewDidLoad];    </span><br><span class="line">    // Do any additional setup after loading the view.</span><br><span class="line"></span><br><span class="line">    UIViewController *tab1 = [[[MQQTab1ViewController alloc] init] autorelease];</span><br><span class="line">    tab1.tabBarItem.title = @&quot;red&quot;;</span><br><span class="line">    [self addChildViewController:tab1];</span><br><span class="line">    </span><br><span class="line">    UIViewController *tab2 = [[[MQQTab2ViewController alloc] init] autorelease];</span><br><span class="line">    tab2.tabBarItem.title = @&quot;blue&quot;;</span><br><span class="line">    [self addChildViewController:tab2];</span><br><span class="line">    </span><br><span class="line">    UIViewController *tab3 = [[[MQQTab3ViewController alloc] init] autorelease];</span><br><span class="line">    tab3.tabBarItem.title = @&quot;green&quot;;</span><br><span class="line">    [self addChildViewController:tab3];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><br>那么<code>[MQQTabBarController viewDidLoad]</code>、 <code>[AppDelegate application:didFinishLaunchingWithOptions:]</code>、 <code>[MQQTab1ViewController viewDidLoad]</code>、 <code>[MQQTab2ViewController viewDidLoad]</code>、 <code>[MQQTab2ViewController viewDidLoad]</code> 完成的先后顺序是怎样的呢？</p><p>答案是：</p><ol><li>[MQQTabBarController viewDidLoad]</li><li>[MQQTab1ViewController viewDidLoad]</li><li>[AppDelegate application:didFinishLaunchingWithOptions:]</li><li>[MQQTab2ViewController viewDidLoad] （点击了第二个tab之后加载）</li><li>[MQQTab3ViewController viewDidLoad] （点击了第三个tab之后加载）</li></ol><p>一般而言，大部分情况下我们都会把界面的初始化过程放在viewDidLoad，但是这个过程会影响消耗启动的时间。特别是在类似TabBarController这种会嵌套childViewController的ViewController的情况，它也会把部分children也初始化，因此各种viewDidLoad会递归的进行。</p><p>最简单的解决的方法，是把viewController延后加载，但实际上这属于一种掩耳盗铃，确实，applicationWillFinishLaunching的耗时是降下来了，但用户体验上并没有感觉变快。</p><p>更好一点的解决方法有点类似facebook，主视图会第一时间加载，但里面的数据和界面都会延后加载，这样用户就会阶段性的获得视觉上的变化，从而在视觉体验上感觉App启动得很快。</p><h1 id="5-facebook启动的网络请求优化"><a href="#5-facebook启动的网络请求优化" class="headerlink" title="5. facebook启动的网络请求优化"></a>5. facebook启动的网络请求优化</h1><p>网络请求/响应看起来像这样：</p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220520001103243.png" alt="1.png"></p><p>我们注意到，一旦请求正在排队，发送请求出去之后就有一个时间间隔。这很好解释 — 在冷启动中，网络连接并不是一个开放的、安全的 TCP 连接。一个连接的建立需要三次握手，平均为几百毫秒。当摘要请求第一次发送时，无法避免要花掉这些时间。长远来看，这可以通过缓存 SSL 证书来解决。但是再次强调，我们退回来的目的并不是为了发送 TCP 请求，而是为了从服务器通过任何可能的方式获得请求信息。</p><p>我们提出了一个创造性的解决方案 — UDP 启动。本质上，我们在通过 TCP 发送摘要请求时，先发送一个编码过的包含摘要请求的 UDP 包到服务器。这样做的目的是唤醒服务器更早地去获取和缓存数据。当真正的摘要请求通过 TCP 到达时，服务器只需见到地从缓存内容中构造出响应，并发回客户端。这个技术使得我们可以减少几百毫秒的耗时。</p><p>当我们持续深入研究服务器端时，我们开始尝试使用 层-取（story-fetching）策略。过去我们已经做了一批摘要请求的 3+7 层。原因很简单：下载次数和被下载的层成正比。因此，把请求分割成两块，允许开始的三层先进来，其余的七个随后进来。通过提升我们的基础设施，我们已经能够升级为 1+1+X 策略，这已经接近于流了。这样就减少了服务器必须处理第一层的时间，并且能够减少下载的时间，使得可以在最快的时间内与用户交互。通过这样的努力，这样我们又减少了几百毫秒的耗时。</p><blockquote><p>总结一下facebook网络优化就是：</p><ol><li>瘦身请求网络依赖，将相类似的多个请求归到一个请求</li><li>UDP启动请求现行缓存</li><li>队列串行化处理启动响应</li></ol></blockquote><h1 id="6-优化总结"><a href="#6-优化总结" class="headerlink" title="6.优化总结"></a>6.优化总结</h1><p>性能上的优化：<br><strong>main()函数之前</strong></p><ol><li>减少动态库静态库等Mach-O文件的加载</li><li>合并或者删减一些OC类，关于清理项目中没用到的类，可以借助AppCode代码检查工具</li><li>尽量不要用C++虚函数(创建虚函数表有开销)</li><li>合并功能类似的类和扩展（Category）</li><li>压缩资源图片</li></ol><p><strong>main()函数之后</strong></p><ol><li>尽量使用纯代码编写，减少xib的使用</li><li>启动阶段的网络请求，是否都放到异步请求</li><li>一些耗时的操作放到后面去执行，或异步执行等<br>4.优化rootViewController加载，减少或延后加载不需要的视图及逻辑</li><li>网络请求的优化。。。</li><li>数据本地缓存，先布局视图，加载本地缓存，再加载网络资源</li></ol><p><strong>参考文章</strong><br><a href="https://mp.weixin.qq.com/s/Kf3EbDIUuf0aWVT-UCEmbA">iOS App 启动性能优化</a><br><a href="http://www.cocoachina.com/ios/20160104/14870.html">Facebook iOS App如何优化启动时间</a></p>]]></content>
      
      
      <categories>
          
          <category> 性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Instruments使用总结</title>
      <link href="/2018/12/11/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/Instruments%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
      <url>/2018/12/11/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/Instruments%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Instruments介绍"><a href="#一、Instruments介绍" class="headerlink" title="一、Instruments介绍"></a>一、Instruments介绍</h1><p> Instruments 一个很灵活的、强大的工具，是性能分析、动态跟踪 和分析OS X以及iOS代码的测试工具，用它可以极为方便收集关于一个或多个系统进程的性能和行为的数据，并能及时随着时间跟踪而产生的数据，并检查所收集的数据，还可以广泛收集不同类型的数据.也可以追踪程序运行的过程，这样instrument就可以帮助我们了解用户的应用程序和操作系统的行为。</p><pre><code> 总结一下instrument能做的事情： 1. Instruments是用于动态调追踪和分析OS X和iOS的代码的性能分析和测试工具； 2.Instruments支持多线程的调试； 3.可以用Instruments去录制和回放，图形用户界面的操作过程 4.可将录制的图形界面操作和Instruments保存为模板，供以后访问使用。 instrument还可以： 1.追踪代码中的（甚至是那些难以复制的）问题； 2.分析程序的性能； 3.实现程序的自动化测试； 4.部分实现程序的压力测试； 5.执行系统级别的通用问题追踪调试； 6.使你对程序的内部运行过程更加了解。</code></pre><p>打开方式：<br><code>Xcode -&gt; Open Developer Tool  -&gt; Instruments</code></p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220520001015730.png" alt="1.png"></p><p>其中比较常用的有四种：</p><ul><li>Allocations：用来检查内存分配，跟踪过程的匿名虚拟内存和堆的对象提供类名和可选保留/释放历史</li><li>Leaks：一般的查看内存使用情况，检查泄漏的内存，并提供了所有活动的分配和泄漏模块的类对象分配统计信息以及内存地址历史记录</li><li>Time Profiler：分析代码的执行时间，执行对系统的CPU上运行的进程低负载时间为基础采样</li><li>Zombies：检查是否访问了僵尸对象</li></ul><p>其他的：</p><ul><li>Blank：创建一个空的模板，可以从Library库中添加其他模板</li><li>Activity Monitor：显示器处理的CPU、内存和网络使用情况统计</li><li>Automation：用JavaScript语言编写，主要用于分析应用的性能和用户行为，模仿/击发被请求的事件，利用它可以完成对被测应用的简单的UI测试及相关功能测试</li><li>Cocoa Layout：观察约束变化，找出布局代码的问题所在。</li><li>Core Animation：用来检测Core Animation性能的，给我们提供了周期性的FPS，并且考虑到了发生在程序之外的动画，界面滑动FPS可以进行测试</li><li>Core Data：监测读取、缓存未命中、保存等操作，能直观显示是否保存次数远超实际需要</li><li>Energy Diagnostic ：用于Xcode下的Instruments来分析手机电量消耗的。（必须是真机才有电量）</li><li>GPU Driver ：可以测量GPU的利用率，同样也是一个很好的来判断和GPU相关动画性能的指示器。它同样也提供了类似Core Animtaion那样显示FPS的工具。</li><li>Network：分析应用程序如何使用TCP / IP和UDP / IP连接使用连接仪器。就是检查手机网速的。（这个最好是真机）</li></ul><h1 id="二、Allocations（分配）"><a href="#二、Allocations（分配）" class="headerlink" title="二、Allocations（分配）"></a>二、Allocations（分配）</h1><h2 id="1-内存分类："><a href="#1-内存分类：" class="headerlink" title="1.内存分类："></a>1.内存分类：</h2><ul><li>Leaked memory：泄漏的内存，如为对象A申请了内存空间，之后再也没用到A，也没有释放A导致内存泄漏（野指针。。。）</li><li>Abandoned memory：被遗弃的内存，如循环引用，递归不断申请内存而导致的内存泄漏</li><li>Cached memory：缓存的内存</li></ul><h2 id="2-Abandoned-memory"><a href="#2-Abandoned-memory" class="headerlink" title="2.Abandoned memory"></a>2.Abandoned memory</h2><p>其中内存泄漏我们可以用<code>Leaks</code>，野指针可以用<code>Zombies</code>（僵尸对象），而在这里我们就可以用<code>Allocations</code>来检测<code>Abandoned memory</code>的内存。</p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220520001015838.png" alt="2.png"></p><p>即我们采用Generational Analysis的方法来分析，反复进入退出某一场景，查看内存的分配与释放情况，以定位哪些对象是属于Abandoned Memory的范畴。<br>在Allocations工具中，有专门的Generational Analysis设置，如下：</p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220520001015879.png" alt="3.png"></p><p>我们可以在程序运行时，在进入某个模块前标记一个Generation，这样会生成一个快照。然后进入、退出，再标记一个Generation，如下图：</p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220520001015993.png" alt="4.png"></p><p>在详情面板中我们可以看到两个Generation间内存的增长情况，其中就可能存在潜在的被遗弃的对象，如下图：</p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220520001016082.png" alt="5.png"></p><p>其中growth就是我们增长的内存，GenerationA是程序启动到进入该场景增长的内存，GenerationB就是第二次进入该场景所增长的内存，查看子类可以发现有两个管理类造成了<code>Abandoned memory</code>。</p><h2 id="3-设置Generations"><a href="#3-设置Generations" class="headerlink" title="3.设置Generations"></a>3.设置Generations</h2><p>使用instrument测试内存泄露 工具 Allocations 测试是否内存泄露 使用标记，可以更省事省力的测试页面是否有内存泄露<br>1）设置Generations</p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240.jpeg" alt="6.jpg"></p><p>2）选择mark generation</p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220520001016183.jpeg" alt="7.jpg"></p><p>3）使用方法 在进入测试页面之前，mark一下——-&gt;进入页面——-&gt;退出——-&gt;mark———&gt;进入———-&gt;退出———-&gt;mark———&gt;进入如此往复5、6次，就可以看到如下结果</p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220520001016323.jpeg" alt="8.jpg"></p><p><strong>这种情况下是内存有泄露，看到每次的增量都是好几百K或者上M的，都是属于内存有泄露的，这时候就需要检测下代码一般情况下，<code>100K以下都属于正常范围，growth表示距离你上次mark的增量</code></strong></p><h1 id="三、Leaks（泄漏）"><a href="#三、Leaks（泄漏）" class="headerlink" title="三、Leaks（泄漏）"></a>三、Leaks（泄漏）</h1><h2 id="1-内存溢出和内存泄漏的区别"><a href="#1-内存溢出和内存泄漏的区别" class="headerlink" title="1.内存溢出和内存泄漏的区别"></a>1.内存溢出和内存泄漏的区别</h2><p><strong>内存溢出 out of memory</strong>，是指程序在申请内存时，没有足够的内存空间供其使用，出现out of memory；比如申请了一个integer,但给它存了long才能存下的数，那就是内存溢出。</p><p><strong>内存泄露 memory leak</strong>，是指程序在申请内存后，无法释放已申请的内存空间，一次内存泄露危害可以忽略，但内存泄露堆积后果很严重，无论多少内存,迟早会被占光。<br><strong>memory leak会最终会导致out of memory！</strong></p><p>在前面的ALLcations里面我们提到过<strong>内存泄漏就是应该释放而没有释放的内存</strong>。而内存泄漏分为两种：<strong>Leaked Memory</strong> 和 <strong>Abandoned Memory</strong>。前面我们讲到了如何找到Abandoned Memory被遗忘的内存，现在我们研究的就是<strong>Leaked Memory</strong>。</p><p>以<strong>发生的方式</strong>来分类，内存泄漏可以分为4类：</p><blockquote><p><strong>常发性内存泄漏</strong>。发生内存泄漏的代码会被多次执行到，每次被执行的时候都会导致一块内存泄漏。<br><strong>偶发性内存泄漏</strong>。发生内存泄漏的代码只有在某些特定环境或操作过程下才会发生。常发性和偶发性是相对的。对于特定的环境，偶发性的也许就变成了常发性的。所以测试环境和测试方法对检测内存泄漏至关重要。<br><strong>一次性内存泄漏</strong>。发生内存泄漏的代码只会被执行一次，或者由于算法上的缺陷，导致总会有一块仅且一块内存发生泄漏。比如，在类的构造函数中分配内存，在析构函数中却没有释放该内存，所以内存泄漏只会发生一次。<br><strong>隐式内存泄漏</strong>。程序在运行过程中不停的分配内存，但是直到结束的时候才释放内存。严格的说这里并没有发生内存泄漏，因为最终程序释放了所有申请的内存。但是对于一个服务器程序，需要运行几天，几周甚至几个月，不及时释放内存也可能导致最终耗尽系统的所有内存。所以，我们称这类内存泄漏为隐式内存泄漏。</p></blockquote><p>影响：从用户使用程序的角度来看，内存泄漏本身不会产生什么危害，作为一般的用户，根本感觉不到内存泄漏的存在。<strong>真正有危害的是内存泄漏的堆积</strong>，这会最终消耗尽系统所有的内存。从这个角度来说，一次性内存泄漏并没有什么危害，因为它不会堆积，而隐式内存泄漏危害性则非常大，因为较之于常发性和偶发性内存泄漏它更难被检测到。</p><p>下边我们介绍Instruments里面的Leaked的用法，首先打开Leaked，跑起工程来，点击要测试的页面，如果有内存泄漏，会出现下图中的红色的❌。然后按照后边的步骤进行修复即可</p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220520001016399.png" alt="1.png"></p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220520001016451.png" alt="2.png"></p><p>上面的旧版的样式，下面的是新版的样式，基本操作差不多</p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220520001016490.png" alt="Snip20181211_2.png"></p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220520001016530.png" alt="3.png"><br>在详情面板选中显示的若干条中的一条，双击，会自动跳到内存泄露代码处，然后点击右上角 Xcode 图标进行修改。</p><p>下图是对Leaked页面进一步的理解：</p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220520001016587.png" alt="4.png"></p><p><strong>内存泄漏动态分析技巧：</strong></p><ol><li>在 Display Settings 界面建议把 Snapshot Interval （snapʃɒt, 数据快照）间隔时间设置为10秒，勾选Automatic Snapshotting，Leaks 会自动进行内存捕捉分析。（新版本直接在底部修改）</li><li>熟练使用 Leaks 后会对内存泄漏判断更准确，在可能导致泄漏的操作里，在你怀疑有内存泄漏的操作前和操作后，可以点击 Snapshot Now 进行手动捕捉。</li><li>开始时如果设备性能较好，可以把自动捕捉间隔设置为 5 秒钟。</li><li>使用ARC的项目，一般内存泄漏都是 malloc、自定义结构、资源引起的，多注意这些地方进行分析。</li><li>开启ARC后，内存泄漏的原因<br>开启了ARC并不是就不会存在内存问题，苹果有句名言：ARC is only for NSObject。</li></ol><p><strong>注：如果你的项目使用了ARC，随着你的操作，不断开启或关闭视图，内存可能持续上升，但这不一定表示存在内存泄漏，ARC释放的时机是不固定的。</strong></p><p><strong>这里对 Display Settings中 的 <code>Call tree</code> 选项做一下说明 [官方user guide翻译]：</strong> </p><ul><li><strong>Separate By Thread：</strong>线程分离,只有这样才能在调用路径中能够清晰看到占用CPU最大的线程.每个线程应该分开考虑。只有这样你才能揪出那些大量占用CPU的”重”线程，按线程分开做分析，这样更容易揪出那些吃资源的问题线程。特别是对于主线程，它要处理和渲染所有的接口数据，一旦受到阻塞，程序必然卡顿或停止响应。</li><li><strong>Invert Call Tree：</strong>从上到下跟踪堆栈信息.这个选项可以快捷的看到方法调用路径最深方法占用CPU耗时（这意味着你看到的表中的方法,将已从第0帧开始取样,这通常你是想要的,只有这样你才能看到CPU中花费时间最深的方法）,比如FuncA{FunB{FunC}},勾选后堆栈以C-&gt;B-&gt;A把调用层级最深的C显示最外面.反向输出调用树。把调用层级最深的方法显示在最上面，更容易找到最耗时的操作。</li><li><strong>Hide Missing Symbols：</strong>如果dSYM无法找到你的APP或者调用系统框架的话，那么表中将看到调用方法名只能看到16进制的数值,勾选这个选项则可以隐藏这些符号，便于简化分析数据.</li><li><strong>Hide System Libraries：</strong>表示隐藏系统的函数，调用这个就更有用了,勾选后耗时调用路径只会显示app耗时的代码,性能分析普遍我们都比较关系自己代码的耗时而不是系统的.基本是必选项.注意有些代码耗时也会纳入系统层级，可以进行勾选前后前后对执行路径进行比对会非常有用.因为通常你只关心cpu花在自己代码上的时间不是系统上的，隐藏系统库文件。过滤掉各种系统调用，只显示自己的代码调用。隐藏缺失符号。如果 dSYM 文件或其他系统架构缺失，列表中会出现很多奇怪的十六进制的数值，用此选项把这些干扰元素屏蔽掉，让列表回归清爽。</li><li><strong>Show Obj-C Only：</strong>只显示oc代码 ,如果你的程序是像OpenGl这样的程序,不要勾选侧向因为他有可能是C++的</li><li><strong>Flatten Recursion：</strong>递归函数, 每个堆栈跟踪一个条目，拼合递归。将同一递归函数产生的多条堆栈（因为递归函数会调用自己）合并为一条。</li><li><strong>Top Functions：</strong>找到最耗时的函数或方法。 一个函数花费的时间直接在该函数中的总和，以及在函数调用该函数所花费的时间的总时间。因此，如果函数A调用B，那么A的时间报告在A花费的时间加上B.花费的时间,这非常真有用，因为它可以让你每次下到调用堆栈时挑最大的时间数字，归零在你最耗时的方法。</li></ul><h1 id="四、Time-Profiler（时间分析器）"><a href="#四、Time-Profiler（时间分析器）" class="headerlink" title="四、Time Profiler（时间分析器）"></a>四、Time Profiler（时间分析器）</h1><p>用来检测app中每个方法所用的时间，并且可以排序，并查找出哪些函数占用了大量时间。</p><p>使用Time Profile前有两点需要注意的地方：<br><strong>1、一定要使用真机调试</strong></p><blockquote><p>在开始进行应用程序性能分析的时候，一定要使用真机。因为模拟器运行在Mac上，然而Mac上的CPU往往比iOS设备要快。相反，Mac上的GPU和iOS设备的完全不一样，模拟器不得已要在软件层面（CPU）模拟设备的GPU，这意味着GPU相关的操作在模拟器上运行的更慢，尤其是使用CAEAGLLayer来写一些OpenGL的代码时候，这就导致模拟器性能数据和用户真机使用性能数据相去甚远</p></blockquote><p><strong>2、应用程序一定要使用发布配置</strong></p><blockquote><p>在发布环境打包的时候，编译器会引入一系列提高性能的优化，例如去掉调试符号或者移除并重新组织代码。另iOS引入一种”Watch Dog”[看门狗]机制，不同的场景下，“看门狗”会监测应用的性能，如果超出了该场景所规定的运行时间，“看门狗”就会强制终结这个应用的进程。开发者可以crashlog看到对应的日志，但Xcode在调试配置下会禁用”Watch Dog”</p></blockquote><p>1）界面详情：</p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220520001017075.png" alt="1.png"></p><p>2）详细面板</p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220520001017300.png" alt="5.png"></p><p>主要是看Call Tree和Sample List这两种视图：</p><p>3）调用树</p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220520001017389.png" alt="4.png"></p><p>Running Time：函数运行的时间，这个时间是累积时间<br>Self：在栈顶次数<br>Symbol Name：被调用函数的符号信息</p><p>4）详情面板更多的信息选项</p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220520001017718.png" alt="3.png"></p><p>5）样本列表</p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220520001018569.png" alt="2.png"></p><h1 id="五、Zombies（僵尸）"><a href="#五、Zombies（僵尸）" class="headerlink" title="五、Zombies（僵尸）"></a>五、Zombies（僵尸）</h1><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h2><p>翻译英文：专注于检测<strong>过度释放</strong>的“僵尸”对象。还提供了数据对象分配的类以及所有活动分配内存地址的历史。</p><p>这里我们可以看到一个词语叫“<strong>over-release</strong>”,过度释放。我们在项目中见到最多的就是“EXC_BAD_ACCESS”或者是这样的：<strong>Thread 1: Program received signal:”EXC_BAD_ACCESS”</strong>，这就是访问了被释放的内存地址造成的。</p><p><strong>过度释放，是对同一个对象释放了过多的次数</strong>，其实当引用计数降到0时，对象占用的内存已经被释放掉，此时指向原对象的指针就成了“悬垂指针”，如若再对其进行任何方法的调用，（原则上）都会直接crash（然而由于某些特殊的情况，不会马上crash）。过度释放简单的说就是<strong>对release的对象再release，就是过度释放</strong>。</p><p>我们需要知道这几个概念：</p><blockquote><p>1、内存泄漏：对象使用完没有释放，导致内存浪费。<br>2、僵尸对象：已经被销毁的对象(不能再使用的对象)<br>3、<strong>野指针：指向僵尸对象(不可用内存)的指针。给野指针发消息会报EXC_BAD_ACCECC错误</strong>。<br>4、空指针：没有指向储存空间的指针(里面存的是nil,也就是0)。在oc中使用空指针调中方法不会报错。</p></blockquote><p>注意:为了避免野指针错误的常见方法:在对象被销毁之后,将指向对象的指针变为空指针。</p><p>对于过度释放的问题，可以直接使用Zombie，当过度释放发生时会立即停在发生问题的位置，同时结合内存分配释放历史和调用栈，可以发现问题。至于上文提到的不会crash的原因，其实有很多，比如：</p><blockquote><p>对象内存释放时，所用内存并没有完全被擦除，仍有旧对象部分数据可用</p><p>原内存位置被写入同类或同样结构的数据</p></blockquote><h2 id="2-原理"><a href="#2-原理" class="headerlink" title="2.原理"></a>2.原理</h2><p>我们将僵尸对象“复活”的目的：<strong>僵尸对象就是让已经释放了的对象重新复活，便于调试</strong>；是为了让已经释放了的对象在被再次访问时能够输出一些错误信息。其实这里的“复活”并不是真的复活，而是<strong>强行不死</strong>：这么说吧 相当于 他的RC=0的时候 系统再强行让他RC=1，顺便打上一个标记 zoom，等到你去掉那个沟以后 系统会把带有标记zoom的对象RC=0。</p><h2 id="3-用法"><a href="#3-用法" class="headerlink" title="3.用法"></a>3.用法</h2><p>下边是Instruments里面的Zombies的用法：</p><p>在Launch  Configuration中勾选Record reference counts和Enable NSZombie detection。其中Recordreference counts是显示引用计数，Enable NSZombie detection是能够检测僵尸对象。</p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220520001018918.png" alt="1.png"></p><p>这样在程序运行的时候，如果发现僵尸对象它就会弹出一个对话框，点击其中“→”按钮，在屏幕的下方会显示僵尸对象的详细信息，下图可以看到僵尸对象的引用计数变化情况。</p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220520001019615.png" alt="2.png"></p><p><strong>注意：Zombies模版在使用的时候会导致内存的飙升</strong>，这是因为所有被释放的对象被僵尸对象取代，并未真的释放掉，在结束Zombies时会释放，这是预知行为，这就意味着instrument里的其它工具和Zombies是不能同时使用的，Zombies会导致其它的数据不准。包括leaks，你也不应该把它加到Zombies模版中，即使这么做了结果也没什么意义。对于iOS应用来说，<strong>在用Zombies模版时使用iOS模拟器比真机要好</strong>。</p><p>另外XCode也提供了手动设置NSZombieEnabled环境变量的方法，不过设置NSZombieEnabled为True后，<strong>会导致内存占用的增长</strong>，同时会影响Leaks工具的调试，这是因为设置NSZombieEnabled会用僵尸对象来代替已释放对象。</p><p>点击Product菜单Edit Scheme打开该页面，然后勾选Enable Zombie Objects复选框：</p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220520001019870.png" alt="3.png"></p><p>最后提醒的是NSZombieEnabled只能在调试的时候使用，千万不要忘记<strong>在产品发布的时候去掉</strong>，因为NSZombieEnabled不会真正去释放dealloc对象的内存，一直开启的话，该死去的对象会一直存在，后果可想而知，自重！</p><h1 id="六、扩展"><a href="#六、扩展" class="headerlink" title="六、扩展"></a>六、扩展</h1><ul><li><p>野指针</p><ul><li>C语言: 当我们声明1个指针变量,没有为这个指针变量赋初始值.这个指针变量的值是1个垃圾指 指向1块随机的内存空间。</li><li>OC语言: 指针指向的对象已经被回收掉了.这个指针就叫做野指针.</li></ul></li></ul><hr><ul><li><p>僵尸对象</p><ul><li><p>内存回收的本质.</p><ul><li>申请1块空间,实际上是向系统申请1块别人不再使用的空间.</li><li>释放1块空间,指的是占用的空间不再使用,这个时候系统可以分配给别人去使用.</li><li>在这个个空间分配给别人之前 数据还是存在的.<ul><li>OC对象释放以后,表示OC对象占用的空间可以分配给别人.</li><li>但是再分配给别人之前 这个空间仍然存在 对象的数据仍然存在.</li></ul></li><li>僵尸对象: 1个已经被释放的对象 就叫做僵尸对象.</li></ul></li><li><p>使用野指针访问僵尸对象.有的时候会出问题,有的时候不会出问题.</p><ul><li>当野指针指向的僵尸对象所占用的空间还没有分配给别人的时候,      - 这个时候其实是可以访问的.</li><li>因为对象的数据还在.</li><li>当野指针指向的对象所占用的空间分配给了别人的时候 这个时候访问就会出问题.</li><li>所以,你不要通过1个野指针去访问1个僵尸对象.<ul><li>虽然可以通过野指针去访问已经被释放的对象,但是我们不允许这么做.</li></ul></li></ul></li><li>僵尸对象检测.<ul><li>默认情况下. Xcode不会去检测指针指向的对象是否为1个僵尸对象. 能访问就访问 不能访问就报错.</li><li>可以开启Xcode的僵尸对象检测. <ul><li>那么就会在通过指针访问对象的时候,检测这个对象是否为1个僵尸对象 如果是僵尸对象 就会报错.</li></ul></li><li>为什么不默认开启僵尸对象检测呢?<ul><li>因为一旦开启,每次通过指针访问对象的时候.都会去检查指针指向的对象是否为僵尸对象.</li><li>那么这样的话 就影响效率了.</li></ul></li></ul></li></ul></li></ul><hr><ul><li>如何避免僵尸对象报错.<ul><li>当1个指针变为野指针以后. 就把这个指针的值设置为nil</li></ul></li></ul><hr><ul><li>僵尸对象无法复活.<ul><li>当1个对象的引用计数器变为0以后 这个对象就被释放了.</li><li>就无法取操作这个僵尸对象了. 所有对这个对象的操作都是无效的.</li><li>因为一旦对象被回收 对象就是1个僵尸对象 而访问1个僵尸对象 是没有意义.</li></ul></li></ul><blockquote><p>好了，以上就是对于<code>Instruments</code>工具的使用总结<br>喜欢的就点个赞👍吧</p></blockquote><p><strong>参考文章</strong></p><p>Allocations：<a href="https://www.jianshu.com/p/fc517cfdd25e">Xcode8 Instruments 测试工具使用三</a><br>Leaks：<a href="https://www.jianshu.com/p/92cd90e65d4c">Xcode 8 Instruments 学习（一）</a><br>Time Profiler：<a href="https://www.jianshu.com/p/9ac281228de2">Xcode 8 Instruments 学习（二）</a><br>Zombies：<a href="https://www.jianshu.com/p/9e94e42cfb01">Instruments性能检测</a></p>]]></content>
      
      
      <categories>
          
          <category> 性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>影响app性能问题总结及拓展</title>
      <link href="/2018/12/11/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E5%BD%B1%E5%93%8Dapp%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93%E5%8F%8A%E6%8B%93%E5%B1%95/"/>
      <url>/2018/12/11/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E5%BD%B1%E5%93%8Dapp%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93%E5%8F%8A%E6%8B%93%E5%B1%95/</url>
      
        <content type="html"><![CDATA[<p>APP的性能监控包括： <code>CPU 占用率</code>、 <code>内存使用情况</code>、<code>网络状况监控</code>、<code>启动时闪退</code>、<code>卡顿</code>、<code>FPS</code>、<code>使用时崩溃</code>、<code>耗电量监控</code>、<code>流量监控</code>等等。</p><h1 id="一、CPU占有率"><a href="#一、CPU占有率" class="headerlink" title="一、CPU占有率"></a>一、CPU占有率</h1><p>我们都知道，我们的APP在运行的时候，会对应一个<code>Mach Task</code>，而Task下可能有多条线程同时执行任务，每个线程都是作为利用CPU的基本单位。所以我们可以通过获取当前<code>Mach Task</code>下，所有线程占用 CPU 的情况，来计算APP的 CPU 占用率。</p><h1 id="二、内存"><a href="#二、内存" class="headerlink" title="二、内存"></a>二、内存</h1><p>虽然现在的手机内存越来越大，但毕竟是有限的，如果因为我们的应用设计不当造成内存过高，可能面临被系统“干掉”的风险，这对用户来说是毁灭性的体验。</p><h1 id="三、启动时间"><a href="#三、启动时间" class="headerlink" title="三、启动时间"></a>三、启动时间</h1><h2 id="1-App启动过程"><a href="#1-App启动过程" class="headerlink" title="1.App启动过程"></a>1.App启动过程</h2><ul><li>解析Info.plist<ul><li>加载相关信息，例如如闪屏</li><li>沙箱建立、权限检查</li></ul></li><li>Mach-O加载<ul><li>如果是胖二进制文件，寻找合适当前CPU类别的部分</li><li>加载所有依赖的Mach-O文件（递归调用Mach-O加载的方法）</li><li>定位内部、外部指针引用，例如字符串、函数等</li><li>执行声明为<strong>attribute</strong>((constructor))的C函数</li><li>加载类扩展（Category）中的方法</li><li>C++静态对象加载、调用ObjC的 +load 函数</li></ul></li><li>程序执行<ul><li>调用main()</li><li>调用UIApplicationMain()</li><li>调用applicationWillFinishLaunching</li></ul></li></ul><blockquote><p><strong>扩展</strong></p><ol><li><strong>Mach-O文件是什么：</strong></li></ol><ul><li>Mach-O 是 Mach object 文件格式的缩写,它是一种用于记录可执行文件、对象代码、共享库、动态加载代码和内存转储的文件格式。作为 a.out 格式的替代品,Mach-O 提供了更好的扩展性,并提升了符号表中信息的访问速度。</li></ul><ol><li><strong>常见的Mach-O文件类型</strong></li></ol><ul><li>MH_OBJECT<br>   目标文件（.o）<br>   静态库文件(.a），静态库其实就是N个.o合并在一起<ul><li>MH_EXECUTE：可执行文件<br>.app/xx</li><li>MH_DYLIB：动态库文件<br>.dylib<br>.framework/xx</li></ul></li><li>MH_DYLINKER：动态链接编辑器<br>  /usr/lib/dyld<ul><li>MH_DSYM：存储着二进制文件符号信息的文件<br>.dSYM/Contents/Resources/DWARF/xx（常用于分析APP的崩溃信息）</li></ul></li></ul><ol><li><strong>目标文件类型</strong></li></ol><ul><li>Mach-O 文件<br>  Mach-O 文件包含一种架构(i386、x86_64、arm64 等等)的对象代码</li></ul><ul><li>通用二进制文件<br>   也叫作胖文件，胖文件可能包含若干包含不同架构(i386、x86_64、arm、arm64 等等)对象代码的对象文件</li></ul></blockquote><p>毫无疑问移动应用的启动时间是影响用户体验的一个重要方面，那么我们究竟该如何通过启动时间来衡量一个应用性能的好坏呢？启动时间可以从冷启动和热启动两个角度去测量：</p><ul><li><p>冷启动：指的是应用尚未运行，必须加载并构建整个应用，完成初始化的工作，冷启动往往比热启动耗时长，而且每个应用的冷启动耗时差别也很大，所以冷启动存在很大的优化空间，冷启动时间从applicationDidFinishLaunching:withOptions:方法开始计算，很多应用会在该方法对其使用的第三方库初始化。</p></li><li><p>热启动：应用已经在后台运行（常见的场景是用户按了 Home 按钮），由于某个事件将应用唤醒到前台，应用会在 applicationWillEnterForeground: 方法接收应用进入前台的事件</p></li></ul><p>APP的启动时间，直接影响用户对你的APP的第一体验和判断。如果启动时间过长，不单单体验直线下降，而且可能会激发苹果的watch dog机制kill掉你的APP，那就悲剧了，用户会觉得APP怎么一启动就卡死然后崩溃了，不能用，然后长按APP点击删除键。（Xcode在debug模式下是没有开启watch dog的，所以我们一定要连接真机测试我们的APP）</p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220520000937718.png" alt="1.png"></p><blockquote><p>t(App 总启动时间) = t1( <code>main()</code>之前的加载时间 ) + t2( <code>main()</code>之后的加载时间 )。</p><ul><li>t1 = 系统的 dylib (动态链接库)和 App 可执行文件的加载时间；</li></ul><ul><li>t2 = <code>main()</code>函数执行之后到<code>AppDelegate</code>类中的<code>applicationDidFinishLaunching:withOptions:</code>方法执行结束前这段时间。</li></ul></blockquote><p>所以我们对APP启动时间的获取和优化都是从这两个阶段着手，下面先看看<code>main()</code>函数执行之前如何获取启动时间。</p><h2 id="2-衡量main-函数执行之前的耗时"><a href="#2-衡量main-函数执行之前的耗时" class="headerlink" title="2.衡量main()函数执行之前的耗时"></a>2.衡量main()函数执行之前的耗时</h2><p>对于衡量main()之前也就是time1的耗时，苹果官方提供了一种方法，即在真机调试的时候，勾选<code>DYLD_PRINT_STATISTICS</code>选项（如果想获取更详细的信息可以使用<code>DYLD_PRINT_STATISTICS_DETAILS</code>），如下图：</p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220520000937764.png" alt="2.png"></p><p>输出结果如下：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Total pre-main time:  34.22 milliseconds (100.0%)</span><br><span class="line">         dylib loading time:  14.43 milliseconds (42.1%)</span><br><span class="line">        rebase/binding time:   1.82 milliseconds (5.3%)</span><br><span class="line">            ObjC setup time:   3.89 milliseconds (11.3%)</span><br><span class="line">           initializer time:  13.99 milliseconds (40.9%)</span><br><span class="line">           slowest intializers :</span><br><span class="line">             libSystem.B.dylib :   2.20 milliseconds (6.4%)</span><br><span class="line">   libBacktraceRecording.dylib :   2.90 milliseconds (8.4%)</span><br><span class="line">    libMainThreadChecker.dylib :   6.55 milliseconds (19.1%)</span><br><span class="line">       libswiftCoreImage.dylib :   0.71 milliseconds (2.0%)</span><br></pre></td></tr></table></figure></p><p>系统级别的动态链接库，因为苹果做了优化，所以耗时并不多，而大多数时候，t1的时间大部分会消耗在我们自身App中的代码上和链接第三方库上。</p><p>所以我们应如何减少main()调用之前的耗时呢，我们可以优化的点有：</p><blockquote><ol><li><p>减少不必要的framework，特别是第三方的，因为动态链接比较耗时；</p></li><li><p>check framework应设为optional和required，如果该framework在当前App支持的所有iOS系统版本都存在，那么就设为required，否则就设为optional，因为optional会有些额外的检查；</p></li><li>合并或者删减一些OC类，关于清理项目中没用到的类，可以借助AppCode代码检查工具：</li></ol><ul><li>删减一些无用的静态变量</li><li>删减没有被调用到或者已经废弃的方法</li><li>将不必须在+load方法中做的事情延迟到+initialize中</li><li>尽量不要用C++虚函数(创建虚函数表有开销)</li></ul></blockquote><h2 id="3-衡量main-函数执行之后的耗时"><a href="#3-衡量main-函数执行之后的耗时" class="headerlink" title="3.衡量main()函数执行之后的耗时"></a>3.衡量main()函数执行之后的耗时</h2><p>第二阶段的耗时统计，我们认为是从<code>main ()</code>执行之后到<code>applicationDidFinishLaunching:withOptions:</code>方法最后，那么我们可以通过打点的方式进行统计。  Objective-C项目因为有main文件，所以我么直接可以通过添加代码获取：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 1. 在 main.m 添加如下代码:</span><br><span class="line">CFAbsoluteTime AppStartLaunchTime;</span><br><span class="line"></span><br><span class="line">int main(int argc, char * argv[]) &#123;</span><br><span class="line">    AppStartLaunchTime = CFAbsoluteTimeGetCurrent();</span><br><span class="line">  .....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 2. 在 AppDelegate.m 的开头声明</span><br><span class="line">extern CFAbsoluteTime AppStartLaunchTime;</span><br><span class="line"></span><br><span class="line">// 3. 最后在AppDelegate.m 的 didFinishLaunchingWithOptions 中添加</span><br><span class="line">dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">  NSLog(@&quot;App启动时间--%f&quot;,(CFAbsoluteTimeGetCurrent()-AppStartLaunchTime));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>main函数之后的优化：</p><blockquote><ul><li>尽量使用纯代码编写，减少xib的使用；</li></ul><ul><li>启动阶段的网络请求，是否都放到异步请求；</li></ul><ul><li>一些耗时的操作是否可以放到后面去执行，或异步执行等。</li></ul></blockquote><h1 id="四、FPS"><a href="#四、FPS" class="headerlink" title="四、FPS"></a>四、FPS</h1><p>通过维基百科我们知道，<code>FPS</code>是<code>Frames Per Second</code> 的简称缩写，意思是每秒传输帧数，也就是我们常说的“刷新率（单位为Hz）。</p><p><code>FPS</code>是测量用于保存、显示动态视频的信息数量。每秒钟帧数愈多，所显示的画面就会愈流畅，<code>FPS</code>值越低就越卡顿，所以这个值在一定程度上可以衡量应用在图像绘制渲染处理时的性能。一般我们的APP的<code>FPS</code>只要保持在 50-60之间，用户体验都是比较流畅的。</p><p>苹果手机屏幕的正常刷新频率是每秒60次，即可以理解为<code>FPS</code>值为60。我们都知道<code>CADisplayLink</code>是和屏幕刷新频率保存一致，所以我们是否可以通过它来监控我们的<code>FPS</code>呢？！</p><p>使用<code>CADisplayLink</code>监控界面的<code>FPS</code>值，参考自<a href="https://github.com/ibireme/YYKit/blob/master/Demo/YYKitDemo/YYFPSLabel.m">YYFPSLabel</a>：</p><h1 id="五、卡顿"><a href="#五、卡顿" class="headerlink" title="五、卡顿"></a>五、卡顿</h1><p>在了解卡顿产生的原因之前，先看下屏幕显示图像的原理。</p><h2 id="1-屏幕显示图像的原理"><a href="#1-屏幕显示图像的原理" class="headerlink" title="1.屏幕显示图像的原理"></a>1.屏幕显示图像的原理</h2><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220520000937791.png" alt="3.png"></p><p>现在的手机设备基本都是采用双缓存+垂直同步（即V-Sync）屏幕显示技术。</p><p>如上图所示，系统内<code>CPU</code>、<code>GPU</code>和显示器是协同完成显示工作的。其中<code>CPU</code>负责计算显示的内容，例如视图创建、布局计算、图片解码、文本绘制等等。随后<code>CPU</code>将计算好的内容提交给<code>GPU</code>，由<code>GPU</code>进行变换、合成、渲染。<code>GPU</code>会预先渲染好一帧放入一个缓冲区内，让视频控制器读取，当下一帧渲染好后，<code>GPU</code>会直接将视频控制器的指针指向第二个容器（双缓存原理）。这里，<code>GPU</code>会等待显示器的<code>VSync</code>（即垂直同步）信号发出后，才进行新的一帧渲染和缓冲区更新（这样能解决画面撕裂现象，也增加了画面流畅度，但需要消费更多的计算资源，也会带来部分延迟）。</p><h2 id="2-卡顿的原因"><a href="#2-卡顿的原因" class="headerlink" title="2.卡顿的原因"></a>2.卡顿的原因</h2><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220520000937819.png" alt="4.png"></p><p>由上面屏幕显示的原理，采用了垂直同步机制的手机设备。如果在一个<code>VSync</code> 时间内，<code>CPU</code> 或<code>GPU</code> 没有完成内容提交，则那一帧就会被丢弃，等待下一次机会再显示，而这时显示屏会保留之前的内容不变。例如在主线程里添加了阻碍主线程去响应点击、滑动事件、以及阻碍主线程的UI绘制等的代码，都是造成卡顿的常见原因。</p><h2 id="3-卡顿监控"><a href="#3-卡顿监控" class="headerlink" title="3.卡顿监控"></a>3.卡顿监控</h2><p>卡顿监控一般有两种实现方案：</p><ul><li><p>(1). <strong>主线程卡顿监控</strong>。通过子线程监测主线程的<code>runLoop</code>，判断两个状态区域之间的耗时是否达到一定阈值。</p></li><li><p>(2). <strong>FPS监控</strong>。要保持流畅的UI交互，App 刷新率应该当努力保持在 60fps。<code>FPS</code>的监控实现原理，上面已经探讨过这里略过。</p></li></ul><p>在使用<code>FPS</code>监控性能的实践过程中，发现 <code>FPS</code> 值抖动较大，造成侦测卡顿比较困难。为了解决这个问题，<strong>通过采用检测主线程每次执行消息循环的时间，当这一时间大于规定的阈值时，就记为发生了一次卡顿的方式来监控</strong>。  这也是美团的移动端采用的性能监控<a href="https://tech.meituan.com/hertz.html">Hertz</a> 方案，微信团队也在实践过程中提出来类似的方案—<a href="https://wereadteam.github.io/2016/05/03/WeRead-Performance/">微信读书 iOS 性能优化总结</a>。</p><h1 id="六、耗电量监控"><a href="#六、耗电量监控" class="headerlink" title="六、耗电量监控"></a>六、耗电量监控</h1><p>iOS 设备的电量一直是用户非常关心的问题。如果你的应用由于某些缺陷不幸成为电量杀手，用户会毫不犹豫的卸载你的应用，所以耗电也是 app 性能的重要衡量标准之一。然而事实上业内对耗电量的监控的方案都做的不太好，下面会介绍和对比业内已有的耗电量的监控方案。</p><p>电量获取三种方案对比如下：</p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220520000937844.png" alt="5.png"></p><h1 id="七、网络监控"><a href="#七、网络监控" class="headerlink" title="七、网络监控"></a>七、网络监控</h1><p>网络监控一般通过 NSURLProtocol 和代码注入（Hook）这两种方式来实现，由于 NSURLProtocol 作为上层接口，使用起来更为方便，因此很自然选择它作为网络监控的方案，但是 NSURLProtocol 属于 <strong>URL Loading System</strong> 体系中，应用层的协议支持有限，只支持 <strong>FTP，HTTP，HTTPS</strong> 等几个应用层协议，对于使用其他协议的流量则束手无策，所以存在一定的局限性。监控底层网络库 CFNetwork 则没有这个限制。</p><p>下面是网络采集的关键性能指标：</p><ul><li>TCP 建立连接时间</li><li>DNS 时间</li><li>SSL 时间</li><li>首包时间</li><li>响应时间</li><li>HTTP 错误率</li><li>网络错误率</li></ul><hr><p><strong>拓展专题</strong>（后续补充）<br><a href="https://www.jianshu.com/p/0f380940b80e">启动优化</a><br><a href="https://www.jianshu.com/p/dcc342cda042">Instruments工具使用</a><br><a href="http://blog.cnbang.net/tech/2544/">包体积优化</a></p><p><strong>参考文章</strong><br><a href="https://www.jianshu.com/p/95df83780c8f">iOS开发—APP性能检测方案汇总(一)</a><br><a href="http://www.cocoachina.com/ios/20170629/19680.html">iOS 性能监控方案（上篇）</a><br><a href="http://www.cocoachina.com/ios/20170630/19683.html">iOS 性能监控方案（下篇）</a></p>]]></content>
      
      
      <categories>
          
          <category> 性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud05：Feign负载均衡</title>
      <link href="/2018/12/09/SpringCloud/SpringCloud05%EF%BC%9AFeign%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
      <url>/2018/12/09/SpringCloud/SpringCloud05%EF%BC%9AFeign%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本系列对应的是尚硅谷周阳Spring Cloud的思维导图整理的笔记，用来方便自己后面的知识点回顾。分别以每个知识点作为一篇文章详细讲述。</p></blockquote><p>知识点传送门：<br><a href="https://github.com/HuiYouHua/SpringCloud">项目源码</a></p><ul><li><a href="https://www.jianshu.com/p/c4c8c19d9f23">SpringCloud01：微服务概述与SpringCloud</a></li><li><a href="https://www.jianshu.com/p/9bc7aa82a07d">SpringCloud02：Rest微服务构建案例工程模块</a></li><li><a href="https://www.jianshu.com/p/afaef0642065">SpringCloud03：Eureka服务注册与发现</a></li><li><a href="https://www.jianshu.com/p/952b4895b6ae">SpringCloud04：Ribbon负载均衡</a></li><li><a href="https://www.jianshu.com/p/b2ec4c74ff75">SpringCloud05：Feign负载均衡</a></li><li><a href="https://www.jianshu.com/p/1b4da963374d">SpringCloud06：Hystrix断路器</a></li><li><a href="https://www.jianshu.com/p/91364d0e535d">SpringCloud07：zuul路由网关</a></li><li><a href="https://www.jianshu.com/p/31f79b4cd84d">SpringCloud08：SpringCloud Config分布式配置中心</a></li></ul><h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><p>官网解释：<br><a href="http://projects.spring.io/spring-cloud/spring-cloud.html#spring-cloud-feign">http://projects.spring.io/spring-cloud/spring-cloud.html#spring-cloud-feign</a></p><p> <strong>Feign是一个声明式WebService客户端</strong>。使用Feign能让编写Web Service客户端更加简单, 它的使用方法是定义一个接口，然后在上面添加注解，同时也支持JAX-RS标准的注解。Feign也支持可拔插式的编码器和解码器。Spring Cloud对Feign进行了封装，使其支持了Spring MVC标准注解和HttpMessageConverters。<strong>Feign可以与Eureka和Ribbon组合使用以支持负载均衡</strong>。</p><p> Feign是一个声明式的Web服务客户端，使得编写Web服务客户端变得非常容易，<br><strong>只需要创建一个接口，然后在上面添加注解即可</strong>。<br>参考官网：<a href="https://github.com/OpenFeign/feign">https://github.com/OpenFeign/feign</a> </p><p> Feign能干什么<br>Feign旨在使编写Java Http客户端变得更容易。<br>前面在使用Ribbon+RestTemplate时，利用RestTemplate对http请求的封装处理，形成了一套模版化的调用方法。但是在实际开发中，由于对服务依赖的调用可能不止一处，<strong>往往一个接口会被多处调用，所以通常都会针对每个微服务自行封装一些客户端类来包装这些依赖服务的调用</strong>。所以，Feign在此基础上做了进一步封装，由他来帮助我们定义和实现依赖服务接口的定义。在Feign的实现下，<strong>我们只需创建一个接口并使用注解的方式来配置它(以前是Dao接口上面标注Mapper注解,现在是一个微服务接口上面标注一个Feign注解即可)</strong>，即可完成对服务提供方的接口绑定，简化了使用Spring cloud Ribbon时，自动封装服务调用客户端的开发量。</p><p>Feign集成了Ribbon<br>利用Ribbon维护了MicroServiceCloud-Dept的服务列表信息，并且通过轮询实现了客户端的负载均衡。而与Ribbon不同的是，<strong>通过feign只需要定义服务绑定接口且以声明式的方法</strong>，优雅而简单的实现了服务调用</p><h1 id="二、Feign使用步骤"><a href="#二、Feign使用步骤" class="headerlink" title="二、Feign使用步骤"></a>二、Feign使用步骤</h1><h2 id="1-参考microservicecloud-consumer-dept-80，新建新建microservicecloud-consumer-dept-feign"><a href="#1-参考microservicecloud-consumer-dept-80，新建新建microservicecloud-consumer-dept-feign" class="headerlink" title="1.参考microservicecloud-consumer-dept-80，新建新建microservicecloud-consumer-dept-feign"></a>1.参考microservicecloud-consumer-dept-80，新建新建microservicecloud-consumer-dept-feign</h2><p>修改主启动名：DeptConsumer80_Feign_App</p><h2 id="2-microservicecloud-consumer-dept-feign工程pom-xml修改，主要添加对feign的支持"><a href="#2-microservicecloud-consumer-dept-feign工程pom-xml修改，主要添加对feign的支持" class="headerlink" title="2.microservicecloud-consumer-dept-feign工程pom.xml修改，主要添加对feign的支持"></a>2.microservicecloud-consumer-dept-feign工程pom.xml修改，主要添加对feign的支持</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;spring-cloud-starter-feign&lt;/artifactId&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="3-修改microservicecloud-api工程"><a href="#3-修改microservicecloud-api工程" class="headerlink" title="3.修改microservicecloud-api工程"></a>3.修改microservicecloud-api工程</h2><p>1）POM<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-cloud-starter-feign&lt;/artifactId&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><br>2）新建DeptClientService接口并新增注解@FeignClient<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">package com.atguigu.springcloud.service;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import org.springframework.cloud.netflix.feign.FeignClient;</span><br><span class="line">import org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"></span><br><span class="line">import com.atguigu.springcloud.entities.Dept;</span><br><span class="line"></span><br><span class="line">@FeignClient(value = &quot;MICROSERVICECLOUD-DEPT&quot;)</span><br><span class="line">public interface DeptClientService</span><br><span class="line">&#123;</span><br><span class="line">  @RequestMapping(value = &quot;/dept/get/&#123;id&#125;&quot;,method = RequestMethod.GET)</span><br><span class="line">  public Dept get(@PathVariable(&quot;id&quot;) long id);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  @RequestMapping(value = &quot;/dept/list&quot;,method = RequestMethod.GET)</span><br><span class="line">  public List&lt;Dept&gt; list();</span><br><span class="line"></span><br><span class="line">  @RequestMapping(value = &quot;/dept/add&quot;,method = RequestMethod.POST)</span><br><span class="line">  public boolean add(Dept dept);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>3）mvn clean、mvn install</p><h2 id="4-microservicecloud-consumer-dept-feign工程修改Controller，添加上一步新建的DeptClientService接口"><a href="#4-microservicecloud-consumer-dept-feign工程修改Controller，添加上一步新建的DeptClientService接口" class="headerlink" title="4.microservicecloud-consumer-dept-feign工程修改Controller，添加上一步新建的DeptClientService接口"></a>4.microservicecloud-consumer-dept-feign工程修改Controller，添加上一步新建的DeptClientService接口</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">package com.atguigu.springcloud.controller;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">import com.atguigu.springcloud.entities.Dept;</span><br><span class="line">import com.atguigu.springcloud.service.DeptClientService;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">public class DeptController_Feign</span><br><span class="line">&#123;</span><br><span class="line">  @Autowired</span><br><span class="line">  private DeptClientService service = null;</span><br><span class="line"></span><br><span class="line">  @RequestMapping(value = &quot;/consumer/dept/get/&#123;id&#125;&quot;)</span><br><span class="line">  public Dept get(@PathVariable(&quot;id&quot;) Long id)</span><br><span class="line">  &#123;</span><br><span class="line">   return this.service.get(id);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @RequestMapping(value = &quot;/consumer/dept/list&quot;)</span><br><span class="line">  public List&lt;Dept&gt; list()</span><br><span class="line">  &#123;</span><br><span class="line">   return this.service.list();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @RequestMapping(value = &quot;/consumer/dept/add&quot;)</span><br><span class="line">  public Object add(Dept dept)</span><br><span class="line">  &#123;</span><br><span class="line">   return this.service.add(dept);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-microservicecloud-consumer-dept-feign工程修改主启动类"><a href="#5-microservicecloud-consumer-dept-feign工程修改主启动类" class="headerlink" title="5.microservicecloud-consumer-dept-feign工程修改主启动类"></a>5.microservicecloud-consumer-dept-feign工程修改主启动类</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package com.atguigu.springcloud;</span><br><span class="line"> </span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line">import org.springframework.cloud.netflix.feign.EnableFeignClients;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableEurekaClient</span><br><span class="line">@EnableFeignClients(basePackages= &#123;&quot;com.atguigu.springcloud&quot;&#125;)</span><br><span class="line">@ComponentScan(&quot;com.atguigu.springcloud&quot;)</span><br><span class="line">public class DeptConsumer80_Feign_App</span><br><span class="line">&#123;</span><br><span class="line">  public static void main(String[] args)</span><br><span class="line">  &#123;</span><br><span class="line">   SpringApplication.run(DeptConsumer80_Feign_App.class, args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-测试"><a href="#6-测试" class="headerlink" title="6.测试"></a>6.测试</h2><ul><li>启动3个eureka集群</li><li>启动3个部门微服务8001/8002/8003</li><li>启动Feign启动</li><li>访问<a href="http://localhost/consumer/dept/list">http://localhost/consumer/dept/list</a></li><li>Feign自带负载均衡配置项</li></ul><p>总结：<strong>Feign通过接口的方法调用Rest服务（之前是Ribbon+RestTemplate），<br>该请求发送给Eureka服务器（<a href="http://MICROSERVICECLOUD-DEPT/dept/list）,通过Feign直接找到服务接口，由于在进行服务调用的时候融合了Ribbon技术，所以也支持负载均衡作用。">http://MICROSERVICECLOUD-DEPT/dept/list）,通过Feign直接找到服务接口，由于在进行服务调用的时候融合了Ribbon技术，所以也支持负载均衡作用。</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud04：Ribbon负载均衡</title>
      <link href="/2018/12/09/SpringCloud/SpringCloud04%EF%BC%9ARibbon%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
      <url>/2018/12/09/SpringCloud/SpringCloud04%EF%BC%9ARibbon%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本系列对应的是尚硅谷周阳Spring Cloud的思维导图整理的笔记，用来方便自己后面的知识点回顾。分别以每个知识点作为一篇文章详细讲述。</p></blockquote><p>知识点传送门：<br><a href="https://github.com/HuiYouHua/SpringCloud">项目源码</a></p><ul><li><a href="https://www.jianshu.com/p/c4c8c19d9f23">SpringCloud01：微服务概述与SpringCloud</a></li><li><a href="https://www.jianshu.com/p/9bc7aa82a07d">SpringCloud02：Rest微服务构建案例工程模块</a></li><li><a href="https://www.jianshu.com/p/afaef0642065">SpringCloud03：Eureka服务注册与发现</a></li><li><a href="https://www.jianshu.com/p/952b4895b6ae">SpringCloud04：Ribbon负载均衡</a></li><li><a href="https://www.jianshu.com/p/b2ec4c74ff75">SpringCloud05：Feign负载均衡</a></li><li><a href="https://www.jianshu.com/p/1b4da963374d">SpringCloud06：Hystrix断路器</a></li><li><a href="https://www.jianshu.com/p/91364d0e535d">SpringCloud07：zuul路由网关</a></li><li><a href="https://www.jianshu.com/p/31f79b4cd84d">SpringCloud08：SpringCloud Config分布式配置中心</a></li></ul><h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><h2 id="1-是什么"><a href="#1-是什么" class="headerlink" title="1.是什么"></a>1.是什么</h2><p>Spring Cloud Ribbon是基于Netflix Ribbon实现的一套<strong>客户端       负载均衡的工具</strong>。</p><p>简单的说，Ribbon是Netflix发布的开源项目，主要功能是提供<strong>客户端的软件负载均衡算法</strong>，将Netflix的中间层服务连接在一起。Ribbon客户端组件提供一系列完善的配置项如连接超时，重试等。简单的说，就是在配置文件中列出Load Balancer（简称LB）后面所有的机器，Ribbon会自动的帮助你基于某种规则（如简单轮询，随机连接等）去连接这些机器。我们也很容易使用Ribbon实现自定义的负载均衡算法。</p><h2 id="2-能干嘛"><a href="#2-能干嘛" class="headerlink" title="2.能干嘛"></a>2.能干嘛</h2><p>LB，即负载均衡(Load Balance)，在微服务或分布式集群中经常用的一种应用。<br>负载均衡简单的说就是将用户的请求平摊的分配到多个服务上，从而达到系统的HA。<br>常见的负载均衡有软件Nginx，LVS，硬件 F5等。<br>相应的在中间件，例如：dubbo和SpringCloud中均给我们提供了负载均衡，SpringCloud的负载均衡算法可以自定义。 </p><p><strong>集中式LB</strong><br>即在服务的消费方和提供方之间使用独立的LB设施(可以是硬件，如F5, 也可以是软件，如nginx), 由该设施负责把访问请求通过某种策略转发至服务的提供方；</p><p><strong>进程内LB</strong><br>将LB逻辑集成到消费方，消费方从服务注册中心获知有哪些地址可用，然后自己再从这些地址中选择出一个合适的服务器。<br><strong>Ribbon就属于进程内LB</strong>，它只是一个类库，集成于消费方进程，消费方通过它来获取到服务提供方的地址。</p><p><a href="https://github.com/Netflix/ribbon/wiki/Getting-Started">Ribbon官网</a></p><h1 id="二、Ribbon配置初步"><a href="#二、Ribbon配置初步" class="headerlink" title="二、Ribbon配置初步"></a>二、Ribbon配置初步</h1><h2 id="1-修改microservicecloud-consumer-dept-80工程"><a href="#1-修改microservicecloud-consumer-dept-80工程" class="headerlink" title="1.修改microservicecloud-consumer-dept-80工程"></a>1.修改microservicecloud-consumer-dept-80工程</h2><h2 id="2-修改pom-xml文件"><a href="#2-修改pom-xml文件" class="headerlink" title="2.修改pom.xml文件"></a>2.修改pom.xml文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Ribbon相关 --&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-ribbon&lt;/artifactId&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h1 id="3-修改application-yml-追加eureka的服务注册地址"><a href="#3-修改application-yml-追加eureka的服务注册地址" class="headerlink" title="3.修改application.yml   追加eureka的服务注册地址"></a>3.修改application.yml   追加eureka的服务注册地址</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 80</span><br><span class="line"></span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    register-with-eureka: false</span><br><span class="line">    service-url: </span><br><span class="line">      defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span><br></pre></td></tr></table></figure><h2 id="4-对ConfigBean进行新注解-LoadBalanced-获得Rest时加入Ribbon的配置"><a href="#4-对ConfigBean进行新注解-LoadBalanced-获得Rest时加入Ribbon的配置" class="headerlink" title="4.对ConfigBean进行新注解@LoadBalanced    获得Rest时加入Ribbon的配置"></a>4.对ConfigBean进行新注解@LoadBalanced    获得Rest时加入Ribbon的配置</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package com.atguigu.springcloud.cfgbeans;</span><br><span class="line"> </span><br><span class="line">import org.springframework.cloud.client.loadbalancer.LoadBalanced;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.web.client.RestTemplate;</span><br><span class="line"> </span><br><span class="line">@Configuration</span><br><span class="line">public class ConfigBean</span><br><span class="line">&#123;</span><br><span class="line">  @Bean</span><br><span class="line">  @LoadBalanced</span><br><span class="line">  public RestTemplate getRestTemplate()</span><br><span class="line">  &#123;</span><br><span class="line">   return new RestTemplate();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-主启动类DeptConsumer80-App添加-EnableEurekaClient"><a href="#5-主启动类DeptConsumer80-App添加-EnableEurekaClient" class="headerlink" title="5.主启动类DeptConsumer80_App添加@EnableEurekaClient"></a>5.主启动类DeptConsumer80_App添加@EnableEurekaClient</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package com.atguigu.springcloud;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableEurekaClient</span><br><span class="line">public class DeptConsumer80_App</span><br><span class="line">&#123;</span><br><span class="line">  public static void main(String[] args)</span><br><span class="line">  &#123;</span><br><span class="line">   SpringApplication.run(DeptConsumer80_App.class, args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-修改DeptController-Consumer客户端访问类"><a href="#6-修改DeptController-Consumer客户端访问类" class="headerlink" title="6.修改DeptController_Consumer客户端访问类"></a>6.修改DeptController_Consumer客户端访问类</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">package com.atguigu.springcloud.controller;</span><br><span class="line"> </span><br><span class="line">import java.util.List;</span><br><span class="line"> </span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line">import org.springframework.web.client.RestTemplate;</span><br><span class="line"> </span><br><span class="line">import com.atguigu.springcloud.entities.Dept;</span><br><span class="line"> </span><br><span class="line">@RestController</span><br><span class="line">public class DeptController_Consumer</span><br><span class="line">&#123;</span><br><span class="line">  //private static final String REST_URL_PREFIX = &quot;http://localhost:8001&quot;;</span><br><span class="line">  private static final String REST_URL_PREFIX = &quot;http://MICROSERVICECLOUD-DEPT&quot;;</span><br><span class="line">  </span><br><span class="line">  @Autowired</span><br><span class="line">  private RestTemplate restTemplate;</span><br><span class="line">  </span><br><span class="line">  @RequestMapping(value=&quot;/consumer/dept/add&quot;)</span><br><span class="line">  public boolean add(Dept dept)</span><br><span class="line">  &#123;</span><br><span class="line">   return restTemplate.postForObject(REST_URL_PREFIX+&quot;/dept/add&quot;, dept, Boolean.class);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  @RequestMapping(value=&quot;/consumer/dept/get/&#123;id&#125;&quot;)</span><br><span class="line">  public Dept get(@PathVariable(&quot;id&quot;) Long id)</span><br><span class="line">  &#123;</span><br><span class="line">   return restTemplate.getForObject(REST_URL_PREFIX+&quot;/dept/get/&quot;+id, Dept.class);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">  @RequestMapping(value=&quot;/consumer/dept/list&quot;)</span><br><span class="line">  public List&lt;Dept&gt; list()</span><br><span class="line">  &#123;</span><br><span class="line">   return restTemplate.getForObject(REST_URL_PREFIX+&quot;/dept/list&quot;, List.class);</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-先启动3个eureka集群后，再启动microservicecloud-provider-dept-8001并注册进eureka"><a href="#7-先启动3个eureka集群后，再启动microservicecloud-provider-dept-8001并注册进eureka" class="headerlink" title="7.先启动3个eureka集群后，再启动microservicecloud-provider-dept-8001并注册进eureka"></a>7.先启动3个eureka集群后，再启动microservicecloud-provider-dept-8001并注册进eureka</h2><h2 id="8-启动microservicecloud-consumer-dept-80"><a href="#8-启动microservicecloud-consumer-dept-80" class="headerlink" title="8.启动microservicecloud-consumer-dept-80"></a>8.启动microservicecloud-consumer-dept-80</h2><h2 id="9-测试"><a href="#9-测试" class="headerlink" title="9.测试"></a>9.测试</h2><p>访问<a href="http://localhost/consumer/dept/get/1">http://localhost/consumer/dept/get/1</a></p><p>小总结：<strong>Ribbon和Eureka整合后Consumer可以直接调用服务而不用再关心地址和端口号</strong></p><h1 id="三、Ribbon负载均衡"><a href="#三、Ribbon负载均衡" class="headerlink" title="三、Ribbon负载均衡"></a>三、Ribbon负载均衡</h1><h2 id="1-架构说明"><a href="#1-架构说明" class="headerlink" title="1.架构说明"></a>1.架构说明</h2><p>Ribbon在工作时分成两步<br>第一步先选择 EurekaServer ,它优先选择在同一个区域内负载较少的server.<br>第二步再根据用户指定的策略，在从server取到的服务注册列表中选择一个地址。<br>其中Ribbon提供了多种策略：比如轮询、随机和根据响应时间加权。</p><h2 id="2-参考microservicecloud-provider-dept-8001，新建两份，分别命名为8002，8003"><a href="#2-参考microservicecloud-provider-dept-8001，新建两份，分别命名为8002，8003" class="headerlink" title="2.参考microservicecloud-provider-dept-8001，新建两份，分别命名为8002，8003"></a>2.参考microservicecloud-provider-dept-8001，新建两份，分别命名为8002，8003</h2><h2 id="3-新建8002-8003数据库，各自微服务分别连各自的数据库"><a href="#3-新建8002-8003数据库，各自微服务分别连各自的数据库" class="headerlink" title="3.新建8002/8003数据库，各自微服务分别连各自的数据库"></a>3.新建8002/8003数据库，各自微服务分别连各自的数据库</h2><p><strong>8002SQL脚本</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">DROP DATABASE IF EXISTS cloudDB02;</span><br><span class="line"> </span><br><span class="line">CREATE DATABASE cloudDB02 CHARACTER SET UTF8;</span><br><span class="line"></span><br><span class="line">USE cloudDB02;</span><br><span class="line"></span><br><span class="line">CREATE TABLE dept</span><br><span class="line">(</span><br><span class="line">  deptno BIGINT NOT NULL PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">  dname VARCHAR(60),</span><br><span class="line">  db_source   VARCHAR(60)</span><br><span class="line">);</span><br><span class="line"> </span><br><span class="line">INSERT INTO dept(dname,db_source) VALUES(&#x27;开发部&#x27;,DATABASE());</span><br><span class="line">INSERT INTO dept(dname,db_source) VALUES(&#x27;人事部&#x27;,DATABASE());</span><br><span class="line">INSERT INTO dept(dname,db_source) VALUES(&#x27;财务部&#x27;,DATABASE());</span><br><span class="line">INSERT INTO dept(dname,db_source) VALUES(&#x27;市场部&#x27;,DATABASE());</span><br><span class="line">INSERT INTO dept(dname,db_source) VALUES(&#x27;运维部&#x27;,DATABASE());</span><br><span class="line"> </span><br><span class="line">SELECT * FROM dept;</span><br></pre></td></tr></table></figure><br><strong>8003SQL脚本</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">DROP DATABASE IF EXISTS cloudDB03;</span><br><span class="line"></span><br><span class="line">CREATE DATABASE cloudDB03 CHARACTER SET UTF8;</span><br><span class="line"></span><br><span class="line">USE cloudDB03;</span><br><span class="line"></span><br><span class="line">CREATE TABLE dept</span><br><span class="line">(</span><br><span class="line">  deptno BIGINT NOT NULL PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">  dname VARCHAR(60),</span><br><span class="line">  db_source   VARCHAR(60)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO dept(dname,db_source) VALUES(&#x27;开发部&#x27;,DATABASE());</span><br><span class="line">INSERT INTO dept(dname,db_source) VALUES(&#x27;人事部&#x27;,DATABASE());</span><br><span class="line">INSERT INTO dept(dname,db_source) VALUES(&#x27;财务部&#x27;,DATABASE());</span><br><span class="line">INSERT INTO dept(dname,db_source) VALUES(&#x27;市场部&#x27;,DATABASE());</span><br><span class="line">INSERT INTO dept(dname,db_source) VALUES(&#x27;运维部&#x27;,DATABASE());</span><br><span class="line"></span><br><span class="line">SELECT * FROM dept;</span><br></pre></td></tr></table></figure></p><h2 id="4-修改8002-8003各自YML"><a href="#4-修改8002-8003各自YML" class="headerlink" title="4.修改8002/8003各自YML"></a>4.修改8002/8003各自YML</h2><p><strong>8002YML</strong></p><p><strong>8003YML</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud03：Eureka服务注册与发现</title>
      <link href="/2018/12/08/SpringCloud/SpringCloud03%EF%BC%9AEureka%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/"/>
      <url>/2018/12/08/SpringCloud/SpringCloud03%EF%BC%9AEureka%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本系列对应的是尚硅谷周阳Spring Cloud的思维导图整理的笔记，用来方便自己后面的知识点回顾。分别以每个知识点作为一篇文章详细讲述。</p></blockquote><p>知识点传送门：<br><a href="https://github.com/HuiYouHua/SpringCloud">项目源码</a></p><ul><li><a href="https://www.jianshu.com/p/c4c8c19d9f23">SpringCloud01：微服务概述与SpringCloud</a></li><li><a href="https://www.jianshu.com/p/9bc7aa82a07d">SpringCloud02：Rest微服务构建案例工程模块</a></li><li><a href="https://www.jianshu.com/p/afaef0642065">SpringCloud03：Eureka服务注册与发现</a></li><li><a href="https://www.jianshu.com/p/952b4895b6ae">SpringCloud04：Ribbon负载均衡</a></li><li><a href="https://www.jianshu.com/p/b2ec4c74ff75">SpringCloud05：Feign负载均衡</a></li><li><a href="https://www.jianshu.com/p/1b4da963374d">SpringCloud06：Hystrix断路器</a></li><li><a href="https://www.jianshu.com/p/91364d0e535d">SpringCloud07：zuul路由网关</a></li><li><a href="https://www.jianshu.com/p/31f79b4cd84d">SpringCloud08：SpringCloud Config分布式配置中心</a></li></ul><h1 id="一、Eureka是什么"><a href="#一、Eureka是什么" class="headerlink" title="一、Eureka是什么"></a>一、Eureka是什么</h1><p>Eureka是Netflix的一个子模块，也是核心模块之一。Eureka是一个基于REST的服务，用于定位服务，以实现云端中间层服务发现和故障转移。</p><p>服务注册与发现对于微服务架构来说是非常重要的，有了服务发现与注册，只需要使用服务的标识符，就可以访问到服务，而不需要修改服务调用的配置文件了。功能类似于dubbo的注册中心，比如Zookeeper。</p><h1 id="二、原理讲解"><a href="#二、原理讲解" class="headerlink" title="二、原理讲解"></a>二、原理讲解</h1><h2 id="1-Eureka的基本架构"><a href="#1-Eureka的基本架构" class="headerlink" title="1.Eureka的基本架构"></a>1.Eureka的基本架构</h2><p>Spring Cloud 封装了 Netflix 公司开发的 Eureka 模块来<strong>实现服务注册和发现(请对比Zookeeper)</strong>。</p><p>Eureka 采用了 C-S 的设计架构。Eureka Server 作为服务注册功能的服务器，它是服务注册中心。</p><p>而系统中的其他微服务，使用 Eureka 的客户端连接到 Eureka Server并维持心跳连接。这样系统的维护人员就可以通过 Eureka Server 来监控系统中各个微服务是否正常运行。SpringCloud 的一些其他模块（比如Zuul）就可以通过 Eureka Server 来发现系统中的其他微服务，并执行相关的逻辑。<br>请注意和Dubbo的架构对比</p><p>Eureka包含两个组件：<strong>Eureka Server和Eureka Client</strong><br>Eureka Server提供服务注册服务<br>各个节点启动后，会在EurekaServer中进行注册，这样EurekaServer中的服务注册表中将会存储所有可用服务节点的信息，服务节点的信息可以在界面中直观的看到</p><p>EurekaClient是一个Java客户端，用于简化Eureka Server的交互，客户端同时也具备一个内置的、使用轮询(round-robin)负载算法的负载均衡器。在应用启动后，将会向Eureka Server发送心跳(默认周期为30秒)。如果Eureka Server在多个心跳周期内没有接收到某个节点的心跳，EurekaServer将会从服务注册表中把这个服务节点移除（默认90秒）</p><h2 id="2-三大角色"><a href="#2-三大角色" class="headerlink" title="2.三大角色"></a>2.三大角色</h2><ul><li>Eureka Server 提供服务注册和发现</li><li>Service Provider服务提供方将自身服务注册到Eureka，从而使服务消费方能够找到</li><li>Service Consumer服务消费方从Eureka获取注册服务列表，从而能够消费服务</li></ul><h1 id="三、构建步骤"><a href="#三、构建步骤" class="headerlink" title="三、构建步骤"></a>三、构建步骤</h1><h2 id="1-microservicecloud-eureka-7001-eureka服务注册中心Module"><a href="#1-microservicecloud-eureka-7001-eureka服务注册中心Module" class="headerlink" title="1.microservicecloud-eureka-7001 eureka服务注册中心Module"></a>1.microservicecloud-eureka-7001 eureka服务注册中心Module</h2><p>1）新建microservicecloud-eureka-7001<br>2）修改POM<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">  xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">  &lt;parent&gt;</span><br><span class="line">   &lt;groupId&gt;com.atguigu.springcloud&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;microservicecloud&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">  &lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">  &lt;artifactId&gt;microservicecloud-eureka-7001&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">  &lt;dependencies&gt;</span><br><span class="line">   &lt;!--eureka-server服务端 --&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-cloud-starter-eureka-server&lt;/artifactId&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">   &lt;!-- 修改后立即生效，热部署 --&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;springloaded&lt;/artifactId&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">  &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><br>3）新建YML文件<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server: </span><br><span class="line">  port: 7001</span><br><span class="line"> </span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    hostname: localhost #eureka服务端的实例名称</span><br><span class="line">  client:</span><br><span class="line">    register-with-eureka: false #false表示不向注册中心注册自己。</span><br><span class="line">    fetch-registry: false #false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/        #设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址。</span><br></pre></td></tr></table></figure><br>4）EurekaServer7001_App主启动类<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package com.atguigu.springcloud;</span><br><span class="line"> </span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"> </span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableEurekaServer//EurekaServer服务器端启动类,接受其它微服务注册进来</span><br><span class="line">public class EurekaServer7001_App</span><br><span class="line">&#123;</span><br><span class="line">  public static void main(String[] args)</span><br><span class="line">  &#123;</span><br><span class="line">   SpringApplication.run(EurekaServer7001_App.class, args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>5）测试</p><ul><li><a href="http://localhost:7001/">http://localhost:7001/</a><br>结果页：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">No application available 没有服务被发现 O(∩_∩)O</span><br><span class="line">因为没有注册服务进来当然不可能有服务被发现</span><br></pre></td></tr></table></figure><h2 id="2-microservicecloud-provider-dept-8001将已有的部门微服务注册进eureka服务中心"><a href="#2-microservicecloud-provider-dept-8001将已有的部门微服务注册进eureka服务中心" class="headerlink" title="2.microservicecloud-provider-dept-8001将已有的部门微服务注册进eureka服务中心"></a>2.microservicecloud-provider-dept-8001将已有的部门微服务注册进eureka服务中心</h2>1）修改microservicecloud-provider-dept-8001<br>2）修改POM<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">  xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">  &lt;parent&gt;</span><br><span class="line">   &lt;groupId&gt;com.atguigu.springcloud&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;microservicecloud&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">  &lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">  &lt;artifactId&gt;microservicecloud-provider-dept-8001&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">  &lt;dependencies&gt;</span><br><span class="line">   &lt;!-- 引入自己定义的api通用包，可以使用Dept部门Entity --&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;com.atguigu.springcloud&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;microservicecloud-api&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;$&#123;project.version&#125;&lt;/version&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">   &lt;!-- 将微服务provider侧注册进eureka --&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;druid&lt;/artifactId&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;logback-core&lt;/artifactId&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-boot-starter-jetty&lt;/artifactId&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">   &lt;!-- 修改后立即生效，热部署 --&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;springloaded&lt;/artifactId&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">  &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>3）修改YML<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8001</span><br><span class="line">  </span><br><span class="line">mybatis:</span><br><span class="line">  config-location: classpath:mybatis/mybatis.cfg.xml        # mybatis配置文件所在路径</span><br><span class="line">  type-aliases-package: com.atguigu.springcloud.entities    # 所有Entity别名类所在包</span><br><span class="line">  mapper-locations:</span><br><span class="line">  - classpath:mybatis/mapper/**/*.xml                       # mapper映射文件</span><br><span class="line">    </span><br><span class="line">spring:</span><br><span class="line">   application:</span><br><span class="line">    name: microservicecloud-dept </span><br><span class="line">   datasource:</span><br><span class="line">    type: com.alibaba.druid.pool.DruidDataSource            # 当前数据源操作类型</span><br><span class="line">    driver-class-name: org.gjt.mm.mysql.Driver              # mysql驱动包</span><br><span class="line">    url: jdbc:mysql://localhost:3306/cloudDB01              # 数据库名称</span><br><span class="line">    username: root</span><br><span class="line">    password: 123456</span><br><span class="line">    dbcp2:</span><br><span class="line">      min-idle: 5                                           # 数据库连接池的最小维持连接数</span><br><span class="line">      initial-size: 5                                       # 初始化连接数</span><br><span class="line">      max-total: 5                                          # 最大连接数</span><br><span class="line">      max-wait-millis: 200                                  # 等待连接获取的最大超时时间</span><br><span class="line">      </span><br><span class="line">eureka:</span><br><span class="line">  client: #客户端注册进eureka服务列表内</span><br><span class="line">    service-url: </span><br><span class="line">      defaultZone: http://localhost:7001/eureka      </span><br></pre></td></tr></table></figure>4）修改DeptProvider8001_App主启动类<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package com.atguigu.springcloud;</span><br><span class="line"> </span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"> </span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableEurekaClient //本服务启动后会自动注册进eureka服务中</span><br><span class="line">public class DeptProvider8001_App</span><br><span class="line">&#123;</span><br><span class="line">  public static void main(String[] args)</span><br><span class="line">  &#123;</span><br><span class="line">   SpringApplication.run(DeptProvider8001_App.class, args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>5）测试</p><ul><li>先要启动EurekaServer</li><li>访问<a href="http://localhost:7001/">http://localhost:7001/</a></li></ul><h2 id="3-actuator与注册微服务信息完善"><a href="#3-actuator与注册微服务信息完善" class="headerlink" title="3.actuator与注册微服务信息完善"></a>3.actuator与注册微服务信息完善</h2><h3 id="1）主机名称-服务名称修改"><a href="#1）主机名称-服务名称修改" class="headerlink" title="1）主机名称:服务名称修改"></a>1）主机名称:服务名称修改</h3><p>修改YML文件<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">eureka:</span><br><span class="line">  client: #客户端注册进eureka服务列表内</span><br><span class="line">    service-url: </span><br><span class="line">      defaultZone: http://localhost:7001/eureka</span><br><span class="line">  instance:</span><br><span class="line">    instance-id: microservicecloud-dept8001</span><br></pre></td></tr></table></figure></p><h3 id="2）访问信息有IP信息提示"><a href="#2）访问信息有IP信息提示" class="headerlink" title="2）访问信息有IP信息提示"></a>2）访问信息有IP信息提示</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">eureka:</span><br><span class="line">  client: #客户端注册进eureka服务列表内</span><br><span class="line">    service-url: </span><br><span class="line">      defaultZone: http://localhost:7001/eureka</span><br><span class="line">  instance:</span><br><span class="line">    instance-id: microservicecloud-dept8001   #自定义服务名称信息</span><br><span class="line">    prefer-ip-address: true     #访问路径可以显示IP地址</span><br></pre></td></tr></table></figure><h3 id="3）微服务info内容详细信息"><a href="#3）微服务info内容详细信息" class="headerlink" title="3）微服务info内容详细信息"></a>3）微服务info内容详细信息</h3><p>问题：超链接点击服务报告ErrorPage<br>（1）修改microservicecloud-provider-dept-8001 POM文件<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><br>（2）总的父工程microservicecloud修改pom.xml添加构建build信息<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">   &lt;finalName&gt;microservicecloud&lt;/finalName&gt;</span><br><span class="line">   &lt;resources&gt;</span><br><span class="line">     &lt;resource&gt;</span><br><span class="line">       &lt;directory&gt;src/main/resources&lt;/directory&gt;</span><br><span class="line">       &lt;filtering&gt;true&lt;/filtering&gt;</span><br><span class="line">     &lt;/resource&gt;</span><br><span class="line">   &lt;/resources&gt;</span><br><span class="line">   &lt;plugins&gt;</span><br><span class="line">     &lt;plugin&gt;</span><br><span class="line">       &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;</span><br><span class="line">       &lt;configuration&gt;</span><br><span class="line">         &lt;delimiters&gt;</span><br><span class="line">          &lt;delimit&gt;$&lt;/delimit&gt;</span><br><span class="line">         &lt;/delimiters&gt;</span><br><span class="line">       &lt;/configuration&gt;</span><br><span class="line">     &lt;/plugin&gt;</span><br><span class="line">   &lt;/plugins&gt;</span><br><span class="line">  &lt;/build&gt;</span><br></pre></td></tr></table></figure><br>（4）修改microservicecloud-provider-dept-8001<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">info:</span><br><span class="line">  app.name: atguigu-microservicecloud</span><br><span class="line">  company.name: www.atguigu.com</span><br><span class="line">  build.artifactId: $project.artifactId$</span><br><span class="line">  build.version: $project.version$</span><br></pre></td></tr></table></figure></p><h2 id="4-eureka自我保护"><a href="#4-eureka自我保护" class="headerlink" title="4.eureka自我保护"></a>4.eureka自我保护</h2><p>1）故障现象</p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220520002252582.png" alt="3.png"></p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220520002256637.png" alt="4.png"></p><p>2）自我保护<br>什么是自我保护模式？</p><p>默认情况下，如果EurekaServer在一定时间内没有接收到某个微服务实例的心跳，EurekaServer将会注销该实例（默认90秒）。但是当网络分区故障发生时，微服务与EurekaServer之间无法正常通信，以上行为可能变得非常危险了——因为微服务本身其实是健康的，此时本不应该注销这个微服务。Eureka通过“自我保护模式”来解决这个问题——当EurekaServer节点在短时间内丢失过多客户端时（可能发生了网络分区故障），那么这个节点就会进入自我保护模式。一旦进入该模式，EurekaServer就会保护服务注册表中的信息，不再删除服务注册表中的数据（也就是不会注销任何微服务）。当网络故障恢复后，该Eureka Server节点会自动退出自我保护模式。</p><p>在自我保护模式中，Eureka Server会保护服务注册表中的信息，不再注销任何服务实例。当它收到的心跳数重新恢复到阈值以上时，该Eureka Server节点就会自动退出自我保护模式。它的设计哲学就是宁可保留错误的服务注册信息，也不盲目注销任何可能健康的服务实例。一句话讲解：好死不如赖活着</p><p>综上，自我保护模式是一种应对网络异常的安全保护措施。它的架构哲学是宁可同时保留所有微服务（健康的微服务和不健康的微服务都会保留），也不盲目注销任何健康的微服务。使用自我保护模式，可以让Eureka集群更加的健壮、稳定。</p><p>在Spring Cloud中，可以使用eureka.server.enable-self-preservation = false 禁用自我保护模式。<br><strong>一句话：某时刻某一个微服务不可用了，eureka不会立刻清理，依旧会对该微服务的信息进行保存</strong></p><h1 id="四、集群配置"><a href="#四、集群配置" class="headerlink" title="四、集群配置"></a>四、集群配置</h1><p>1.新建microservicecloud-eureka-7002/microservicecloud-eureka-7003<br>2.按照7001为模板粘贴POM<br>3.修改7002和7003的主启动类<br>4.修改映射配置</p><ul><li>找到C:\Windows\System32\drivers\etc路径下的hosts文件</li><li>修改映射配置添加进hosts文件<ul><li>127.0.0.1  eureka7001.com</li><li>127.0.0.1  eureka7002.com</li><li>127.0.0.1  eureka703.com</li></ul></li></ul><p>5.3台eureka服务器的yml配置</p><ul><li>7001<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server: </span><br><span class="line">  port: 7001</span><br><span class="line"> </span><br><span class="line">eureka: </span><br><span class="line">  instance:</span><br><span class="line">    hostname: eureka7001.com #eureka服务端的实例名称</span><br><span class="line">  client: </span><br><span class="line">    register-with-eureka: false     #false表示不向注册中心注册自己。</span><br><span class="line">    fetch-registry: false     #false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span><br><span class="line">    service-url: </span><br><span class="line">      #单机 defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/       #设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址（单机）。</span><br><span class="line">      defaultZone: http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span><br></pre></td></tr></table></figure></li><li>7002<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server: </span><br><span class="line">  port: 7002</span><br><span class="line"></span><br><span class="line">eureka: </span><br><span class="line">  instance:</span><br><span class="line">    hostname: eureka7002.com #eureka服务端的实例名称</span><br><span class="line">  client: </span><br><span class="line">    register-with-eureka: false     #false表示不向注册中心注册自己。</span><br><span class="line">    fetch-registry: false     #false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span><br><span class="line">    service-url: </span><br><span class="line">      #defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/       #设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址。</span><br><span class="line">      defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7003.com:7003/eureka/</span><br></pre></td></tr></table></figure></li><li>7003<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server: </span><br><span class="line">  port: 7003</span><br><span class="line"></span><br><span class="line">eureka: </span><br><span class="line">  instance:</span><br><span class="line">    hostname: eureka7003.com #eureka服务端的实例名称</span><br><span class="line">  client: </span><br><span class="line">    register-with-eureka: false     #false表示不向注册中心注册自己。</span><br><span class="line">    fetch-registry: false     #false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span><br><span class="line">    service-url: </span><br><span class="line">      #defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/       #设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址。</span><br><span class="line">      defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/</span><br></pre></td></tr></table></figure>6.microservicecloud-provider-dept-8001微服务发布到上面3台eureka集群配置中<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8001</span><br><span class="line">  </span><br><span class="line">mybatis:</span><br><span class="line">  config-location: classpath:mybatis/mybatis.cfg.xml  #mybatis所在路径</span><br><span class="line">  type-aliases-package: com.atguigu.springcloud.entities #entity别名类</span><br><span class="line">  mapper-locations:</span><br><span class="line">  - classpath:mybatis/mapper/**/*.xml #mapper映射文件</span><br><span class="line">    </span><br><span class="line">spring:</span><br><span class="line">   application:</span><br><span class="line">    name: microservicecloud-dept </span><br><span class="line">   datasource:</span><br><span class="line">    type: com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">    driver-class-name: org.gjt.mm.mysql.Driver</span><br><span class="line">    url: jdbc:mysql://localhost:3306/cloudDB01</span><br><span class="line">    username: root</span><br><span class="line">    password: 123456</span><br><span class="line">    dbcp2:</span><br><span class="line">      min-idle: 5</span><br><span class="line">      initial-size: 5</span><br><span class="line">      max-total: 5</span><br><span class="line">      max-wait-millis: 200</span><br><span class="line">      </span><br><span class="line">eureka:</span><br><span class="line">  client: #客户端注册进eureka服务列表内</span><br><span class="line">    service-url: </span><br><span class="line">      defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span><br><span class="line">  instance:</span><br><span class="line">    instance-id: microservicecloud-dept8001   #自定义服务名称信息</span><br><span class="line">    prefer-ip-address: true     #访问路径可以显示IP地址</span><br><span class="line">      </span><br><span class="line">info:</span><br><span class="line">  app.name: atguigu-microservicecloud</span><br><span class="line">  company.name: www.atguigu.com</span><br><span class="line">  build.artifactId: $project.artifactId$</span><br><span class="line">  build.version: $project.version$</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud02：Rest微服务构建案例工程模块</title>
      <link href="/2018/12/08/SpringCloud/SpringCloud02%EF%BC%9ARest%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%84%E5%BB%BA%E6%A1%88%E4%BE%8B%E5%B7%A5%E7%A8%8B%E6%A8%A1%E5%9D%97/"/>
      <url>/2018/12/08/SpringCloud/SpringCloud02%EF%BC%9ARest%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%84%E5%BB%BA%E6%A1%88%E4%BE%8B%E5%B7%A5%E7%A8%8B%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本系列对应的是尚硅谷周阳Spring Cloud的思维导图整理的笔记，用来方便自己后面的知识点回顾。分别以每个知识点作为一篇文章详细讲述。</p></blockquote><p>知识点传送门：<br><a href="https://github.com/HuiYouHua/SpringCloud">项目源码</a></p><ul><li><a href="https://www.jianshu.com/p/c4c8c19d9f23">SpringCloud01：微服务概述与SpringCloud</a></li><li><a href="https://www.jianshu.com/p/9bc7aa82a07d">SpringCloud02：Rest微服务构建案例工程模块</a></li><li><a href="https://www.jianshu.com/p/afaef0642065">SpringCloud03：Eureka服务注册与发现</a></li><li><a href="https://www.jianshu.com/p/952b4895b6ae">SpringCloud04：Ribbon负载均衡</a></li><li><a href="https://www.jianshu.com/p/b2ec4c74ff75">SpringCloud05：Feign负载均衡</a></li><li><a href="https://www.jianshu.com/p/1b4da963374d">SpringCloud06：Hystrix断路器</a></li><li><a href="https://www.jianshu.com/p/91364d0e535d">SpringCloud07：zuul路由网关</a></li><li><a href="https://www.jianshu.com/p/31f79b4cd84d">SpringCloud08：SpringCloud Config分布式配置中心</a></li></ul><h1 id="一、总体介绍"><a href="#一、总体介绍" class="headerlink" title="一、总体介绍"></a>一、总体介绍</h1><p>这里以Dept部门模块做一个微服务通用案例Consumer消费者（Client）通过REST调用Provider提供者（Server）提供的服务</p><h2 id="1-Maven的分包分模块架构复习"><a href="#1-Maven的分包分模块架构复习" class="headerlink" title="1.Maven的分包分模块架构复习"></a>1.Maven的分包分模块架构复习</h2><p>一个简单的Maven模块结构是这样的：<br>—— app-parent      一个父项目(app-parent)聚合很多子项目(app-util,app-dao,app-service,app-web)<br>      |—— pom.xml (pom)<br>      |<br>      |———— app-util<br>      | |———— pom.xml (jar)<br>      |<br>      |———— app-dao<br>      | |———— pom.xml (jar)<br>      |<br>      |———— app-service<br>      | |———— pom.xml (jar)<br>      |<br>      |———— app-web<br>        |———— pom.xml (war) </p><p><strong>一个Project带着多个Module子模块</strong><br>MicroServiceCloud父工程（Project）下带着3个子模块（Module）</p><ul><li>microservicecloud-api 封装的整体Entity/接口/公共配置等</li><li>microservicecloud-provider-dept-8001 微服务落地的服务提供者</li><li>microservicecloud-consumer-dept-80 微服务调用的客户端使用</li></ul><h1 id="二、构建步骤"><a href="#二、构建步骤" class="headerlink" title="二、构建步骤"></a>二、构建步骤</h1><h2 id="1-microservicecloud整体父工程Project"><a href="#1-microservicecloud整体父工程Project" class="headerlink" title="1.microservicecloud整体父工程Project"></a>1.microservicecloud整体父工程Project</h2><p>1）新建父工程microservicecloud，切记是Packageing是pom模式<br>2）主要是定义POM文件，将后续各个子模块公用的jar包等统一提出来，类似一个抽象父类<br>3）POM文件<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">  xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">  &lt;groupId&gt;com.atguigu.springcloud&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;microservicecloud&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">  &lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">  &lt;properties&gt;</span><br><span class="line">   &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">   &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;</span><br><span class="line">   &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;</span><br><span class="line">   &lt;junit.version&gt;4.12&lt;/junit.version&gt;</span><br><span class="line">   &lt;log4j.version&gt;1.2.17&lt;/log4j.version&gt;</span><br><span class="line">   &lt;lombok.version&gt;1.16.18&lt;/lombok.version&gt;</span><br><span class="line">  &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">  &lt;dependencyManagement&gt;</span><br><span class="line">   &lt;dependencies&gt;</span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">       &lt;version&gt;Dalston.SR1&lt;/version&gt;</span><br><span class="line">       &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">       &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">     &lt;/dependency&gt;</span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;</span><br><span class="line">       &lt;version&gt;1.5.9.RELEASE&lt;/version&gt;</span><br><span class="line">       &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">       &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">     &lt;/dependency&gt;</span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">       &lt;version&gt;5.0.4&lt;/version&gt;</span><br><span class="line">     &lt;/dependency&gt;</span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;druid&lt;/artifactId&gt;</span><br><span class="line">       &lt;version&gt;1.0.31&lt;/version&gt;</span><br><span class="line">     &lt;/dependency&gt;</span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">       &lt;version&gt;1.3.0&lt;/version&gt;</span><br><span class="line">     &lt;/dependency&gt;</span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;logback-core&lt;/artifactId&gt;</span><br><span class="line">       &lt;version&gt;1.2.3&lt;/version&gt;</span><br><span class="line">     &lt;/dependency&gt;</span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">       &lt;version&gt;$&#123;junit.version&#125;&lt;/version&gt;</span><br><span class="line">       &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">     &lt;/dependency&gt;</span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class="line">       &lt;version&gt;$&#123;log4j.version&#125;&lt;/version&gt;</span><br><span class="line">     &lt;/dependency&gt;</span><br><span class="line">   &lt;/dependencies&gt;</span><br><span class="line">  &lt;/dependencyManagement&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure></p><h2 id="2-microservicecloud-api公共子模块Module"><a href="#2-microservicecloud-api公共子模块Module" class="headerlink" title="2.microservicecloud-api公共子模块Module"></a>2.microservicecloud-api公共子模块Module</h2><p>1）新建microservicecloud-api<br>      创建完成后请回到父工程查看pom文件变化<br>2）修改POM文件<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">  xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">  &lt;parent&gt;&lt;!-- 子类里面显示声明才能有明确的继承表现，无意外就是父类的默认版本否则自己定义 --&gt;</span><br><span class="line">   &lt;groupId&gt;com.atguigu.springcloud&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;microservicecloud&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">  &lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">  &lt;artifactId&gt;microservicecloud-api&lt;/artifactId&gt;&lt;!-- 当前Module我自己叫什么名字 --&gt;</span><br><span class="line"></span><br><span class="line">  &lt;dependencies&gt;&lt;!-- 当前Module需要用到的jar包，按自己需求添加，如果父类已经包含了，可以不用写版本号 --&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">  &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><br>3）新建部门Entity且配合lombok使用<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">package com.atguigu.springcloud.entities;</span><br><span class="line"> </span><br><span class="line">import java.io.Serializable;</span><br><span class="line"> </span><br><span class="line">import lombok.Data;</span><br><span class="line">import lombok.NoArgsConstructor;</span><br><span class="line">import lombok.experimental.Accessors;</span><br><span class="line"> </span><br><span class="line">@SuppressWarnings(&quot;serial&quot;)</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">@Data</span><br><span class="line">@Accessors(chain=true)</span><br><span class="line">public class Dept implements Serializable //必须序列化</span><br><span class="line">&#123;</span><br><span class="line">  private Long  deptno;   //主键</span><br><span class="line">  private String  dname;   //部门名称</span><br><span class="line">  private String  db_source;//来自那个数据库，因为微服务架构可以一个服务对应一个数据库，同一个信息被存储到不同数据库</span><br><span class="line">  </span><br><span class="line">  public Dept(String dname)</span><br><span class="line">  &#123;</span><br><span class="line">   super();</span><br><span class="line">   this.dname = dname;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>4）mvn clean install后给其它模块引用，达到通用目的。<br>也即需要用到部门实体的话，不用每个工程都定义一份，直接引用本模块即可。</p><h2 id="3-microservicecloud-provider-dept-8001-部门微服务提供者Module"><a href="#3-microservicecloud-provider-dept-8001-部门微服务提供者Module" class="headerlink" title="3.microservicecloud-provider-dept-8001  部门微服务提供者Module"></a>3.microservicecloud-provider-dept-8001  部门微服务提供者Module</h2><p>1）新建microservicecloud-provider-dept-8001<br>      创建完成后请回到父工程查看pom文件变化<br>2）修改POM文件<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">  xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">  &lt;parent&gt;</span><br><span class="line">   &lt;groupId&gt;com.atguigu.springcloud&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;microservicecloud&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">  &lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">  &lt;artifactId&gt;microservicecloud-provider-dept-8001&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">  &lt;dependencies&gt;</span><br><span class="line">   &lt;dependency&gt;&lt;!-- 引入自己定义的api通用包，可以使用Dept部门Entity --&gt;</span><br><span class="line">     &lt;groupId&gt;com.atguigu.springcloud&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;microservicecloud-api&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;$&#123;project.version&#125;&lt;/version&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;druid&lt;/artifactId&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;logback-core&lt;/artifactId&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-boot-starter-jetty&lt;/artifactId&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">   &lt;!-- 修改后立即生效，热部署 --&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;springloaded&lt;/artifactId&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">  &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><br>3）创建YML文件<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8001</span><br><span class="line">  </span><br><span class="line">mybatis:</span><br><span class="line">  config-location: classpath:mybatis/mybatis.cfg.xml        # mybatis配置文件所在路径</span><br><span class="line">  type-aliases-package: com.atguigu.springcloud.entities    # 所有Entity别名类所在包</span><br><span class="line">  mapper-locations:</span><br><span class="line">  - classpath:mybatis/mapper/**/*.xml                       # mapper映射文件</span><br><span class="line">    </span><br><span class="line">spring:</span><br><span class="line">   application:</span><br><span class="line">    name: microservicecloud-dept </span><br><span class="line">   datasource:</span><br><span class="line">    type: com.alibaba.druid.pool.DruidDataSource            # 当前数据源操作类型</span><br><span class="line">    driver-class-name: org.gjt.mm.mysql.Driver              # mysql驱动包</span><br><span class="line">    url: jdbc:mysql://localhost:3306/cloudDB01              # 数据库名称</span><br><span class="line">    username: root</span><br><span class="line">    password: 123456</span><br><span class="line">    dbcp2:</span><br><span class="line">      min-idle: 5                                           # 数据库连接池的最小维持连接数</span><br><span class="line">      initial-size: 5                                       # 初始化连接数</span><br><span class="line">      max-total: 5                                          # 最大连接数</span><br><span class="line">      max-wait-millis: 200                                  # 等待连接获取的最大超时时间</span><br></pre></td></tr></table></figure><br>4）工程src/main/resources目录下新建mybatis文件夹后新建mybatis.cfg.xml文件<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">  PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="line">  &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">  </span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">  &lt;settings&gt;</span><br><span class="line">   &lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;&lt;!-- 二级缓存开启 --&gt;</span><br><span class="line">  &lt;/settings&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><br>5）MySQL创建部门数据库脚本<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">DROP DATABASE IF EXISTS cloudDB01;</span><br><span class="line">CREATE DATABASE cloudDB01 CHARACTER SET UTF8;</span><br><span class="line">USE cloudDB01;</span><br><span class="line">CREATE TABLE dept</span><br><span class="line">(</span><br><span class="line">  deptno BIGINT NOT NULL PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">  dname VARCHAR(60),</span><br><span class="line">  db_source   VARCHAR(60)</span><br><span class="line">);</span><br><span class="line"> </span><br><span class="line">INSERT INTO dept(dname,db_source) VALUES(&#x27;开发部&#x27;,DATABASE());</span><br><span class="line">INSERT INTO dept(dname,db_source) VALUES(&#x27;人事部&#x27;,DATABASE());</span><br><span class="line">INSERT INTO dept(dname,db_source) VALUES(&#x27;财务部&#x27;,DATABASE());</span><br><span class="line">INSERT INTO dept(dname,db_source) VALUES(&#x27;市场部&#x27;,DATABASE());</span><br><span class="line">INSERT INTO dept(dname,db_source) VALUES(&#x27;运维部&#x27;,DATABASE());</span><br><span class="line"> </span><br><span class="line">SELECT * FROM dept;</span><br></pre></td></tr></table></figure><br>6）DeptDao部门接口<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package com.atguigu.springcloud.dao;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line">import org.apache.ibatis.annotations.Mapper;</span><br><span class="line">import com.atguigu.springcloud.entities.Dept;</span><br><span class="line"></span><br><span class="line">@Mapper</span><br><span class="line">public interface DeptDao</span><br><span class="line">&#123;</span><br><span class="line">  public boolean addDept(Dept dept);</span><br><span class="line"></span><br><span class="line">  public Dept findById(Long id);</span><br><span class="line"></span><br><span class="line">  public List&lt;Dept&gt; findAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>7）工程src/main/resources/mybatis目录下新建mapper文件夹后再建DeptMapper.xml<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line"> </span><br><span class="line">&lt;mapper namespace=&quot;com.atguigu.springcloud.dao.DeptDao&quot;&gt;</span><br><span class="line"> </span><br><span class="line">  &lt;select id=&quot;findById&quot; resultType=&quot;Dept&quot; parameterType=&quot;Long&quot;&gt;</span><br><span class="line">   select deptno,dname,db_source from dept where deptno=#&#123;deptno&#125;; </span><br><span class="line">  &lt;/select&gt;</span><br><span class="line">  &lt;select id=&quot;findAll&quot; resultType=&quot;Dept&quot;&gt;</span><br><span class="line">   select deptno,dname,db_source from dept; </span><br><span class="line">  &lt;/select&gt;</span><br><span class="line">  &lt;insert id=&quot;addDept&quot; parameterType=&quot;Dept&quot;&gt;</span><br><span class="line">   INSERT INTO dept(dname,db_source) VALUES(#&#123;dname&#125;,DATABASE());</span><br><span class="line">  &lt;/insert&gt;</span><br><span class="line">  </span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><br>8）DeptService部门服务接口<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package com.atguigu.springcloud.service;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import com.atguigu.springcloud.entities.Dept;</span><br><span class="line"></span><br><span class="line">public interface DeptService</span><br><span class="line">&#123;</span><br><span class="line">  public boolean add(Dept dept);</span><br><span class="line">  public Dept    get(Long id);</span><br><span class="line">  public List&lt;Dept&gt; list();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>9）DeptController部门微服务提供者REST<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">package com.atguigu.springcloud.controller;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line">import com.atguigu.springcloud.entities.Dept;</span><br><span class="line">import com.atguigu.springcloud.service.DeptService;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">public class DeptController</span><br><span class="line">&#123;</span><br><span class="line">  @Autowired</span><br><span class="line">  private DeptService service;</span><br><span class="line">  </span><br><span class="line">  @RequestMapping(value=&quot;/dept/add&quot;,method=RequestMethod.POST)</span><br><span class="line">  public boolean add(@RequestBody Dept dept)</span><br><span class="line">  &#123;</span><br><span class="line">   return service.add(dept);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  @RequestMapping(value=&quot;/dept/get/&#123;id&#125;&quot;,method=RequestMethod.GET)</span><br><span class="line">  public Dept get(@PathVariable(&quot;id&quot;) Long id)</span><br><span class="line">  &#123;</span><br><span class="line">   return service.get(id);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  @RequestMapping(value=&quot;/dept/list&quot;,method=RequestMethod.GET)</span><br><span class="line">  public List&lt;Dept&gt; list()</span><br><span class="line">  &#123;</span><br><span class="line">   return service.list();</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>10）DeptProvider8001_App主启动类DeptProvider8001_App<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package com.atguigu.springcloud;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class DeptProvider8001_App</span><br><span class="line">&#123;</span><br><span class="line">  public static void main(String[] args)</span><br><span class="line">  &#123;</span><br><span class="line">   SpringApplication.run(DeptProvider8001_App.class, args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>11）测试<br>浏览器输入：</p><ul><li><a href="http://localhost:8001/dept/get/2">http://localhost:8001/dept/get/2</a></li><li><a href="http://localhost:8001/dept/list">http://localhost:8001/dept/list</a></li></ul><h2 id="4-microservicecloud-consumer-dept-80部门微服务消费者Module"><a href="#4-microservicecloud-consumer-dept-80部门微服务消费者Module" class="headerlink" title="4.microservicecloud-consumer-dept-80部门微服务消费者Module"></a>4.microservicecloud-consumer-dept-80部门微服务消费者Module</h2><p>1）新建microservicecloud-consumer-dept-80<br>2）修改POM<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">  xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">  &lt;parent&gt;</span><br><span class="line">   &lt;groupId&gt;com.atguigu.springcloud&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;microservicecloud&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">  &lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">  &lt;artifactId&gt;microservicecloud-consumer-dept-80&lt;/artifactId&gt;</span><br><span class="line">  &lt;description&gt;部门微服务消费者&lt;/description&gt;</span><br><span class="line"></span><br><span class="line">  &lt;dependencies&gt;</span><br><span class="line">   &lt;dependency&gt;&lt;!-- 自己定义的api --&gt;</span><br><span class="line">     &lt;groupId&gt;com.atguigu.springcloud&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;microservicecloud-api&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;$&#123;project.version&#125;&lt;/version&gt;</span><br><span class="line">   &lt;/dependency&gt; </span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">   &lt;!-- 修改后立即生效，热部署 --&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;springloaded&lt;/artifactId&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">   &lt;/dependency&gt;   </span><br><span class="line">  &lt;/dependencies&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><br>3）新建YML文件<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 80</span><br></pre></td></tr></table></figure><br>4）com.atguigu.springcloud.cfgbeans包下ConfigBean的编写（类似spring里面的applicationContext.xml写入的注入Bean）<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package com.atguigu.springcloud.cfgbeans;</span><br><span class="line"> </span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.web.client.RestTemplate;</span><br><span class="line"> </span><br><span class="line">@Configuration</span><br><span class="line">public class ConfigBean</span><br><span class="line">&#123;</span><br><span class="line">    @Bean</span><br><span class="line">    public RestTemplate getRestTemplate()</span><br><span class="line">    &#123;</span><br><span class="line">         return new RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>5）com.atguigu.springcloud.controller包下新建DeptController_Consumer部门微服务消费者REST</p><blockquote><p><strong>RestTemplate是什么：</strong><br>RestTemplate提供了多种便捷访问远程Http服务的方法，<br>是一种简单便捷的访问restful服务模板类，是Spring提供的用于访问Rest服务的客户端模板工具集<br><strong>官网地址</strong><br><a href="https://docs.spring.io/spring-framework/docs/4.3.7.RELEASE/javadoc-api/org/springframework/web/client/RestTemplate.html">https://docs.spring.io/spring-framework/docs/4.3.7.RELEASE/javadoc-api/org/springframework/web/client/RestTemplate.html</a><br><strong>使用</strong><br>使用restTemplate访问restful接口非常的简单粗暴无脑。<br>(url, requestMap, ResponseBean.class)这三个参数分别代表<br>REST请求地址、请求参数、HTTP响应转换被转换成的对象类型。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">package com.atguigu.springcloud.controller;</span><br><span class="line"> </span><br><span class="line">import java.util.List;</span><br><span class="line"> </span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line">import org.springframework.web.client.RestTemplate;</span><br><span class="line"> </span><br><span class="line">import com.atguigu.springcloud.entities.Dept;</span><br><span class="line"> </span><br><span class="line">@RestController</span><br><span class="line">public class DeptController_Consumer</span><br><span class="line">&#123;</span><br><span class="line">    private static final String REST_URL_PREFIX = &quot;http://localhost:8001&quot;;</span><br><span class="line">    </span><br><span class="line">    @Autowired</span><br><span class="line">    private RestTemplate restTemplate;</span><br><span class="line">    </span><br><span class="line">    @RequestMapping(value=&quot;/consumer/dept/add&quot;)</span><br><span class="line">    public boolean add(Dept dept)</span><br><span class="line">    &#123;</span><br><span class="line">         return restTemplate.postForObject(REST_URL_PREFIX+&quot;/dept/add&quot;, dept, Boolean.class);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @RequestMapping(value=&quot;/consumer/dept/get/&#123;id&#125;&quot;)</span><br><span class="line">    public Dept get(@PathVariable(&quot;id&quot;) Long id)</span><br><span class="line">    &#123;</span><br><span class="line">         return restTemplate.getForObject(REST_URL_PREFIX+&quot;/dept/get/&quot;+id, Dept.class);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">    @RequestMapping(value=&quot;/consumer/dept/list&quot;)</span><br><span class="line">    public List&lt;Dept&gt; list()</span><br><span class="line">    &#123;</span><br><span class="line">         return restTemplate.getForObject(REST_URL_PREFIX+&quot;/dept/list&quot;, List.class);</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>6）DeptConsumer80_App主启动类<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package com.atguigu.springcloud;</span><br><span class="line"> </span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class DeptConsumer80_App</span><br><span class="line">&#123;</span><br><span class="line">  public static void main(String[] args)</span><br><span class="line">  &#123;</span><br><span class="line">   SpringApplication.run(DeptConsumer80_App.class, args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>7）测试</p><ul><li><a href="http://localhost/consumer/dept/get/2">http://localhost/consumer/dept/get/2</a></li><li><a href="http://localhost/consumer/dept/list">http://localhost/consumer/dept/list</a></li><li><a href="http://localhost/consumer/dept/add?dname=AI">http://localhost/consumer/dept/add?dname=AI</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud01：微服务概述与SpringCloud</title>
      <link href="/2018/12/08/SpringCloud/SpringCloud01%EF%BC%9A%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A6%82%E8%BF%B0%E4%B8%8ESpringCloud/"/>
      <url>/2018/12/08/SpringCloud/SpringCloud01%EF%BC%9A%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A6%82%E8%BF%B0%E4%B8%8ESpringCloud/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本系列对应的是尚硅谷周阳Spring Cloud的思维导图整理的笔记，用来方便自己后面的知识点回顾。分别以每个知识点作为一篇文章详细讲述。</p></blockquote><p>知识点传送门：<br><a href="https://github.com/HuiYouHua/SpringCloud">项目源码</a></p><ul><li><a href="https://www.jianshu.com/p/c4c8c19d9f23">SpringCloud01：微服务概述与SpringCloud</a></li><li><a href="https://www.jianshu.com/p/9bc7aa82a07d">SpringCloud02：Rest微服务构建案例工程模块</a></li><li><a href="https://www.jianshu.com/p/afaef0642065">SpringCloud03：Eureka服务注册与发现</a></li><li><a href="https://www.jianshu.com/p/952b4895b6ae">SpringCloud04：Ribbon负载均衡</a></li><li><a href="https://www.jianshu.com/p/b2ec4c74ff75">SpringCloud05：Feign负载均衡</a></li><li><a href="https://www.jianshu.com/p/1b4da963374d">SpringCloud06：Hystrix断路器</a></li><li><a href="https://www.jianshu.com/p/91364d0e535d">SpringCloud07：zuul路由网关</a></li><li><a href="https://www.jianshu.com/p/31f79b4cd84d">SpringCloud08：SpringCloud Config分布式配置中心</a></li></ul><h1 id="一、微服务与微服务架构"><a href="#一、微服务与微服务架构" class="headerlink" title="一、微服务与微服务架构"></a>一、微服务与微服务架构</h1><p>业界大牛马丁.福勒（Martin Fowler） 这样描述微服务：<br>[论文网址] (<a href="https://martinfowler.com/articles/microservices.html">https://martinfowler.com/articles/microservices.html</a>)</p><h4 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h4><p>强调的是服务的大小，它关注的是某一个点，是具体解决某一个问题/提供落地对应服务的一个服务应用,<br>狭意的看,可以看作Eclipse里面的一个个微服务工程/或者Module</p><h3 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h3><p>微服务架构是⼀种架构模式，它提倡将单⼀应⽤程序划分成⼀组⼩的服务，服务之间互相协调、互相配合，为⽤户提供最终价值。每个服务运⾏在其独⽴的进程中，服务与服务间采⽤轻量级的通信机制互相协作（通常是基于HTTP协议的RESTful API）。每个服务都围绕着具体业务进⾏构建，并且能够被独⽴的部署到⽣产环境、类⽣产环境等。另外，应当尽量避免统⼀的、集中式的服务管理机制，对具体的⼀个服务⽽⾔，应根据业务上下⽂，选择合适的语⾔、⼯具对其进⾏构建。</p><p> 微服务化的核心就是将传统的一站式应用，根据业务拆分成一个一个的服务，彻底地去耦合,每一个微服务提供单个业务功能的服务，一个服务做一件事，从技术角度看就是一种小而独立的处理过程，类似进程概念，能够自行单独启动或销毁，拥有自己独立的数据库。</p><h1 id="二、微服务技术栈有哪些"><a href="#二、微服务技术栈有哪些" class="headerlink" title="二、微服务技术栈有哪些"></a>二、微服务技术栈有哪些</h1><p> 微服务条目落地技术备注服务开发Springboot、Spring、SpringMVC服务配置与管理Netflix公司的Archaius、阿里的Diamond等服务注册与发现Eureka、Consul、Zookeeper等服务调用Rest、RPC、gRPC服务熔断器Hystrix、Envoy等负载均衡Ribbon、Nginx等服务接口调用(客户端调用服务的简化工具)Feign等消息队列Kafka、RabbitMQ、ActiveMQ等服务配置中心管理SpringCloudConfig、Chef等服务路由（API网关）Zuul等服务监控Zabbix、Nagios、Metrics、Spectator等全链路追踪Zipkin，Brave、Dapper等服务部署Docker、OpenStack、Kubernetes等数据流操作开发包SpringCloud Stream（封装与Redis,Rabbit、Kafka等发送接收消息）事件消息总线Spring Cloud Bus……</p><h1 id="三、SpringCloud是什么"><a href="#三、SpringCloud是什么" class="headerlink" title="三、SpringCloud是什么"></a>三、SpringCloud是什么</h1><h2 id="1-官网说明"><a href="#1-官网说明" class="headerlink" title="1.官网说明"></a>1.官网说明</h2><p>SpringCloud，基于SpringBoot提供了一套微服务解决方案，包括服务注册与发现，配置中心，全链路监控，服务网关，负载均衡，熔断器等组件，除了基于NetFlix的开源组件做高度抽象封装之外，还有一些选型中立的开源组件。</p><p>SpringCloud利用SpringBoot的开发便利性巧妙地简化了分布式系统基础设施的开发，SpringCloud为开发人员提供了快速构建分布式系统的一些工具，包括配置管理、服务发现、断路器、路由、微代理、事件总线、全局锁、决策竞选、分布式会话等等,它们都可以用SpringBoot的开发风格做到一键启动和部署。</p><p>SpringBoot并没有重复制造轮子，它只是将目前各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过SpringBoot风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、易部署和易维护的分布式系统开发工具包</p><p><strong>SpringCloud=分布式微服务架构下的一站式解决方案，<br>是各个微服务架构落地技术的集合体，俗称微服务全家桶</strong></p><h2 id="2-SpringCloud和SpringBoot是什么关系"><a href="#2-SpringCloud和SpringBoot是什么关系" class="headerlink" title="2.SpringCloud和SpringBoot是什么关系"></a>2.SpringCloud和SpringBoot是什么关系</h2><p>SpringBoot专注于快速方便的开发单个个体微服务。</p><p>SpringCloud是关注全局的微服务协调整理治理框架，它将SpringBoot开发的一个个单体微服务整合并管理起来，<br>为各个微服务之间提供，配置管理、服务发现、断路器、路由、微代理、事件总线、全局锁、决策竞选、分布式会话等等集成服务</p><p>SpringBoot可以离开SpringCloud独立使用开发项目，但是SpringCloud离不开SpringBoot，属于依赖的关系.</p><p>SpringBoot专注于快速、方便的开发单个微服务个体，SpringCloud关注全局的服务治理框架。</p><h2 id="3-Dubbo是怎么到SpringCloud的？哪些优缺点让你去技术选型"><a href="#3-Dubbo是怎么到SpringCloud的？哪些优缺点让你去技术选型" class="headerlink" title="3.Dubbo是怎么到SpringCloud的？哪些优缺点让你去技术选型"></a>3.Dubbo是怎么到SpringCloud的？哪些优缺点让你去技术选型</h2><p>目前成熟的互联网架构（分布式+服务治理Dubbo）</p><p><strong>SpringCloud VS DUBBO</strong><br> 最大区别：SpringCloud抛弃了Dubbo的RPC通信，采用的是基于HTTP的REST方式。<br>严格来说，这两种方式各有优劣。虽然从一定程度上来说，后者牺牲了服务调用的性能，但也避免了上面提到的原生RPC带来的问题。而且REST相比RPC更为灵活，服务提供方和调用方的依赖只依靠一纸契约，不存在代码级别的强依赖，这在强调快速演化的微服务环境下，显得更加合适。</p><p>品牌机与组装机的区别<br>很明显，Spring Cloud的功能比DUBBO更加强大，涵盖面更广，而且作为Spring的拳头项目，它也能够与Spring Framework、Spring Boot、Spring Data、Spring Batch等其他Spring项目完美融合，这些对于微服务而言是至关重要的。使用Dubbo构建的微服务架构就像组装电脑，各环节我们的选择自由度很高，但是最终结果很有可能因为一条内存质量不行就点不亮了，总是让人不怎么放心，但是如果你是一名高手，那这些都不是问题；而Spring Cloud就像品牌机，在Spring Source的整合下，做了大量的兼容性测试，保证了机器拥有更高的稳定性，但是如果要在使用非原装组件外的东西，就需要对其基础有足够的了解。</p><p>社区支持与更新力度<br>最为重要的是，DUBBO停止了5年左右的更新，虽然2017.7重启了。对于技术发展的新需求，需要由开发者自行拓展升级（比如当当网弄出了DubboX），这对于很多想要采用微服务架构的中小软件组织，显然是不太合适的，中小公司没有这么强大的技术能力去修改Dubbo源码+周边的一整套解决方案，并不是每一个公司都有阿里的大牛+真实的线上生产环境测试过。</p><h1 id="三、参考资料"><a href="#三、参考资料" class="headerlink" title="三、参考资料"></a>三、参考资料</h1><p><a href="http://projects.spring.io/spring-cloud/">官网</a><br><a href="https://springcloud.cc/spring-cloud-dalston.html">SpringCloud中文文档</a><br><a href="http://springcloud.cn/">SpringCloud中国社区</a><br><a href="https://springcloud.cc/">SpringCloud中文网</a></p><h1 id="四、SpringCloud国内使用情况"><a href="#四、SpringCloud国内使用情况" class="headerlink" title="四、SpringCloud国内使用情况"></a>四、SpringCloud国内使用情况</h1><p><strong>国内公司</strong></p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220519235959967.png" alt="1.png"></p><p><strong>阿里云</strong></p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220520000000038.png" alt="2.png"></p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MJExtension源码解析</title>
      <link href="/2018/12/07/MJExtension%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
      <url>/2018/12/07/MJExtension%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前篇我们对 <a href="https://www.jianshu.com/p/bf7b025f998e">Runtime</a> 的相关方法进行了总结，同时也响应了写了几个案例，这次为了巩固下知识点，这里研究并分析了下<a href="https://github.com/CoderMJLee/MJExtension">MJExtension</a>中关于字典转模型的原理。</p></blockquote><p><a href="https://github.com/HuiYouHua/MJExtension">MJExtension解析</a></p><h1 id="一、MJExtension的应用"><a href="#一、MJExtension的应用" class="headerlink" title="一、MJExtension的应用"></a>一、MJExtension的应用</h1><p>我们进MJExtension的git上可以看到，它实现功能有</p><ul><li>MJExtension是一套字典和模型之间互相转换的超轻量级框架</li><li>JSON —&gt; Model、Core Data Model</li><li>JSONString —&gt; Model、Core Data Model</li><li>Model、Core Data Model —&gt; JSON</li><li>JSON Array —&gt; Model Array、Core Data Model Array</li><li>JSONString —&gt; Model Array、Core Data Model Array</li><li>Model Array、Core Data Model Array —&gt; JSON Array</li><li>Coding all properties of a model with only one line of code.</li><li>只需要一行代码，就能实现模型的所有属性进行Coding（归档和解档）</li></ul><p>初次之外，如果我们要对模型数据有些特殊处理的话我们可以调用一下方法：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> *  只有这个数组中的属性名才允许进行字典和模型的转换</span><br><span class="line"> */</span><br><span class="line">+ (NSArray *)mj_allowedPropertyNames;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  这个数组中的属性名将会被忽略：不进行字典和模型的转换</span><br><span class="line"> */</span><br><span class="line">+ (NSArray *)mj_ignoredPropertyNames;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  将属性名换为其他key去字典中取值</span><br><span class="line"> *</span><br><span class="line"> *  @return 字典中的key是属性名，value是从字典中取值用的key</span><br><span class="line"> */</span><br><span class="line">+ (NSDictionary *)mj_replacedKeyFromPropertyName;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  将属性名换为其他key去字典中取值</span><br><span class="line"> *</span><br><span class="line"> *  @return 从字典中取值用的key</span><br><span class="line"> */</span><br><span class="line">+ (id)mj_replacedKeyFromPropertyName121:(NSString *)propertyName;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  旧值换新值，用于过滤字典中的值</span><br><span class="line"> *</span><br><span class="line"> *  @param oldValue 旧值</span><br><span class="line"> *</span><br><span class="line"> *  @return 新值</span><br><span class="line"> */</span><br><span class="line">- (id)mj_newValueFromOldValue:(id)oldValue property:(MJProperty *)property;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  这个数组中的属性名才会进行归档</span><br><span class="line"> */</span><br><span class="line">+ (NSArray *)mj_allowedCodingPropertyNames;</span><br><span class="line">/**</span><br><span class="line"> *  这个数组中的属性名将会被忽略：不进行归档</span><br><span class="line"> */</span><br><span class="line">+ (NSArray *)mj_ignoredCodingPropertyNames;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@interface NSObject (MJCoding) &lt;MJCoding&gt;</span><br><span class="line">/**</span><br><span class="line"> *  解码（从文件中解析对象）</span><br><span class="line"> */</span><br><span class="line">- (void)mj_decode:(NSCoder *)decoder;</span><br><span class="line">/**</span><br><span class="line"> *  编码（将对象写入文件中）</span><br><span class="line"> */</span><br><span class="line">- (void)mj_encode:(NSCoder *)encoder;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  这个数组中的属性名才会进行字典和模型的转换</span><br><span class="line"> *</span><br><span class="line"> *  @param allowedPropertyNames          这个数组中的属性名才会进行字典和模型的转换</span><br><span class="line"> */</span><br><span class="line">+ (void)mj_setupAllowedPropertyNames:(MJAllowedPropertyNames)allowedPropertyNames;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  这个数组中的属性名将会被忽略：不进行字典和模型的转换</span><br><span class="line"> *</span><br><span class="line"> *  @param ignoredPropertyNames          这个数组中的属性名将会被忽略：不进行字典和模型的转换</span><br><span class="line"> */</span><br><span class="line">+ (void)mj_setupIgnoredPropertyNames:(MJIgnoredPropertyNames)ignoredPropertyNames;</span><br></pre></td></tr></table></figure><br>这些看解释基本上都能懂，具体用法我们可以进它的主页或者下载其demo看看，用起来很方便，其中的部分方法的实现原理在下面我也会有相应的讲解。</p><blockquote><p>Tip：我们除了可以对这个全局的模型进行特殊处理，我们还可以对某次调用模型转换时的模型处理，就是上面代码部分的最后两个方法，当然，看他的源码的话还有更多，这里不多说了</p></blockquote><h1 id="二、原理解析"><a href="#二、原理解析" class="headerlink" title="二、原理解析"></a>二、原理解析</h1><h2 id="1-MJExtension的文件结构分析"><a href="#1-MJExtension的文件结构分析" class="headerlink" title="1.MJExtension的文件结构分析"></a>1.MJExtension的文件结构分析</h2><p>这个是MJExtension的文件目录</p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220519235855764.png" alt="Snip20181207_3.png"><br>其中有几个核心类：NSObject+MJClass、NSObject+MJCoding、NSObject+MJKeyValue、NSObject+MJProperty，这几个主要就是用来模型解析和归解档的，相互直接有依赖。<br>另外NSString+MJExtension这个类中，就有方便对模型特殊处理的直接调用方法，不用自己费力去写了。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> *  驼峰转下划线（loveYou -&gt; love_you）</span><br><span class="line"> */</span><br><span class="line">- (NSString *)mj_underlineFromCamel;</span><br><span class="line">/**</span><br><span class="line"> *  下划线转驼峰（love_you -&gt; loveYou）</span><br><span class="line"> */</span><br><span class="line">- (NSString *)mj_camelFromUnderline;</span><br><span class="line">/**</span><br><span class="line"> * 首字母变大写</span><br><span class="line"> */</span><br><span class="line">- (NSString *)mj_firstCharUpper;</span><br><span class="line">/**</span><br><span class="line"> * 首字母变小写</span><br><span class="line"> */</span><br><span class="line">- (NSString *)mj_firstCharLower;</span><br><span class="line"></span><br><span class="line">- (BOOL)mj_isPureInt;</span><br><span class="line"></span><br><span class="line">- (NSURL *)mj_url;</span><br></pre></td></tr></table></figure></p><h2 id="2-原理分析"><a href="#2-原理分析" class="headerlink" title="2. 原理分析"></a>2. 原理分析</h2><h3 id="2-1-调用"><a href="#2-1-调用" class="headerlink" title="2.1 调用"></a>2.1 调用</h3><p>首先我们看下demo中的其中一个模型转换的调用<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">void keyValues2object()</span><br><span class="line">&#123;</span><br><span class="line">    // 1.定义一个字典</span><br><span class="line">    NSDictionary *dict = @&#123;</span><br><span class="line">                           @&quot;name&quot; : @&quot;Jack&quot;,</span><br><span class="line">                           @&quot;icon&quot; : @&quot;lufy.png&quot;,</span><br><span class="line">                           @&quot;age&quot; : @&quot;20&quot;,</span><br><span class="line">                           @&quot;height&quot; : @1.55,</span><br><span class="line">                           @&quot;money&quot; : @&quot;100.9&quot;,</span><br><span class="line">                           @&quot;sex&quot; : @(SexFemale),</span><br><span class="line">                           @&quot;gay&quot; : @&quot;1&quot;</span><br><span class="line">                       //  @&quot;gay&quot; : @&quot;NO&quot;</span><br><span class="line">                       //  @&quot;gay&quot; : @&quot;true&quot;</span><br><span class="line">                           &#125;;</span><br><span class="line">    </span><br><span class="line">    // 2.将字典转为MJUser模型</span><br><span class="line">    MJUser *user = [MJUser mj_objectWithKeyValues:dict];</span><br><span class="line">    </span><br><span class="line">    // 3.打印MJUser模型的属性</span><br><span class="line">    MJExtensionLog(@&quot;name=%@, icon=%@, age=%d, height=%@, money=%@, sex=%d, gay=%d&quot;, user.name, user.icon, user.age, user.height, user.money, user.sex, user.gay);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-2-分析"><a href="#2-2-分析" class="headerlink" title="2.2 分析"></a>2.2 分析</h3><h6 id="1-我们点进-mj-objectWithKeyValues-方法一直到这"><a href="#1-我们点进-mj-objectWithKeyValues-方法一直到这" class="headerlink" title="1) 我们点进 mj_objectWithKeyValues: 方法一直到这"></a>1) 我们点进 <strong>mj_objectWithKeyValues:</strong> 方法一直到这</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> 1.获得JSON对象</span><br><span class="line"> 2.判断普通的模型转换还是Coredata转换</span><br><span class="line"> */</span><br><span class="line">+ (instancetype)mj_objectWithKeyValues:(id)keyValues context:(NSManagedObjectContext *)context</span><br><span class="line">&#123;</span><br><span class="line">    // 获得JSON对象</span><br><span class="line">    keyValues = [keyValues mj_JSONObject];</span><br><span class="line">    MJExtensionAssertError([keyValues isKindOfClass:[NSDictionary class]], nil, [self class], @&quot;keyValues参数不是一个字典&quot;);</span><br><span class="line">    </span><br><span class="line">    if ([self isSubclassOfClass:[NSManagedObject class]] &amp;&amp; context) &#123;</span><br><span class="line">        NSString *entityName = [NSStringFromClass(self) componentsSeparatedByString:@&quot;.&quot;].lastObject;</span><br><span class="line">        return [[NSEntityDescription insertNewObjectForEntityForName:entityName inManagedObjectContext:context] mj_setKeyValues:keyValues context:context];</span><br><span class="line">    &#125;</span><br><span class="line">    return [[[self alloc] init] mj_setKeyValues:keyValues];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="2）点击进入到mj-setKeyValues-这个方法"><a href="#2）点击进入到mj-setKeyValues-这个方法" class="headerlink" title="2）点击进入到mj_setKeyValues:这个方法"></a>2）点击进入到<strong>mj_setKeyValues:</strong>这个方法</h6><p>进到这个方法<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line">- (instancetype)mj_setKeyValues:(id)keyValues context:(NSManagedObjectContext *)context</span><br><span class="line">&#123;</span><br><span class="line">    // 获得JSON对象</span><br><span class="line">    keyValues = [keyValues mj_JSONObject];</span><br><span class="line">    </span><br><span class="line">    MJExtensionAssertError([keyValues isKindOfClass:[NSDictionary class]], self, [self class], @&quot;keyValues参数不是一个字典&quot;);</span><br><span class="line">    </span><br><span class="line">    Class clazz = [self class];</span><br><span class="line">    // 获取名单类的数组</span><br><span class="line">    NSArray *allowedPropertyNames = [clazz mj_totalAllowedPropertyNames];</span><br><span class="line">    NSArray *ignoredPropertyNames = [clazz mj_totalIgnoredPropertyNames];</span><br><span class="line">    </span><br><span class="line">    //通过封装的方法回调一个通过运行时编写的，用于返回属性列表的方法。</span><br><span class="line">    [clazz mj_enumerateProperties:^(MJProperty *property, BOOL *stop) &#123;</span><br><span class="line">        @try &#123;</span><br><span class="line">            // 0.检测是否被忽略</span><br><span class="line">            if (allowedPropertyNames.count &amp;&amp; ![allowedPropertyNames containsObject:property.name]) return;</span><br><span class="line">            if ([ignoredPropertyNames containsObject:property.name]) return;</span><br><span class="line">            </span><br><span class="line">            // 1.取出属性值</span><br><span class="line">            id value;</span><br><span class="line">            NSArray *propertyKeyses = [property propertyKeysForClass:clazz];</span><br><span class="line">            for (NSArray *propertyKeys in propertyKeyses) &#123;</span><br><span class="line">                value = keyValues;</span><br><span class="line">                for (MJPropertyKey *propertyKey in propertyKeys) &#123;</span><br><span class="line">                    value = [propertyKey valueInObject:value];</span><br><span class="line">                &#125;</span><br><span class="line">                if (value) break;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            // 值的过滤</span><br><span class="line">            id newValue = [clazz mj_getNewValueFromObject:self oldValue:value property:property];</span><br><span class="line">            if (newValue != value) &#123; // 有过滤后的新值</span><br><span class="line">                [property setValue:newValue forObject:self];</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            // 如果没有值，就直接返回</span><br><span class="line">            if (!value || value == [NSNull null]) return;</span><br><span class="line">            </span><br><span class="line">            // 2.复杂处理</span><br><span class="line">            MJPropertyType *type = property.type;</span><br><span class="line">            Class propertyClass = type.typeClass;</span><br><span class="line">            Class objectClass = [property objectClassInArrayForClass:[self class]];</span><br><span class="line">            </span><br><span class="line">            // 不可变 -&gt; 可变处理</span><br><span class="line">            if (propertyClass == [NSMutableArray class] &amp;&amp; [value isKindOfClass:[NSArray class]]) &#123;</span><br><span class="line">                value = [NSMutableArray arrayWithArray:value];</span><br><span class="line">            &#125; else if (propertyClass == [NSMutableDictionary class] &amp;&amp; [value isKindOfClass:[NSDictionary class]]) &#123;</span><br><span class="line">                value = [NSMutableDictionary dictionaryWithDictionary:value];</span><br><span class="line">            &#125; else if (propertyClass == [NSMutableString class] &amp;&amp; [value isKindOfClass:[NSString class]]) &#123;</span><br><span class="line">                value = [NSMutableString stringWithString:value];</span><br><span class="line">            &#125; else if (propertyClass == [NSMutableData class] &amp;&amp; [value isKindOfClass:[NSData class]]) &#123;</span><br><span class="line">                value = [NSMutableData dataWithData:value];</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            if (!type.isFromFoundation &amp;&amp; propertyClass) &#123; // 模型属性</span><br><span class="line">                value = [propertyClass mj_objectWithKeyValues:value context:context];</span><br><span class="line">            &#125; else if (objectClass) &#123;</span><br><span class="line">                if (objectClass == [NSURL class] &amp;&amp; [value isKindOfClass:[NSArray class]]) &#123;</span><br><span class="line">                    // string array -&gt; url array</span><br><span class="line">                    NSMutableArray *urlArray = [NSMutableArray array];</span><br><span class="line">                    for (NSString *string in value) &#123;</span><br><span class="line">                        if (![string isKindOfClass:[NSString class]]) continue;</span><br><span class="line">                        [urlArray addObject:string.mj_url];</span><br><span class="line">                    &#125;</span><br><span class="line">                    value = urlArray;</span><br><span class="line">                &#125; else &#123; // 字典数组--&gt;模型数组</span><br><span class="line">                    value = [objectClass mj_objectArrayWithKeyValuesArray:value context:context];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                if (propertyClass == [NSString class]) &#123;</span><br><span class="line">                    if ([value isKindOfClass:[NSNumber class]]) &#123;</span><br><span class="line">                        // NSNumber -&gt; NSString</span><br><span class="line">                        value = [value description];</span><br><span class="line">                    &#125; else if ([value isKindOfClass:[NSURL class]]) &#123;</span><br><span class="line">                        // NSURL -&gt; NSString</span><br><span class="line">                        value = [value absoluteString];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; else if ([value isKindOfClass:[NSString class]]) &#123;</span><br><span class="line">                    if (propertyClass == [NSURL class]) &#123;</span><br><span class="line">                        // NSString -&gt; NSURL</span><br><span class="line">                        // 字符串转码</span><br><span class="line">                        value = [value mj_url];</span><br><span class="line">                    &#125; else if (type.isNumberType) &#123;</span><br><span class="line">                        NSString *oldValue = value;</span><br><span class="line">                        </span><br><span class="line">                        // NSString -&gt; NSNumber</span><br><span class="line">                        if (type.typeClass == [NSDecimalNumber class]) &#123;</span><br><span class="line">                            value = [NSDecimalNumber decimalNumberWithString:oldValue];</span><br><span class="line">                        &#125; else &#123;</span><br><span class="line">                            value = [numberFormatter_ numberFromString:oldValue];</span><br><span class="line">                        &#125;</span><br><span class="line">                        </span><br><span class="line">                        // 如果是BOOL</span><br><span class="line">                        if (type.isBoolType) &#123;</span><br><span class="line">                            // 字符串转BOOL（字符串没有charValue方法）</span><br><span class="line">                            // 系统会调用字符串的charValue转为BOOL类型</span><br><span class="line">                            NSString *lower = [oldValue lowercaseString];</span><br><span class="line">                            if ([lower isEqualToString:@&quot;yes&quot;] || [lower isEqualToString:@&quot;true&quot;]) &#123;</span><br><span class="line">                                value = @YES;</span><br><span class="line">                            &#125; else if ([lower isEqualToString:@&quot;no&quot;] || [lower isEqualToString:@&quot;false&quot;]) &#123;</span><br><span class="line">                                value = @NO;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; else if ([value isKindOfClass:[NSNumber class]] &amp;&amp; propertyClass == [NSDecimalNumber class])&#123;</span><br><span class="line">                    // 过滤 NSDecimalNumber类型</span><br><span class="line">                    if (![value isKindOfClass:[NSDecimalNumber class]]) &#123;</span><br><span class="line">                        value = [NSDecimalNumber decimalNumberWithDecimal:[((NSNumber *)value) decimalValue]];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                // value和property类型不匹配</span><br><span class="line">                if (propertyClass &amp;&amp; ![value isKindOfClass:propertyClass]) &#123;</span><br><span class="line">                    value = nil;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            // 3.赋值</span><br><span class="line">            [property setValue:value forObject:self];</span><br><span class="line">        &#125; @catch (NSException *exception) &#123;</span><br><span class="line">            MJExtensionBuildError([self class], exception.reason);</span><br><span class="line">            MJExtensionLog(@&quot;%@&quot;, exception);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line">    </span><br><span class="line">    // 转换完毕</span><br><span class="line">    if ([self respondsToSelector:@selector(mj_keyValuesDidFinishConvertingToObject)]) &#123;</span><br><span class="line">        [self mj_keyValuesDidFinishConvertingToObject];</span><br><span class="line">    &#125;</span><br><span class="line">    if ([self respondsToSelector:@selector(mj_keyValuesDidFinishConvertingToObject:)]) &#123;</span><br><span class="line">        [self mj_keyValuesDidFinishConvertingToObject:keyValues];</span><br><span class="line">    &#125;</span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这段代码就是模型解析的核心代码，下面我们来分析一下<br>首先是这段代码的分析：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1.将需要转换的对象转成JSON对象</span><br><span class="line">2.获取黑白名单中的数据内容: 可以转换的, 被忽略的</span><br><span class="line">3.遍历这个对象的所有属性,对其做响应处理</span><br><span class="line">   3.1 检查该属性是否允许进行字典和模型</span><br><span class="line">   3.2 检查该属性是否是忽略进行字典和模型</span><br><span class="line">   3.3 取出该属性对应的值</span><br><span class="line">   3.4 处理3.3中获取的值, 可以实现 mj_newValueFromOldValue: 方法进行处理, 比如设置其固定值, 日期格式转换等等</span><br><span class="line">   3.4 获取属性的包装属性, 类类型, 和如果该属性是数组的数组成员类型</span><br><span class="line">   3.5 处理3.3中获取的值, 如果是不可变类型,就变为可变类型</span><br><span class="line">   3.6 判断属性的数据类型并做响应处理</span><br><span class="line">       3.6.1 如果该属性不是 Foundation 对象的数据类型的话, 则递归调用上述所有步骤,直到其实 Foundation 对象类型, 主要是用来处理 模型套模型的数据结构</span><br><span class="line">       3.6.2 如果该属性是数组的数组成员类型存在则做响应处理</span><br><span class="line">           3.6.2.1 如果数组成员类型是url 或者 数组, 则组合成数组类型</span><br><span class="line">           3.6.2.2 如果数组成员类型是其他类型,则转换为模型数组,仍然是递归执行</span><br><span class="line">       3.6.3 如果是其他情况, 这时候剩下的都是些基本数据类型了, 则直接进行响应处理</span><br><span class="line">   3.7 通过以上处理获得最终的属性值, 利用 KVC 进行赋值</span><br><span class="line">4.至此,模型转换完成, 可以实现 mj_keyValuesDidFinishConvertingToObject:方法 来拿到你原始的 JSON 数据</span><br></pre></td></tr></table></figure><br>我们一步一步的分析下</p><h6 id="1-将需要转换的对象转成JSON对象"><a href="#1-将需要转换的对象转成JSON对象" class="headerlink" title="1.将需要转换的对象转成JSON对象"></a>1.将需要转换的对象转成JSON对象</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 获得JSON对象</span><br><span class="line">    keyValues = [keyValues mj_JSONObject];</span><br></pre></td></tr></table></figure><p>进去看下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- (id)mj_JSONObject</span><br><span class="line">&#123;</span><br><span class="line">    if ([self isKindOfClass:[NSString class]]) &#123;</span><br><span class="line">        return [NSJSONSerialization JSONObjectWithData:[((NSString *)self) dataUsingEncoding:NSUTF8StringEncoding] options:kNilOptions error:nil];</span><br><span class="line">    &#125; else if ([self isKindOfClass:[NSData class]]) &#123;</span><br><span class="line">        return [NSJSONSerialization JSONObjectWithData:(NSData *)self options:kNilOptions error:nil];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return self.mj_keyValues;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这段就是调用系统的JSON序列化，返回我们要转换的JSON对象</p><h6 id="2-获取黑白名单中的数据内容-可以转换的-被忽略的"><a href="#2-获取黑白名单中的数据内容-可以转换的-被忽略的" class="headerlink" title="2.获取黑白名单中的数据内容: 可以转换的, 被忽略的"></a>2.获取黑白名单中的数据内容: 可以转换的, 被忽略的</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Class clazz = [self class];</span><br><span class="line">   // 获取名单类的数组</span><br><span class="line">   NSArray *allowedPropertyNames = [clazz mj_totalAllowedPropertyNames];</span><br><span class="line">   NSArray *ignoredPropertyNames = [clazz mj_totalIgnoredPropertyNames];</span><br></pre></td></tr></table></figure><p>我们点进这段代码的实现一直到下面这部分：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">+ (NSMutableArray *)mj_totalObjectsWithSelector:(SEL)selector key:(const char *)key</span><br><span class="line">&#123;</span><br><span class="line">    MJExtensionSemaphoreCreate</span><br><span class="line">    MJExtensionSemaphoreWait</span><br><span class="line">   </span><br><span class="line">    NSMutableArray *array = [self classDictForKey:key][NSStringFromClass(self)];</span><br><span class="line">    if (array == nil) &#123;</span><br><span class="line">        // 创建、存储</span><br><span class="line">        [self classDictForKey:key][NSStringFromClass(self)] = array = [NSMutableArray array];</span><br><span class="line">        </span><br><span class="line">        if ([self respondsToSelector:selector]) &#123;</span><br><span class="line">    #pragma clang diagnostic push</span><br><span class="line">    #pragma clang diagnostic ignored &quot;-Warc-performSelector-leaks&quot;</span><br><span class="line">            NSArray *subArray = [self performSelector:selector];</span><br><span class="line">    #pragma clang diagnostic pop</span><br><span class="line">            if (subArray) &#123;</span><br><span class="line">                [array addObjectsFromArray:subArray];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        [self mj_enumerateAllClasses:^(__unsafe_unretained Class c, BOOL *stop) &#123;</span><br><span class="line">            NSArray *subArray = objc_getAssociatedObject(c, key);</span><br><span class="line">            [array addObjectsFromArray:subArray];</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    MJExtensionSemaphoreSignal</span><br><span class="line">    </span><br><span class="line">    return array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这段代码实际上是为了返回四种数据，还记得我们在上面写的类似下面这种方法：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> *  只有这个数组中的属性名才允许进行字典和模型的转换</span><br><span class="line"> */</span><br><span class="line">+ (NSArray *)mj_allowedPropertyNames;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  这个数组中的属性名将会被忽略：不进行字典和模型的转换</span><br><span class="line"> */</span><br><span class="line">+ (NSArray *)mj_ignoredPropertyNames;</span><br></pre></td></tr></table></figure><br>它就是为了返回我们实现的这些方法中的数组属性内容，下面我们来分析下：<br>首先，这个key值有四种</p><blockquote><p>key值有四种,分别表示:<br>1) MJAllowedPropertyNamesKey: 允许进行字典和模型的转换的属性<br>2) MJIgnoredPropertyNamesKey: 被忽略进行字典和模型的转换的属性<br>3) MJAllowedCodingPropertyNamesKey: 允许进行归档的属性<br>4) MJIgnoredCodingPropertyNamesKey: 被忽略进行归档的属性</p></blockquote><p>这里为了防止数据错乱，用了GCD 信号量机制，下面我们继续分析：</p><ol><li>首先我们看<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NSMutableArray *array = [self classDictForKey:key][NSStringFromClass(self)];</span><br></pre></td></tr></table></figure>点击去看的话会发现他会声明四个静态变量分别存储上面四种类型的属性数组，这没什么。</li><li>创建和存储那些我们需要特殊处理属性的数组<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[self classDictForKey:key][NSStringFromClass(self)] = array = [NSMutableArray array];</span><br></pre></td></tr></table></figure>这里我设置了两个要被忽略的字段，<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> po [self classDictForKey:key]</span><br><span class="line"> &#123;</span><br><span class="line">   MJUser =     (</span><br><span class="line">     name,</span><br><span class="line">     icon</span><br><span class="line">   );</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&lt;__NSArrayM 0x6000001f84b0&gt;(</span><br><span class="line">   name,</span><br><span class="line">   icon</span><br><span class="line"> )</span><br></pre></td></tr></table></figure>我们可以看到：取出字典里以 self 为 key 所对应的值,即数组内容对应的就是上述 key 值表示的属性字典集合</li><li>当数组为空时,创建一个字典放入以 self 为key 的空值</li><li>将实现 selector 方法返回的数组放入到这个以 self 为key 的数组当中<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if ([self respondsToSelector:selector]) &#123;</span><br><span class="line">    #pragma clang diagnostic push</span><br><span class="line">    #pragma clang diagnostic ignored &quot;-Warc-performSelector-leaks&quot;</span><br><span class="line">            NSArray *subArray = [self performSelector:selector];</span><br><span class="line">    #pragma clang diagnostic pop</span><br><span class="line">            if (subArray) &#123;</span><br><span class="line">                [array addObjectsFromArray:subArray];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>这个方法需要我们去实现，就是上面讲的要返回的特殊处理的字段</li><li>遍历 self 类中以 key 为标识符的 数据内容取出并返回<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[self mj_enumerateAllClasses:^(__unsafe_unretained Class c, BOOL *stop) &#123;</span><br><span class="line">            NSArray *subArray = objc_getAssociatedObject(c, key);</span><br><span class="line">            [array addObjectsFromArray:subArray];</span><br><span class="line">        &#125;];</span><br></pre></td></tr></table></figure></li></ol><p>总结: 这个方法就是为了如果用户实现了比如 <strong>+ (NSArray <em>)mj_allowedPropertyNames+ (NSArray </em>)mj_allowedCodingPropertyNames;</strong> 这样的方法时, 返回用户在这里设置的数组属性内容</p><p>回到3中</p><h6 id="3-遍历这个对象的所有属性-对其做响应处理"><a href="#3-遍历这个对象的所有属性-对其做响应处理" class="headerlink" title="3.遍历这个对象的所有属性,对其做响应处理"></a>3.遍历这个对象的所有属性,对其做响应处理</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//通过封装的方法回调一个通过运行时编写的，用于返回属性列表的方法。</span><br><span class="line">    [clazz mj_enumerateProperties:^(MJProperty *property, BOOL *stop) &#123;</span><br></pre></td></tr></table></figure><p>我们点进去直到<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">+ (NSMutableArray *)properties</span><br><span class="line">&#123;</span><br><span class="line">    NSMutableArray *cachedProperties = [self propertyDictForKey:&amp;MJCachedPropertiesKey][NSStringFromClass(self)];</span><br><span class="line">    </span><br><span class="line">    if (cachedProperties == nil) &#123;</span><br><span class="line">        MJExtensionSemaphoreCreate</span><br><span class="line">        MJExtensionSemaphoreWait</span><br><span class="line">        </span><br><span class="line">        if (cachedProperties == nil) &#123;</span><br><span class="line">            cachedProperties = [NSMutableArray array];</span><br><span class="line">            </span><br><span class="line">            [self mj_enumerateClasses:^(__unsafe_unretained Class c, BOOL *stop) &#123;</span><br><span class="line">                // 1.获得所有的成员变量</span><br><span class="line">                unsigned int outCount = 0;</span><br><span class="line">                objc_property_t *properties = class_copyPropertyList(c, &amp;outCount);</span><br><span class="line">                </span><br><span class="line">                // 2.遍历每一个成员变量</span><br><span class="line">                for (unsigned int i = 0; i&lt;outCount; i++) &#123;</span><br><span class="line">                    // 将每一个成员变量包装成一个对象</span><br><span class="line">                    MJProperty *property = [MJProperty cachedPropertyWithProperty:properties[i]];</span><br><span class="line">                    // 过滤掉Foundation框架类里面的属性</span><br><span class="line">                    if ([MJFoundation isClassFromFoundation:property.srcClass]) continue;</span><br><span class="line">                    property.srcClass = c;</span><br><span class="line">                    [property setOriginKey:[self propertyKey:property.name] forClass:self];</span><br><span class="line">                    [property setObjectClassInArray:[self propertyObjectClassInArray:property.name] forClass:self];</span><br><span class="line">                    [cachedProperties addObject:property];</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                // 3.释放内存</span><br><span class="line">                free(properties);</span><br><span class="line">            &#125;];</span><br><span class="line">            </span><br><span class="line">            [self propertyDictForKey:&amp;MJCachedPropertiesKey][NSStringFromClass(self)] = cachedProperties;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        MJExtensionSemaphoreSignal</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return cachedProperties;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>步骤解析：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 根据 MJCachedPropertiesKey 字段取缓存中的缓存属性数组</span><br><span class="line">2. 如果不存在,则创建数组,遍历该类下的所有属性</span><br><span class="line">3. 将每个属性包装成一个 MJProperty 对象,设置该对象的objc_property_t, name, type, 父类...,设置的内容可以查看runtime中</span><br><span class="line">4. 同时在 propertyKey 和 propertyObjectClassInArray 中可以设置对象要替换的属性和模型类, 可以在 mj_replacedKeyFromPropertyName121 和 mj_objectClassInArray...方法中设置</span><br><span class="line">5. 将该类的成员属性缓存起来并返回</span><br><span class="line">总结：这段代码就是返回我们对象的所有属性，同时可以对这些属性的字段做一些类似替换，格式化等操作。可以进**propertyKey：**这个方法查看</span><br></pre></td></tr></table></figure></p><h6 id="3-1-检查该属性是否允许进行字典和模型"><a href="#3-1-检查该属性是否允许进行字典和模型" class="headerlink" title="3.1 检查该属性是否允许进行字典和模型"></a>3.1 检查该属性是否允许进行字典和模型</h6><h6 id="3-2-检查该属性是否是忽略进行字典和模型"><a href="#3-2-检查该属性是否是忽略进行字典和模型" class="headerlink" title="3.2 检查该属性是否是忽略进行字典和模型"></a>3.2 检查该属性是否是忽略进行字典和模型</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if (allowedPropertyNames.count &amp;&amp; ![allowedPropertyNames containsObject:property.name]) return;</span><br><span class="line">if ([ignoredPropertyNames containsObject:property.name]) return;</span><br></pre></td></tr></table></figure><p>如果该字段不允许转换或者被忽略转换则直接返回</p><h6 id="3-3-取出该属性对应的值"><a href="#3-3-取出该属性对应的值" class="headerlink" title="3.3 取出该属性对应的值"></a>3.3 取出该属性对应的值</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">id value;</span><br><span class="line">NSArray *propertyKeyses = [property propertyKeysForClass:clazz];</span><br><span class="line">for (NSArray *propertyKeys in propertyKeyses) &#123;</span><br><span class="line">      value = keyValues;</span><br><span class="line">      for (MJPropertyKey *propertyKey in propertyKeys) &#123;</span><br><span class="line">             value = [propertyKey valueInObject:value];</span><br><span class="line">      &#125;</span><br><span class="line">      if (value) break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="3-4-处理3-3中获取的值-可以实现-mj-newValueFromOldValue-方法进行处理-比如设置其固定值-日期格式转换等等"><a href="#3-4-处理3-3中获取的值-可以实现-mj-newValueFromOldValue-方法进行处理-比如设置其固定值-日期格式转换等等" class="headerlink" title="3.4 处理3.3中获取的值, 可以实现 mj_newValueFromOldValue: 方法进行处理, 比如设置其固定值, 日期格式转换等等"></a>3.4 处理3.3中获取的值, 可以实现 mj_newValueFromOldValue: 方法进行处理, 比如设置其固定值, 日期格式转换等等</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">id newValue = [clazz mj_getNewValueFromObject:self oldValue:value property:property];</span><br><span class="line">if (newValue != value) &#123; // 有过滤后的新值</span><br><span class="line">     [property setValue:newValue forObject:self];</span><br><span class="line">     return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="3-4-获取属性的包装属性-类类型-和如果该属性是数组的数组成员类型"><a href="#3-4-获取属性的包装属性-类类型-和如果该属性是数组的数组成员类型" class="headerlink" title="3.4 获取属性的包装属性, 类类型, 和如果该属性是数组的数组成员类型"></a>3.4 获取属性的包装属性, 类类型, 和如果该属性是数组的数组成员类型</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MJPropertyType *type = property.type;</span><br><span class="line">Class propertyClass = type.typeClass;</span><br><span class="line">Class objectClass = [property objectClassInArrayForClass:[self class]];</span><br></pre></td></tr></table></figure><h6 id="3-5-处理3-3中获取的值-如果是不可变类型-就变为可变类型"><a href="#3-5-处理3-3中获取的值-如果是不可变类型-就变为可变类型" class="headerlink" title="3.5 处理3.3中获取的值, 如果是不可变类型,就变为可变类型"></a>3.5 处理3.3中获取的值, 如果是不可变类型,就变为可变类型</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if (propertyClass == [NSMutableArray class] &amp;&amp; [value isKindOfClass:[NSArray class]]) &#123;</span><br><span class="line">    value = [NSMutableArray arrayWithArray:value];</span><br><span class="line">&#125; else if (propertyClass == [NSMutableDictionary class] &amp;&amp; [value isKindOfClass:[NSDictionary class]]) &#123;</span><br><span class="line">    value = [NSMutableDictionary dictionaryWithDictionary:value];</span><br><span class="line">&#125; else if (propertyClass == [NSMutableString class] &amp;&amp; [value isKindOfClass:[NSString class]]) &#123;</span><br><span class="line">    value = [NSMutableString stringWithString:value];</span><br><span class="line">&#125; else if (propertyClass == [NSMutableData class] &amp;&amp; [value isKindOfClass:[NSData class]]) &#123;</span><br><span class="line">    value = [NSMutableData dataWithData:value];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="3-6-判断属性的数据类型并做响应处理"><a href="#3-6-判断属性的数据类型并做响应处理" class="headerlink" title="3.6 判断属性的数据类型并做响应处理"></a>3.6 判断属性的数据类型并做响应处理</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">if (propertyClass == [NSMutableArray class] &amp;&amp; [value isKindOfClass:[NSArray class]]) &#123;</span><br><span class="line">    value = [NSMutableArray arrayWithArray:value];</span><br><span class="line">&#125; else if (propertyClass == [NSMutableDictionary class] &amp;&amp; [value isKindOfClass:[NSDictionary class]]) &#123;</span><br><span class="line">    value = [NSMutableDictionary dictionaryWithDictionary:value];</span><br><span class="line">&#125; else if (propertyClass == [NSMutableString class] &amp;&amp; [value isKindOfClass:[NSString class]]) &#123;</span><br><span class="line">    value = [NSMutableString stringWithString:value];</span><br><span class="line">&#125; else if (propertyClass == [NSMutableData class] &amp;&amp; [value isKindOfClass:[NSData class]]) &#123;</span><br><span class="line">    value = [NSMutableData dataWithData:value];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (!type.isFromFoundation &amp;&amp; propertyClass) &#123; // 模型属性</span><br><span class="line">    value = [propertyClass mj_objectWithKeyValues:value context:context];</span><br><span class="line">&#125; else if (objectClass) &#123;</span><br><span class="line">    if (objectClass == [NSURL class] &amp;&amp; [value isKindOfClass:[NSArray class]]) &#123;</span><br><span class="line">        // string array -&gt; url array</span><br><span class="line">        NSMutableArray *urlArray = [NSMutableArray array];</span><br><span class="line">        for (NSString *string in value) &#123;</span><br><span class="line">            if (![string isKindOfClass:[NSString class]]) continue;</span><br><span class="line">            [urlArray addObject:string.mj_url];</span><br><span class="line">        &#125;</span><br><span class="line">        value = urlArray;</span><br><span class="line">    &#125; else &#123; // 字典数组--&gt;模型数组</span><br><span class="line">        value = [objectClass mj_objectArrayWithKeyValuesArray:value context:context];</span><br><span class="line">    &#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    if (propertyClass == [NSString class]) &#123;</span><br><span class="line">        if ([value isKindOfClass:[NSNumber class]]) &#123;</span><br><span class="line">            // NSNumber -&gt; NSString</span><br><span class="line">            value = [value description];</span><br><span class="line">        &#125; else if ([value isKindOfClass:[NSURL class]]) &#123;</span><br><span class="line">            // NSURL -&gt; NSString</span><br><span class="line">            value = [value absoluteString];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else if ([value isKindOfClass:[NSString class]]) &#123;</span><br><span class="line">        if (propertyClass == [NSURL class]) &#123;</span><br><span class="line">            // NSString -&gt; NSURL</span><br><span class="line">            // 字符串转码</span><br><span class="line">            value = [value mj_url];</span><br><span class="line">        &#125; else if (type.isNumberType) &#123;</span><br><span class="line">            NSString *oldValue = value;</span><br><span class="line">            </span><br><span class="line">            // NSString -&gt; NSNumber</span><br><span class="line">            if (type.typeClass == [NSDecimalNumber class]) &#123;</span><br><span class="line">                value = [NSDecimalNumber decimalNumberWithString:oldValue];</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                value = [numberFormatter_ numberFromString:oldValue];</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            // 如果是BOOL</span><br><span class="line">            if (type.isBoolType) &#123;</span><br><span class="line">                // 字符串转BOOL（字符串没有charValue方法）</span><br><span class="line">                // 系统会调用字符串的charValue转为BOOL类型</span><br><span class="line">                NSString *lower = [oldValue lowercaseString];</span><br><span class="line">                if ([lower isEqualToString:@&quot;yes&quot;] || [lower isEqualToString:@&quot;true&quot;]) &#123;</span><br><span class="line">                    value = @YES;</span><br><span class="line">                &#125; else if ([lower isEqualToString:@&quot;no&quot;] || [lower isEqualToString:@&quot;false&quot;]) &#123;</span><br><span class="line">                    value = @NO;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else if ([value isKindOfClass:[NSNumber class]] &amp;&amp; propertyClass == [NSDecimalNumber class])&#123;</span><br><span class="line">        // 过滤 NSDecimalNumber类型</span><br><span class="line">        if (![value isKindOfClass:[NSDecimalNumber class]]) &#123;</span><br><span class="line">            value = [NSDecimalNumber decimalNumberWithDecimal:[((NSNumber *)value) decimalValue]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // value和property类型不匹配</span><br><span class="line">    if (propertyClass &amp;&amp; ![value isKindOfClass:propertyClass]) &#123;</span><br><span class="line">        value = nil;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>3.6.1 如果该属性不是 Foundation 对象的数据类型的话, 则递归调用上述所有步骤,直到其实 Foundation 对象类型, 主要是用来处理 模型套模型的数据结构</li><li>3.6.2 如果该属性是数组的数组成员类型存在则做响应处理<ul><li>3.6.2.1 如果数组成员类型是url 或者 数组, 则组合成数组类型</li><li>3.6.2.2 如果数组成员类型是其他类型,则转换为模型数组,仍然是递归执行</li></ul></li><li>3.6.3 如果是其他情况, 这时候剩下的都是些基本数据类型了, 则直接进行响应处理<h6 id="3-7-通过以上处理获得最终的属性值-利用-KVC-进行赋值"><a href="#3-7-通过以上处理获得最终的属性值-利用-KVC-进行赋值" class="headerlink" title="3.7 通过以上处理获得最终的属性值, 利用 KVC 进行赋值"></a>3.7 通过以上处理获得最终的属性值, 利用 KVC 进行赋值</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[property setValue:value forObject:self];</span><br></pre></td></tr></table></figure><h6 id="4-至此-模型转换完成-可以实现-mj-keyValuesDidFinishConvertingToObject-方法-来拿到你原始的-JSON-数据"><a href="#4-至此-模型转换完成-可以实现-mj-keyValuesDidFinishConvertingToObject-方法-来拿到你原始的-JSON-数据" class="headerlink" title="4.至此,模型转换完成, 可以实现 mj_keyValuesDidFinishConvertingToObject:方法 来拿到你原始的 JSON 数据"></a>4.至此,模型转换完成, 可以实现 mj_keyValuesDidFinishConvertingToObject:方法 来拿到你原始的 JSON 数据</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> if ([self respondsToSelector:@selector(mj_keyValuesDidFinishConvertingToObject)]) &#123;</span><br><span class="line">     [self mj_keyValuesDidFinishConvertingToObject];</span><br><span class="line">&#125;</span><br><span class="line">if ([self respondsToSelector:@selector(mj_keyValuesDidFinishConvertingToObject:)]) &#123;</span><br><span class="line">    [self mj_keyValuesDidFinishConvertingToObject:keyValues];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>总结：MJExtension就是运用 runtime 对类添加属性和获取属性，获取类的成员变量以及对成员变量的操作以及递归思想等实现模型转换的。<br>如果对 runtime 调用方法不熟悉的童鞋，可以看下前篇文章<a href="https://www.jianshu.com/p/bf7b025f998e">Runtime方法总结及部分案例</a><br>喜欢的就点个赞👍吧</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 源码解析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Runtime方法总结及部分案例</title>
      <link href="/2018/12/05/Runtime%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93%E5%8F%8A%E9%83%A8%E5%88%86%E6%A1%88%E4%BE%8B/"/>
      <url>/2018/12/05/Runtime%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93%E5%8F%8A%E9%83%A8%E5%88%86%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/HuiYouHua/Runtime">案例地址</a></p><h1 id="一、类与对象基础数据结构"><a href="#一、类与对象基础数据结构" class="headerlink" title="一、类与对象基础数据结构"></a>一、类与对象基础数据结构</h1><h2 id="1-类与对象基础数据结构"><a href="#1-类与对象基础数据结构" class="headerlink" title="1.类与对象基础数据结构"></a>1.类与对象基础数据结构</h2><h3 id="1）Class"><a href="#1）Class" class="headerlink" title="1）Class"></a>1）Class</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// Objective-C类是由Class类型来表示的，它实际上是一个指向objc_class结构体的指针</span><br><span class="line">typedef struct objc_class *Class;</span><br><span class="line"></span><br><span class="line">// objc_class结构体</span><br><span class="line">struct objc_class &#123;</span><br><span class="line">    Class isa  OBJC_ISA_AVAILABILITY;</span><br><span class="line"></span><br><span class="line">#if !__OBJC2__</span><br><span class="line">    Class super_class                       OBJC2_UNAVAILABLE;  // 父类</span><br><span class="line">    const char *name                        OBJC2_UNAVAILABLE;  // 类名</span><br><span class="line">    long version                            OBJC2_UNAVAILABLE;  // 类的版本信息，默认为0</span><br><span class="line">    long info                               OBJC2_UNAVAILABLE;  // 类信息，供运行期使用的一些位标识</span><br><span class="line">    long instance_size                      OBJC2_UNAVAILABLE;  // 该类的实例变量大小</span><br><span class="line">    struct objc_ivar_list *ivars            OBJC2_UNAVAILABLE;  // 该类的成员变量链表</span><br><span class="line">    struct objc_method_list **methodLists   OBJC2_UNAVAILABLE;  // 方法定义的链表</span><br><span class="line">    struct objc_cache *cache                OBJC2_UNAVAILABLE;  // 方法缓存</span><br><span class="line">    struct objc_protocol_list *protocols    OBJC2_UNAVAILABLE;  // 协议链表</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">&#125; OBJC2_UNAVAILABLE;</span><br></pre></td></tr></table></figure><h3 id="2）object-objec与id"><a href="#2）object-objec与id" class="headerlink" title="2）object_objec与id"></a>2）object_objec与id</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// objc_object是表示一个类的实例的结构体</span><br><span class="line">struct objc_object &#123;</span><br><span class="line">    Class isa  OBJC_ISA_AVAILABILITY;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">typedef struct objc_object *id;</span><br></pre></td></tr></table></figure><h3 id="3）objc-cache"><a href="#3）objc-cache" class="headerlink" title="3）objc_cache"></a>3）objc_cache</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 缓存调用过的方法。这个字段是一个指向objc_cache结构体的指针</span><br><span class="line">struct objc_cache &#123;</span><br><span class="line">    unsigned int mask /* total = mask + 1 */                 OBJC2_UNAVAILABLE;</span><br><span class="line">    unsigned int occupied                                    OBJC2_UNAVAILABLE;</span><br><span class="line">    Method buckets[1]                                        OBJC2_UNAVAILABLE;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="4）元类（Meta-Class）"><a href="#4）元类（Meta-Class）" class="headerlink" title="4）元类（Meta Class）"></a>4）元类（Meta Class）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// meta-class是一个类对象的类。</span><br></pre></td></tr></table></figure><h2 id="2-类相关操作函数"><a href="#2-类相关操作函数" class="headerlink" title="2.类相关操作函数"></a>2.类相关操作函数</h2><h3 id="1）类名（name）"><a href="#1）类名（name）" class="headerlink" title="1）类名（name）"></a>1）类名（name）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 获取类的类名</span><br><span class="line">const char * class_getName ( Class cls );</span><br><span class="line">// 获取类的父类</span><br><span class="line">Class class_getSuperclass ( Class cls );</span><br><span class="line">// 判断给定的Class是否是一个元类</span><br><span class="line">BOOL class_isMetaClass ( Class cls );</span><br></pre></td></tr></table></figure><h3 id="2）实例变量大小"><a href="#2）实例变量大小" class="headerlink" title="2）实例变量大小"></a>2）实例变量大小</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 获取实例大小</span><br><span class="line">size_t class_getInstanceSize ( Class cls );</span><br></pre></td></tr></table></figure><h3 id="3）成员变量（ivar）及属性"><a href="#3）成员变量（ivar）及属性" class="headerlink" title="3）成员变量（ivar）及属性"></a>3）成员变量（ivar）及属性</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 获取类中指定名称实例成员变量的信息</span><br><span class="line">Ivar class_getInstanceVariable ( Class cls, const char *name );</span><br><span class="line">// 获取类成员变量的信息</span><br><span class="line">Ivar class_getClassVariable ( Class cls, const char *name );</span><br><span class="line">// 添加成员变量</span><br><span class="line">BOOL class_addIvar ( Class cls, const char *name, size_t size, uint8_t alignment, const char *types );</span><br><span class="line">// 获取整个成员变量列表</span><br><span class="line">Ivar * class_copyIvarList ( Class cls, unsigned int *outCount );</span><br><span class="line"></span><br><span class="line">// 属性操作</span><br><span class="line">// 获取指定的属性</span><br><span class="line">objc_property_t class_getProperty ( Class cls, const char *name );</span><br><span class="line">// 获取属性列表</span><br><span class="line">objc_property_t * class_copyPropertyList ( Class cls, unsigned int *outCount );</span><br><span class="line">// 为类添加属性</span><br><span class="line">BOOL class_addProperty ( Class cls, const char *name, const objc_property_attribute_t *attributes, unsigned int attributeCount );</span><br><span class="line">// 替换类的属性</span><br><span class="line">void class_replaceProperty ( Class cls, const char *name, const objc_property_attribute_t *attributes, unsigned int attributeCount );</span><br></pre></td></tr></table></figure><h3 id="4）方法（methodLists）"><a href="#4）方法（methodLists）" class="headerlink" title="4）方法（methodLists）"></a>4）方法（methodLists）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 添加方法</span><br><span class="line">BOOL class_addMethod ( Class cls, SEL name, IMP imp, const char *types );</span><br><span class="line">// 获取实例方法</span><br><span class="line">Method class_getInstanceMethod ( Class cls, SEL name );</span><br><span class="line">// 获取类方法</span><br><span class="line">Method class_getClassMethod ( Class cls, SEL name );</span><br><span class="line">// 获取所有方法的数组</span><br><span class="line">Method * class_copyMethodList ( Class cls, unsigned int *outCount );</span><br><span class="line">// 替代方法的实现</span><br><span class="line">IMP class_replaceMethod ( Class cls, SEL name, IMP imp, const char *types );</span><br><span class="line">// 返回方法的具体实现</span><br><span class="line">IMP class_getMethodImplementation ( Class cls, SEL name );</span><br><span class="line">IMP class_getMethodImplementation_stret ( Class cls, SEL name );</span><br><span class="line">// 类实例是否响应指定的selector</span><br><span class="line">BOOL class_respondsToSelector ( Class cls, SEL sel );</span><br></pre></td></tr></table></figure><h3 id="5）协议"><a href="#5）协议" class="headerlink" title="5）协议"></a>5）协议</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 添加协议</span><br><span class="line">BOOL class_addProtocol ( Class cls, Protocol *protocol );</span><br><span class="line">// 返回类是否实现指定的协议</span><br><span class="line">BOOL class_conformsToProtocol ( Class cls, Protocol *protocol );</span><br><span class="line">// 返回类实现的协议列表</span><br><span class="line">Protocol * class_copyProtocolList ( Class cls, unsigned int *outCount );</span><br></pre></td></tr></table></figure><h3 id="6）版本"><a href="#6）版本" class="headerlink" title="6）版本"></a>6）版本</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 获取版本号</span><br><span class="line">int class_getVersion ( Class cls );</span><br><span class="line">// 设置版本号</span><br><span class="line">void class_setVersion ( Class cls, int version );</span><br></pre></td></tr></table></figure><h3 id="7）其他"><a href="#7）其他" class="headerlink" title="7）其他"></a>7）其他</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// runtime还提供了两个函数来供CoreFoundation的tool-free bridging使用，即：</span><br><span class="line">Class objc_getFutureClass ( const char *name );</span><br><span class="line">void objc_setFutureClass ( Class cls, const char *name );</span><br></pre></td></tr></table></figure><h2 id="3-动态创建类和对象"><a href="#3-动态创建类和对象" class="headerlink" title="3.动态创建类和对象"></a>3.动态创建类和对象</h2><h3 id="1）动态创建类"><a href="#1）动态创建类" class="headerlink" title="1）动态创建类"></a>1）动态创建类</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 创建一个新类和元类</span><br><span class="line">Class objc_allocateClassPair ( Class superclass, const char *name, size_t extraBytes );</span><br><span class="line">// 销毁一个类及其相关联的类</span><br><span class="line">void objc_disposeClassPair ( Class cls );</span><br><span class="line">// 在应用中注册由objc_allocateClassPair创建的类</span><br><span class="line">void objc_registerClassPair ( Class cls );</span><br></pre></td></tr></table></figure><h3 id="2）动态创建对象"><a href="#2）动态创建对象" class="headerlink" title="2）动态创建对象"></a>2）动态创建对象</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 创建类实例</span><br><span class="line">id class_createInstance ( Class cls, size_t extraBytes );</span><br><span class="line">// 在指定位置创建类实例</span><br><span class="line">id objc_constructInstance ( Class cls, void *bytes );</span><br><span class="line">// 销毁类实例</span><br><span class="line">void * objc_destructInstance ( id obj );</span><br></pre></td></tr></table></figure><h2 id="4-实例操作函数"><a href="#4-实例操作函数" class="headerlink" title="4.实例操作函数"></a>4.实例操作函数</h2><h3 id="1）针对整个对象进行操作的函数"><a href="#1）针对整个对象进行操作的函数" class="headerlink" title="1）针对整个对象进行操作的函数"></a>1）针对整个对象进行操作的函数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 返回指定对象的一份拷贝</span><br><span class="line">id object_copy ( id obj, size_t size );</span><br><span class="line">// 释放指定对象占用的内存</span><br><span class="line">id object_dispose ( id obj );</span><br></pre></td></tr></table></figure><h3 id="2）针对对象实例变量进行操作的函数"><a href="#2）针对对象实例变量进行操作的函数" class="headerlink" title="2）针对对象实例变量进行操作的函数"></a>2）针对对象实例变量进行操作的函数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 修改类实例的实例变量的值</span><br><span class="line">Ivar object_setInstanceVariable ( id obj, const char *name, void *value );</span><br><span class="line">// 获取对象实例变量的值</span><br><span class="line">Ivar object_getInstanceVariable ( id obj, const char *name, void **outValue );</span><br><span class="line">// 返回指向给定对象分配的任何额外字节的指针</span><br><span class="line">void * object_getIndexedIvars ( id obj );</span><br><span class="line">// 返回对象中实例变量的值</span><br><span class="line">id object_getIvar ( id obj, Ivar ivar );</span><br><span class="line">// 设置对象中实例变量的值</span><br><span class="line">void object_setIvar ( id obj, Ivar ivar, id value );</span><br></pre></td></tr></table></figure><h3 id="3）针对对象的类进行操作的函数"><a href="#3）针对对象的类进行操作的函数" class="headerlink" title="3）针对对象的类进行操作的函数"></a>3）针对对象的类进行操作的函数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 返回给定对象的类名</span><br><span class="line">const char * object_getClassName ( id obj );</span><br><span class="line">// 返回对象的类</span><br><span class="line">Class object_getClass ( id obj );</span><br><span class="line">// 设置对象的类</span><br><span class="line">Class object_setClass ( id obj, Class cls );</span><br></pre></td></tr></table></figure><h2 id="5-获取类定义"><a href="#5-获取类定义" class="headerlink" title="5.获取类定义"></a>5.获取类定义</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 获取已注册的类定义的列表</span><br><span class="line">int objc_getClassList ( Class *buffer, int bufferCount );</span><br><span class="line">// 创建并返回一个指向所有已注册类的指针列表</span><br><span class="line">Class * objc_copyClassList ( unsigned int *outCount );</span><br><span class="line">// 返回指定类的类定义</span><br><span class="line">Class objc_lookUpClass ( const char *name );</span><br><span class="line">Class objc_getClass ( const char *name );</span><br><span class="line">Class objc_getRequiredClass ( const char *name );</span><br><span class="line">// 返回指定类的元类</span><br><span class="line">Class objc_getMetaClass ( const char *name );</span><br></pre></td></tr></table></figure><h1 id="二、成员和成员属性"><a href="#二、成员和成员属性" class="headerlink" title="二、成员和成员属性"></a>二、成员和成员属性</h1><h2 id="1-类型编码（Type-Encoding）"><a href="#1-类型编码（Type-Encoding）" class="headerlink" title="1.类型编码（Type Encoding）"></a>1.类型编码（Type Encoding）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">float a[] = &#123;1.0, 2.0, 3.0&#125;;</span><br><span class="line">NSLog(@&quot;array encoding type: %s&quot;, @encode(typeof(a)));</span><br><span class="line">// 输出</span><br><span class="line">2014-10-28 11:44:54.731 RuntimeTest[942:50791] array encoding type: [3f]</span><br></pre></td></tr></table></figure><h2 id="2-成员变量、属性"><a href="#2-成员变量、属性" class="headerlink" title="2.成员变量、属性"></a>2.成员变量、属性</h2><h3 id="1）基础数据类型"><a href="#1）基础数据类型" class="headerlink" title="1）基础数据类型"></a>1）基础数据类型</h3><h4 id="（1）Ivar"><a href="#（1）Ivar" class="headerlink" title="（1）Ivar"></a>（1）Ivar</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// Ivar是表示实例变量的类型，其实际是一个指向objc_ivar结构体的指针</span><br><span class="line">typedef struct objc_ivar *Ivar;</span><br><span class="line"></span><br><span class="line">struct objc_ivar &#123;</span><br><span class="line">    char *ivar_name                 OBJC2_UNAVAILABLE;  // 变量名</span><br><span class="line">    char *ivar_type                 OBJC2_UNAVAILABLE;  // 变量类型</span><br><span class="line">    int ivar_offset                 OBJC2_UNAVAILABLE;  // 基地址偏移字节</span><br><span class="line">#ifdef __LP64__</span><br><span class="line">    int space                       OBJC2_UNAVAILABLE;</span><br><span class="line">#endif</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（2）objc-property-t"><a href="#（2）objc-property-t" class="headerlink" title="（2）objc_property_t"></a>（2）objc_property_t</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// objc_property_t是表示Objective-C声明的属性的类型，其实际是指向objc_property结构体的指针</span><br><span class="line">typedef struct objc_property *objc_property_t;</span><br></pre></td></tr></table></figure><h4 id="（3）objc-property-attribute-t"><a href="#（3）objc-property-attribute-t" class="headerlink" title="（3）objc_property_attribute_t"></a>（3）objc_property_attribute_t</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// objc_property_attribute_t定义了属性的特性(attribute)，它是一个结构体</span><br><span class="line">typedef struct &#123;</span><br><span class="line">    const char *name;           // 特性名</span><br><span class="line">    const char *value;          // 特性值</span><br><span class="line">&#125; objc_property_attribute_t;</span><br></pre></td></tr></table></figure><h3 id="2）关联对象（Associated-Object）"><a href="#2）关联对象（Associated-Object）" class="headerlink" title="2）关联对象（Associated Object）"></a>2）关联对象（Associated Object）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 关联对象类似于成员变量，不过是在运行时添加的. 分类的属性</span><br><span class="line">static char myKey;</span><br><span class="line"></span><br><span class="line">objc_setAssociatedObject(self, &amp;myKey, anObject, OBJC_ASSOCIATION_RETAIN);</span><br><span class="line">id anObject = objc_getAssociatedObject(self, &amp;myKey);</span><br></pre></td></tr></table></figure><h2 id="3-成员变量、属性的操作方法"><a href="#3-成员变量、属性的操作方法" class="headerlink" title="3.成员变量、属性的操作方法"></a>3.成员变量、属性的操作方法</h2><h3 id="1）成员变量"><a href="#1）成员变量" class="headerlink" title="1）成员变量"></a>1）成员变量</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 获取成员变量名</span><br><span class="line">const char * ivar_getName ( Ivar v );</span><br><span class="line">// 获取成员变量类型编码</span><br><span class="line">const char * ivar_getTypeEncoding ( Ivar v );</span><br><span class="line">// 获取成员变量的偏移量</span><br><span class="line">ptrdiff_t ivar_getOffset ( Ivar v );</span><br></pre></td></tr></table></figure><h3 id="2）关联对象"><a href="#2）关联对象" class="headerlink" title="2）关联对象"></a>2）关联对象</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 设置关联对象</span><br><span class="line">void objc_setAssociatedObject ( id object, const void *key, id value, objc_AssociationPolicy policy );</span><br><span class="line">// 获取关联对象</span><br><span class="line">id objc_getAssociatedObject ( id object, const void *key );</span><br><span class="line">// 移除关联对象</span><br><span class="line">void objc_removeAssociatedObjects ( id object );</span><br></pre></td></tr></table></figure><h3 id="3）属性"><a href="#3）属性" class="headerlink" title="3）属性"></a>3）属性</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 获取属性名</span><br><span class="line">const char * property_getName ( objc_property_t property );</span><br><span class="line">// 获取属性特性描述字符串</span><br><span class="line">const char * property_getAttributes ( objc_property_t property );</span><br><span class="line">// 获取属性中指定的特性</span><br><span class="line">char * property_copyAttributeValue ( objc_property_t property, const char *attributeName );</span><br><span class="line">// 获取属性的特性列表</span><br><span class="line">objc_property_attribute_t * property_copyAttributeList ( objc_property_t property, unsigned int *outCount );</span><br></pre></td></tr></table></figure><h1 id="三、方法和消息"><a href="#三、方法和消息" class="headerlink" title="三、方法和消息"></a>三、方法和消息</h1><h2 id="1-方法"><a href="#1-方法" class="headerlink" title="1.方法"></a>1.方法</h2><h3 id="1-SEL"><a href="#1-SEL" class="headerlink" title="1)SEL"></a>1)SEL</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// SEL又叫选择器，是表示一个方法的selector的指针</span><br><span class="line">typedef struct objc_selector *SEL;</span><br><span class="line"></span><br><span class="line">SEL sel1 = @selector(method1);</span><br><span class="line">NSLog(@&quot;sel : %p&quot;, sel1);</span><br><span class="line"></span><br><span class="line">RuntimeTest[52734:466626] sel : 0x100002d72</span><br></pre></td></tr></table></figure><h3 id="2-IMP"><a href="#2-IMP" class="headerlink" title="2)IMP"></a>2)IMP</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// IMP实际上是一个函数指针，指向方法实现的首地址</span><br><span class="line">id (*IMP)(id, SEL, ...)</span><br></pre></td></tr></table></figure><h3 id="3）Method"><a href="#3）Method" class="headerlink" title="3）Method"></a>3）Method</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">typedef struct objc_method *Method;</span><br><span class="line"> </span><br><span class="line">struct objc_method &#123;</span><br><span class="line">    SEL method_name                 OBJC2_UNAVAILABLE;  // 方法名</span><br><span class="line">    char *method_types                  OBJC2_UNAVAILABLE;</span><br><span class="line">    IMP method_imp                      OBJC2_UNAVAILABLE;  // 方法实现</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4）objc-method-description"><a href="#4）objc-method-description" class="headerlink" title="4）objc_method_description"></a>4）objc_method_description</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">struct objc_method_description &#123; </span><br><span class="line">SEL name; char *types;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2-方法相关操作函数"><a href="#2-方法相关操作函数" class="headerlink" title="2.方法相关操作函数"></a>2.方法相关操作函数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// 调用指定方法的实现</span><br><span class="line">id method_invoke ( id receiver, Method m, ... );</span><br><span class="line">// 调用返回一个数据结构的方法的实现</span><br><span class="line">void method_invoke_stret ( id receiver, Method m, ... );</span><br><span class="line">// 获取方法名</span><br><span class="line">SEL method_getName ( Method m );</span><br><span class="line">// 返回方法的实现</span><br><span class="line">IMP method_getImplementation ( Method m );</span><br><span class="line">// 获取描述方法参数和返回值类型的字符串</span><br><span class="line">const char * method_getTypeEncoding ( Method m );</span><br><span class="line">// 获取方法的返回值类型的字符串</span><br><span class="line">char * method_copyReturnType ( Method m );</span><br><span class="line">// 获取方法的指定位置参数的类型字符串</span><br><span class="line">char * method_copyArgumentType ( Method m, unsigned int index );</span><br><span class="line">// 通过引用返回方法的返回值类型字符串</span><br><span class="line">void method_getReturnType ( Method m, char *dst, size_t dst_len );</span><br><span class="line">// 返回方法的参数的个数</span><br><span class="line">unsigned int method_getNumberOfArguments ( Method m );</span><br><span class="line">// 通过引用返回方法指定位置参数的类型字符串</span><br><span class="line">void method_getArgumentType ( Method m, unsigned int index, char *dst, size_t dst_len );</span><br><span class="line">// 返回指定方法的方法描述结构体</span><br><span class="line">struct objc_method_description * method_getDescription ( Method m );</span><br><span class="line">// 设置方法的实现</span><br><span class="line">IMP method_setImplementation ( Method m, IMP imp );</span><br><span class="line">// 交换两个方法的实现</span><br><span class="line">void method_exchangeImplementations ( Method m1, Method m2 );</span><br></pre></td></tr></table></figure><h2 id="3-方法选择器"><a href="#3-方法选择器" class="headerlink" title="3.方法选择器"></a>3.方法选择器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 返回给定选择器指定的方法的名称</span><br><span class="line">const char * sel_getName ( SEL sel );</span><br><span class="line">// 在Objective-C Runtime系统中注册一个方法，将方法名映射到一个选择器，并返回这个选择器</span><br><span class="line">SEL sel_registerName ( const char *str );</span><br><span class="line">// 在Objective-C Runtime系统中注册一个方法</span><br><span class="line">SEL sel_getUid ( const char *str );</span><br><span class="line">// 比较两个选择器</span><br><span class="line">BOOL sel_isEqual ( SEL lhs, SEL rhs );</span><br></pre></td></tr></table></figure><h2 id="4-方法调用流程"><a href="#4-方法调用流程" class="headerlink" title="4.方法调用流程"></a>4.方法调用流程</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">objc_msgSend(receiver, selector, arg1, arg2, ...)</span><br><span class="line">    // 当消息发送给一个对象时，objc_msgSend通过对象的isa指针获取到类的结构体，然后在方法分发表里面查找方法的selector。如果 没有找到selector，则通过objc_msgSend结构体中的指向父类的指针找到其父类，并在父类的分发表里面查找方法的selector。依 此，会一直沿着类的继承体系到达NSObject类。一旦定位到selector，函数会就获取到了实现的入口点，并传入相应的参数来执行方法的具体实 现。如果最后没有定位到selector，则会走消息转发流程</span><br></pre></td></tr></table></figure><h2 id="5-隐藏参数"><a href="#5-隐藏参数" class="headerlink" title="5.隐藏参数"></a>5.隐藏参数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">消息接收对象     self</span><br><span class="line">方法的selector  _cmd</span><br></pre></td></tr></table></figure><h2 id="6-获取方法地址"><a href="#6-获取方法地址" class="headerlink" title="6.获取方法地址"></a>6.获取方法地址</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// Runtime中方法的动态绑定让我们写代码时更具灵活性，如我们可以把消息转发给我们想要的对象，或者随意交换一个方法的实现等。不过灵活性的提 升也带来了性能上的一些损耗。毕竟我们需要去查找方法的实现，而不像函数调用来得那么直接。当然，方法的缓存一定程度上解决了这一问题。</span><br><span class="line">// NSObject类提供了methodForSelector:方法，让我们可以获取到方法的指针，然后通过这个指针来调用实现代码。我们需要将methodForSelector:返回的指针转换为合适的函数类型，函数参数和返回值都需要匹配上。</span><br><span class="line">void (*setter)(id, SEL, BOOL);</span><br><span class="line">int i;</span><br><span class="line"> </span><br><span class="line">setter = (void (*)(id, SEL, BOOL))[target</span><br><span class="line">    methodForSelector:@selector(setFilled:)];</span><br><span class="line">for ( i = 0 ; i &lt; 1000 ; i++ )</span><br><span class="line">    setter(targetList[i], @selector(setFilled:), YES);</span><br></pre></td></tr></table></figure><h2 id="7-消息转发"><a href="#7-消息转发" class="headerlink" title="7.消息转发"></a>7.消息转发</h2><h3 id="1）动态方法解析"><a href="#1）动态方法解析" class="headerlink" title="1）动态方法解析"></a>1）动态方法解析</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 对象在接收到未知的消息时，首先会调用所属类的类方法+resolveInstanceMethod:(实例方法)或 者+resolveClassMethod:(类方法)。在这个方法中，我们有机会为该未知消息新增一个”处理方法”“。不过使用该方法的前提是我们已经 实现了该”处理方法”，只需要在运行时通过class_addMethod函数动态添加到类里面就可以了。如下代码所示：</span><br><span class="line">void functionForMethod1(id self, SEL _cmd) &#123;</span><br><span class="line">   NSLog(@&quot;%@, %p&quot;, self, _cmd);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">+ (BOOL)resolveInstanceMethod:(SEL)sel &#123;</span><br><span class="line">    NSString *selectorString = NSStringFromSelector(sel);</span><br><span class="line">    if ([selectorString isEqualToString:@&quot;method1&quot;]) &#123;</span><br><span class="line">        class_addMethod(self.class, @selector(method1), (IMP)functionForMethod1, &quot;@:&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return [super resolveInstanceMethod:sel];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2）备用接受者"><a href="#2）备用接受者" class="headerlink" title="2）备用接受者"></a>2）备用接受者</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 如果在上一步无法处理消息，则Runtime会继续调以下方法:</span><br><span class="line">- (id)forwardingTargetForSelector:(SEL)aSelector</span><br></pre></td></tr></table></figure><h3 id="3）完整消息转发"><a href="#3）完整消息转发" class="headerlink" title="3）完整消息转发"></a>3）完整消息转发</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 消息转发机制使用从这个方法中获取的信息来创建NSInvocation对象。因此我们必须重写这个方法，为给定的selector提供一个合适的方法签名。</span><br><span class="line">- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector</span><br><span class="line">// 如果在上一步还不能处理未知消息，则唯一能做的就是启用完整的消息转发机制了。此时会调用以下方法：</span><br><span class="line">// 运行时系统会在这一步给消息接收者最后一次机会将消息转发给其它对象。对象会创建一个表示消息的NSInvocation对象，把与尚未处理的消息 有关的全部细节都封装在anInvocation中，包括selector，目标(target)和参数。我们可以在forwardInvocation 方法中选择将消息转发给其它对象。</span><br><span class="line">- (void)forwardInvocation:(NSInvocation *)anInvocation</span><br></pre></td></tr></table></figure><h3 id="4）消息转发与多继承"><a href="#4）消息转发与多继承" class="headerlink" title="4）消息转发与多继承"></a>4）消息转发与多继承</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 不过消息转发虽然类似于继承，但NSObject的一些方法还是能区分两者。如respondsToSelector:和isKindOfClass:只能用于继承体系，而不能用于转发链。便如果我们想让这种消息转发看起来像是继承，则可以重写这些方法，如以下代码所示：</span><br><span class="line">- (BOOL)respondsToSelector:(SEL)aSelector   &#123;</span><br><span class="line">       if ( [super respondsToSelector:aSelector] )</span><br><span class="line">                return YES;     </span><br><span class="line">       else &#123;</span><br><span class="line">                 /* Here, test whether the aSelector message can</span><br><span class="line">                  *            </span><br><span class="line">                  * be forwarded to another object and whether that  </span><br><span class="line">                  *            </span><br><span class="line">                  * object can respond to it. Return YES if it can.  </span><br><span class="line">                  */      </span><br><span class="line">       &#125;</span><br><span class="line">       return NO;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四、Method-Swizzling"><a href="#四、Method-Swizzling" class="headerlink" title="四、Method Swizzling"></a>四、Method Swizzling</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;objc/runtime.h&gt;</span><br><span class="line"></span><br><span class="line">@implementation UIViewController (Tracking)</span><br><span class="line"></span><br><span class="line">+ (void)load &#123;</span><br><span class="line">        static dispatch_once_t onceToken;</span><br><span class="line">    dispatch_once(&amp;onceToken, ^&#123;</span><br><span class="line">        Class class = [self class];         </span><br><span class="line">        // When swizzling a class method, use the following:</span><br><span class="line">                    // Class class = object_getClass((id)self);</span><br><span class="line"></span><br><span class="line">        SEL originalSelector = @selector(viewWillAppear:);</span><br><span class="line">                    SEL swizzledSelector = @selector(xxx_viewWillAppear:);</span><br><span class="line"></span><br><span class="line">        Method originalMethod = class_getInstanceMethod(class, originalSelector);</span><br><span class="line">                    Method swizzledMethod = class_getInstanceMethod(class, swizzledSelector);</span><br><span class="line"></span><br><span class="line">        BOOL didAddMethod =</span><br><span class="line">                        class_addMethod(class,</span><br><span class="line">                originalSelector,</span><br><span class="line">                method_getImplementation(swizzledMethod),</span><br><span class="line">                method_getTypeEncoding(swizzledMethod));</span><br><span class="line"></span><br><span class="line">        if (didAddMethod) &#123;</span><br><span class="line">                        class_replaceMethod(class,</span><br><span class="line">                swizzledSelector,</span><br><span class="line">                method_getImplementation(originalMethod),</span><br><span class="line">                method_getTypeEncoding(originalMethod));</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            method_exchangeImplementations(originalMethod, swizzledMethod);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - Method Swizzling</span><br><span class="line"></span><br><span class="line">- (void)xxx_viewWillAppear:(BOOL)animated &#123;</span><br><span class="line">        [self xxx_viewWillAppear:animated];</span><br><span class="line">    NSLog(@&quot;viewWillAppear: %@&quot;, self);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><h1 id="五、协议与分类"><a href="#五、协议与分类" class="headerlink" title="五、协议与分类"></a>五、协议与分类</h1><h2 id="1-基础数据类型"><a href="#1-基础数据类型" class="headerlink" title="1.基础数据类型"></a>1.基础数据类型</h2><h3 id="1）Category"><a href="#1）Category" class="headerlink" title="1）Category"></a>1）Category</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// Category是表示一个指向分类的结构体的指针</span><br><span class="line">typedef struct objc_category *Category;</span><br><span class="line"></span><br><span class="line">struct objc_category &#123;</span><br><span class="line">    char *category_name                          OBJC2_UNAVAILABLE; // 分类名</span><br><span class="line">    char *class_name                             OBJC2_UNAVAILABLE; // 分类所属的类名</span><br><span class="line">    struct objc_method_list *instance_methods    OBJC2_UNAVAILABLE; // 实例方法列表</span><br><span class="line">    struct objc_method_list *class_methods       OBJC2_UNAVAILABLE; // 类方法列表</span><br><span class="line">    struct objc_protocol_list *protocols         OBJC2_UNAVAILABLE; // 分类所实现的协议列表</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2）Protocol"><a href="#2）Protocol" class="headerlink" title="2）Protocol"></a>2）Protocol</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">typedef struct objc_object Protocol;</span><br><span class="line"></span><br><span class="line">// 返回指定的协议</span><br><span class="line">Protocol * objc_getProtocol ( const char *name );</span><br><span class="line">// 获取运行时所知道的所有协议的数组</span><br><span class="line">Protocol ** objc_copyProtocolList ( unsigned int *outCount );</span><br><span class="line">// 创建新的协议实例</span><br><span class="line">Protocol * objc_allocateProtocol ( const char *name );</span><br><span class="line">// 在运行时中注册新创建的协议</span><br><span class="line">void objc_registerProtocol ( Protocol *proto );</span><br><span class="line">// 为协议添加方法</span><br><span class="line">void protocol_addMethodDescription ( Protocol *proto, SEL name, const char *types, BOOL isRequiredMethod, BOOL isInstanceMethod );</span><br><span class="line">// 添加一个已注册的协议到协议中</span><br><span class="line">void protocol_addProtocol ( Protocol *proto, Protocol *addition );</span><br><span class="line">// 为协议添加属性</span><br><span class="line">void protocol_addProperty ( Protocol *proto, const char *name, const objc_property_attribute_t *attributes, unsigned int attributeCount, BOOL isRequiredProperty, BOOL isInstanceProperty );</span><br><span class="line">// 返回协议名</span><br><span class="line">const char * protocol_getName ( Protocol *p );</span><br><span class="line">// 测试两个协议是否相等</span><br><span class="line">BOOL protocol_isEqual ( Protocol *proto, Protocol *other );</span><br><span class="line">// 获取协议中指定条件的方法的方法描述数组</span><br><span class="line">struct objc_method_description * protocol_copyMethodDescriptionList ( Protocol *p, BOOL isRequiredMethod, BOOL isInstanceMethod, unsigned int *outCount );</span><br><span class="line">// 获取协议中指定方法的方法描述</span><br><span class="line">struct objc_method_description protocol_getMethodDescription ( Protocol *p, SEL aSel, BOOL isRequiredMethod, BOOL isInstanceMethod );</span><br><span class="line">// 获取协议中的属性列表</span><br><span class="line">objc_property_t * protocol_copyPropertyList ( Protocol *proto, unsigned int *outCount );</span><br><span class="line">// 获取协议的指定属性</span><br><span class="line">objc_property_t protocol_getProperty ( Protocol *proto, const char *name, BOOL isRequiredProperty, BOOL isInstanceProperty );</span><br><span class="line">// 获取协议采用的协议</span><br><span class="line">Protocol ** protocol_copyProtocolList ( Protocol *proto, unsigned int *outCount );</span><br><span class="line">// 查看协议是否采用了另一个协议</span><br><span class="line">BOOL protocol_conformsToProtocol ( Protocol *proto, Protocol *other );</span><br></pre></td></tr></table></figure><h1 id="六、Runtime的具体运用"><a href="#六、Runtime的具体运用" class="headerlink" title="六、Runtime的具体运用"></a>六、Runtime的具体运用</h1><ol><li>查看运行时系统中类、对象、方法、属性、协议的各类信息内容，可以进系统 API 的<strong>objc/runtime</strong>中查看</li><li>动态的创建类和方法，并对其操作</li><li>交换方法的实现</li><li>为某个对象添加方法</li><li>消息转发。。。</li></ol><p><strong>参考文章</strong><br><a href="https://www.jianshu.com/p/6b905584f536">runtime 完整总结</a></p>]]></content>
      
      
      <categories>
          
          <category> Runtime </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>教你从零到一搭建组件化项目</title>
      <link href="/2018/12/03/%E6%95%99%E4%BD%A0%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E6%90%AD%E5%BB%BA%E7%BB%84%E4%BB%B6%E5%8C%96%E9%A1%B9%E7%9B%AE/"/>
      <url>/2018/12/03/%E6%95%99%E4%BD%A0%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E6%90%AD%E5%BB%BA%E7%BB%84%E4%BB%B6%E5%8C%96%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>组件化的目的就是为了在项目越做越大的时候，进行项目的解耦，在需要加入模块的时候直接pod，不需要是直接删除pod即可，方便快捷，使得项目模块清晰，更加可以自由复用。 </p><p>前篇介绍了怎么用<a href="https://www.jianshu.com/p/9975a364b476">Cococapods搭建私有仓库</a>，这里我们就用这种方式去搭建我们的组件化项目。</p></blockquote><h2 id="一、概览"><a href="#一、概览" class="headerlink" title="一、概览"></a>一、概览</h2><p>  搭建组件化项目我们首先需要一个组件的调度中心，这里我借用了casatwy的<a href="https://github.com/casatwy/CTMediator">CTMediator</a>，同时也可以看看他对于组件化项目的讲解，<a href="https://casatwy.com/iOS-Modulization.html" title="Permalink to iOS应用架构谈 组件化方案">iOS应用架构谈 组件化方案</a>]。<br>其次我建立一个主工程HHYMainComponent，还有三个组件模块：HHYComponentA、HHYComponentB、HHYComponentC。</p><p>关系如下：</p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220519235319858.png" alt="Snip20181203_1.png"></p><p>下面就开始搭建我们的项目。</p><h2 id="二、搭建项目"><a href="#二、搭建项目" class="headerlink" title="二、搭建项目"></a>二、搭建项目</h2><h4 id="1-创建调度中心"><a href="#1-创建调度中心" class="headerlink" title="1. 创建调度中心"></a>1. 创建调度中心</h4><p>这里我们用CTMediator作为我们的调度中心，创建一个文件夹放入核心代码，初始化podspec文件，并上传到github上。这里不太清楚podspec的可以先去看下前篇文章：<a href="https://www.jianshu.com/p/9975a364b476">Cococapods搭建私有仓库</a></p><h4 id="2-创建模块及主工程"><a href="#2-创建模块及主工程" class="headerlink" title="2.创建模块及主工程"></a>2.创建模块及主工程</h4><p>这里每个模块及工程我们各建一个空工程，初始化pod及podspec。<br>到这里我们的项目工程都搭建出来了。下面我们开始分析模块化怎么搭建。</p><h4 id="3-搭建模块ABC"><a href="#3-搭建模块ABC" class="headerlink" title="3.搭建模块ABC"></a>3.搭建模块ABC</h4><p>这里我们以我搭建的HHYComponentA项目为例来讲解。<br>首先我搭建的模块项目目录结构如下：</p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220519235319903.png" alt="Snip20181203_2.png"></p><p>一级目录里我们有 podspec 以及 MIT 证书文件，另跟github上的项目关联了，其次二级目录里我们除了初始化的项目工程文件外我们还建了四个文件夹：Controller、CTMediaCategory、Model、Target。<br>这里关于Model文件是我用来做对象类型传值用的，没什么用，暂且不谈了，主要是另外几个文件。</p><ul><li>Controller：就是我们的模块化控制器</li><li>CTMediaCategory：是我们的调度中心CTMediator的一个分类，它主要负责消息的转发及参数的传递。</li><li>Target：它负责通过消息转发之后的消息处理，进行控制器对象的创建并返回。</li></ul><p>这个就是我们创建好后的工程目录结构：</p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220519235320039.png" alt="Snip20181203_3.png"></p><h5 id="1）CTMediator-HHYComponentA"><a href="#1）CTMediator-HHYComponentA" class="headerlink" title="1）CTMediator+HHYComponentA"></a>1）CTMediator+HHYComponentA</h5><p>这里我们先看CTMediator+HHYComponentA文件<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- (UIViewController *)HHYComponentA:(HHYUser *)user &#123;</span><br><span class="line">    NSMutableDictionary *params = [[NSMutableDictionary alloc] init];</span><br><span class="line">    params[@&quot;user&quot;] = user;</span><br><span class="line">    return [self performTarget:@&quot;HHYComponentA&quot; action:@&quot;HHYComponentA&quot; params:params shouldCacheTarget:NO];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这里我们通过调用调度中心的<strong>performTarget： action： params: shouldCacheTarget:</strong>方法将参数传递进去，同时返回一个控制器。我们进入这个方法看一下。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">- (id)performTarget:(NSString *)targetName action:(NSString *)actionName params:(NSDictionary *)params shouldCacheTarget:(BOOL)shouldCacheTarget</span><br><span class="line">&#123;</span><br><span class="line">    NSString *swiftModuleName = params[kCTMediatorParamsKeySwiftTargetModuleName];</span><br><span class="line">    </span><br><span class="line">    // generate target</span><br><span class="line">    NSString *targetClassString = nil;</span><br><span class="line">    if (swiftModuleName.length &gt; 0) &#123;</span><br><span class="line">        targetClassString = [NSString stringWithFormat:@&quot;%@.Target_%@&quot;, swiftModuleName, targetName];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        targetClassString = [NSString stringWithFormat:@&quot;Target_%@&quot;, targetName];</span><br><span class="line">    &#125;</span><br><span class="line">    NSObject *target = self.cachedTarget[targetClassString];</span><br><span class="line">    if (target == nil) &#123;</span><br><span class="line">        Class targetClass = NSClassFromString(targetClassString);</span><br><span class="line">        target = [[targetClass alloc] init];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // generate action</span><br><span class="line">    NSString *actionString = [NSString stringWithFormat:@&quot;Action_%@:&quot;, actionName];</span><br><span class="line">    SEL action = NSSelectorFromString(actionString);</span><br><span class="line">    </span><br><span class="line">    if (target == nil) &#123;</span><br><span class="line">        // 这里是处理无响应请求的地方之一，这个demo做得比较简单，如果没有可以响应的target，就直接return了。实际开发过程中是可以事先给一个固定的target专门用于在这个时候顶上，然后处理这种请求的</span><br><span class="line">        [self NoTargetActionResponseWithTargetString:targetClassString selectorString:actionString originParams:params];</span><br><span class="line">        return nil;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if (shouldCacheTarget) &#123;</span><br><span class="line">        self.cachedTarget[targetClassString] = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if ([target respondsToSelector:action]) &#123;</span><br><span class="line">        return [self safePerformAction:action target:target params:params];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        // 这里是处理无响应请求的地方，如果无响应，则尝试调用对应target的notFound方法统一处理</span><br><span class="line">        SEL action = NSSelectorFromString(@&quot;notFound:&quot;);</span><br><span class="line">        if ([target respondsToSelector:action]) &#123;</span><br><span class="line">            return [self safePerformAction:action target:target params:params];</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // 这里也是处理无响应请求的地方，在notFound都没有的时候，这个demo是直接return了。实际开发过程中，可以用前面提到的固定的target顶上的。</span><br><span class="line">            [self NoTargetActionResponseWithTargetString:targetClassString selectorString:actionString originParams:params];</span><br><span class="line">            [self.cachedTarget removeObjectForKey:targetClassString];</span><br><span class="line">            return nil;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这里可以看到这个方法是对消息转发的一个操作，创建了一个Target_ targetName的对象，执行这个对象中的一个Action_actionName的一个方法，并对无target的一个保护操作。</p><h5 id="2）Target-HHYComponentA"><a href="#2）Target-HHYComponentA" class="headerlink" title="2）Target_HHYComponentA"></a>2）Target_HHYComponentA</h5><p>这个文件就是上面消息转发中对应Target_ targetName的对象，里面有一个对应的Action_actionName执行方法。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- (UIViewController *)Action_HHYComponentA:(NSDictionary *)params &#123;</span><br><span class="line">    HHYComponentAViewController *VC = [[HHYComponentAViewController alloc] init];</span><br><span class="line">    VC.user = params[@&quot;user&quot;];</span><br><span class="line">    return VC;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这里返回就是我们创建的模块控制器，通过NSDictionary我们可以传递复杂的参数类型和方法的回调。</p><h5 id="3）HHYComponentAViewController"><a href="#3）HHYComponentAViewController" class="headerlink" title="3）HHYComponentAViewController"></a>3）HHYComponentAViewController</h5><p>这里面我没写什么，就打印了下传递的参数。</p><p>这样，我们的模块组件A就搭建完成了</p><h5 id="4）HHYComponentA-podspec"><a href="#4）HHYComponentA-podspec" class="headerlink" title="4）HHYComponentA.podspec"></a>4）HHYComponentA.podspec</h5><p>这里我们要说一下spec文件，我写的时候被这个文件搞的头大。<br>因为我们的调度中心是放在我们的私有仓库的，模块A引用了私有仓库的文件，而我们的模块又是要放在我们的私有仓库，所以就形成了<strong>私有仓库调用私有仓库</strong><br>因此，我们调用的私有仓库要在spec文件中声明，同时在终端验证的时候也要声明其来源。这个我们在上一篇文章中没有提及<br>另外项目的<strong>目录层级</strong>结构也要注意一下，下面就是我建的spec文件<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Pod::Spec.new do |s|</span><br><span class="line"></span><br><span class="line">  # 项目名称</span><br><span class="line">  s.name         = &quot;HHYComponentA&quot;</span><br><span class="line">  # 项目版本号</span><br><span class="line">  s.version      = &quot;0.0.7&quot;</span><br><span class="line">  # 项目摘要</span><br><span class="line">  s.summary      = &quot;HHYComponentA&quot;</span><br><span class="line">  # 详细描述</span><br><span class="line">  s.description  = &quot;HHYComponentA远程仓库&quot;</span><br><span class="line">  # 仓库主页地址</span><br><span class="line">  s.homepage     = &quot;https://github.com/HuiYouHua/HHYComponentA&quot;</span><br><span class="line"></span><br><span class="line">  # 证书</span><br><span class="line">  s.license      = &#123; :type =&gt; &quot;MIT&quot;, :file =&gt; &quot;LICENSE&quot; &#125;</span><br><span class="line"></span><br><span class="line">  # 作者名称邮箱地址</span><br><span class="line">  s.author             = &#123; &quot;华惠友&quot; =&gt; &quot;793316968@qq.com&quot; &#125;</span><br><span class="line"></span><br><span class="line">  # 平台版本号</span><br><span class="line">  s.platform     = :ios, &quot;8.0&quot;</span><br><span class="line"></span><br><span class="line">  # git源码地址</span><br><span class="line">  s.source       = &#123; :git =&gt; &quot;https://github.com/HuiYouHua/HHYComponentA.git&quot;, :tag =&gt; &quot;#&#123;s.version&#125;&quot; &#125;</span><br><span class="line"></span><br><span class="line">s.source_files  = &quot;HHYComponentA/HHYComponentA.h&quot;</span><br><span class="line"></span><br><span class="line">s.subspec &#x27;Controller&#x27; do |c|</span><br><span class="line"> c.source_files = &#x27;HHYComponentA/Controller/**/*.&#123;h,m&#125;&#x27;</span><br><span class="line">c.dependency &quot;HHYComponentA/Model&quot;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">s.subspec &#x27;Target&#x27; do |t|</span><br><span class="line">t.source_files = &#x27;HHYComponentA/Target/**/*.&#123;h,m&#125;&#x27;</span><br><span class="line">t.dependency &quot;HHYComponentA/Controller&quot;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">s.subspec &#x27;CTMediaCategory&#x27; do |ct|</span><br><span class="line">  ct.source_files = &quot;HHYComponentA/CTMediaCategory/**/*.&#123;h,m&#125;&quot;</span><br><span class="line">  ct.dependency &quot;HHYComponentA/Model&quot;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">s.subspec &#x27;Model&#x27; do |m|</span><br><span class="line">  m.source_files = &quot;HHYComponentA/Model/**/*.&#123;h,m&#125;&quot;</span><br><span class="line">end</span><br><span class="line">      </span><br><span class="line">   s.public_header_files = &quot;HHYComponentA/HHYComponentA.h&quot;</span><br><span class="line"></span><br><span class="line">   # 对私有仓库引用的依赖说明</span><br><span class="line">   s.dependency &#x27;HHYCTMediator&#x27;, &#x27;~&gt; 0.0.3&#x27;</span><br><span class="line">   s.requires_arc     = true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">end</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>这里面声明的文件就是后面我们<strong>pod install</strong>下来的文件，不需要传的文件就不需要声明了。</p><p>下面进行配置文件的验证及上传命令</p><ul><li><p><strong>pod lib lint —sources=私有spec索引地址,git spec索引地址  —allow-warnings  —use-libraries</strong></p></li><li><p><strong>pod repo push 本地spec索引名称 上传的spec文件 —sources=私有spec索引地址,git spec索引地址 —allow-warnings  —use-libraries</strong><br>eg：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pod lib lint --sources=https://github.com/HuiYouHua/HHYSpecs.git,https://github.com/CocoaPods/Specs.git  --allow-warnings  --use-libraries</span><br><span class="line"></span><br><span class="line">pod repo push HHYSpecs HHYComponentA.podspec --sources=https://github.com/HuiYouHua/HHYSpecs.git,https://github.com/CocoaPods/Specs.git --allow-warnings  --use-libraries</span><br></pre></td></tr></table></figure><p>同样，其他的三个模块搭建方式基本差不多，我这里只是做了不同参数的处理。到了这里，我们就可以在我们主工程里调用搭建的三个模块了。</p><h2 id="三、主工程进行调用"><a href="#三、主工程进行调用" class="headerlink" title="三、主工程进行调用"></a>三、主工程进行调用</h2><p>模块A:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- (IBAction)componentA:(id)sender &#123;</span><br><span class="line">    HHYUser *user = [HHYUser new];</span><br><span class="line">    user.name = @&quot;huayoyu&quot;;</span><br><span class="line">    user.age = 18;</span><br><span class="line">    UIViewController *vc = [[CTMediator sharedInstance] HHYComponentA:user];</span><br><span class="line">    [self.navigationController pushViewController:vc animated:YES];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>模块B：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- (IBAction)componentB:(id)sender &#123;</span><br><span class="line">    NSArray *array = @[@&quot;1&quot;, @&quot;2&quot;, @&quot;3&quot;, @&quot;4&quot;];</span><br><span class="line">    UIViewController *vc = [[CTMediator sharedInstance] HHYComponentB:array WithCallback:^(NSArray * _Nonnull dataArray) &#123;</span><br><span class="line">        NSLog(@&quot;%@&quot;,dataArray);</span><br><span class="line">    &#125;];</span><br><span class="line">    [self.navigationController pushViewController:vc animated:YES];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>模块C:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (IBAction)componentC:(id)sender &#123;</span><br><span class="line">    UIViewController *vc = [[CTMediator sharedInstance] HHYComponentCWithCallback:^(NSString * _Nonnull result) &#123;</span><br><span class="line">        NSLog(@&quot;%@&quot;, result);</span><br><span class="line">    &#125;];</span><br><span class="line">    [self.navigationController pushViewController:vc animated:YES];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这样，组件化项目大体就搭建完成了。如果要对模块的增删，只需要对podfile文件进行操作，对入口的增删即可。</p><p>当然，这个只是简单的组件化项目的搭建，真正的项目当然还设计到其他很多东西，比如网络层、数据库、公共视图层、分类、第三方、AOP。。。，这个就需要更深一步的了解了。</p><p>项目git传送门：</p><blockquote><p><a href="https://github.com/HuiYouHua/HHYMainComponent">主工程</a><br><a href="https://github.com/HuiYouHua/HHYComponentA">组件A</a><br><a href="https://github.com/HuiYouHua/HHYComponentB">组件B</a><br><a href="https://github.com/HuiYouHua/HHYComponentC">组件C</a></p><p><a href="https://github.com/HuiYouHua/HHYCTMediator">组件调度中心</a><br><a href="https://github.com/HuiYouHua/HHYSpecs">私有索引仓库HHYSpecs</a><br>喜欢的git给个star哦</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 组件化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cocoapods建立远程仓库</title>
      <link href="/2018/11/28/Cocoapods%E5%BB%BA%E7%AB%8B%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/"/>
      <url>/2018/11/28/Cocoapods%E5%BB%BA%E7%AB%8B%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<blockquote><p> 准备看看iOS的组件化，这里需要使用到Cocoapods进行建立仓库，所以学习了下后，就准备记录一下，方便以后自己进行操作。</p><p> 首先呢，肯定是要安装Cocoapods的，这里我们就不多说了</p></blockquote><p><a href="https://github.com/HuiYouHua/HHYRep">代码仓库</a><br><a href="https://github.com/HuiYouHua/HHYSpecs">索引仓库</a></p><h2 id="一、创建远程仓库和工程"><a href="#一、创建远程仓库和工程" class="headerlink" title="一、创建远程仓库和工程"></a>一、创建远程仓库和工程</h2><h4 id="1-进入github创建一个项目，如图："><a href="#1-进入github创建一个项目，如图：" class="headerlink" title="1. 进入github创建一个项目，如图："></a>1. 进入<a href="https://github.com">github</a>创建一个项目，如图：</h4><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220519235128174.png" alt="Snip20181128_9.png"></p><p>这里的证书最好选择为MIT，不然后面可能有些小问题<br>    创建完成：</p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220519235128766.png" alt="Snip20181128_10.png"></p><p>这里我创建的项目叫<a href="https://github.com/HuiYouHua/HHYRep">HHYRep</a></p><h4 id="2-创建项目"><a href="#2-创建项目" class="headerlink" title="2. 创建项目"></a>2. 创建项目</h4><p>打开终端，cd到桌面<br>输入命令<strong>pod lib create HHYRep</strong>，这里是通过pod创建一个项目，如下：</p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220519235130330.png" alt="Snip20181128_11.png"></p><p>这里会让你回答几个问题：</p><ul><li>你要使用哪个平台？ iOS</li><li>你要使用哪种语言？ ObjC</li><li>是否要使用示例？ YES</li><li>使用哪个测试框架？ None</li><li>是否要UI测试？ No</li><li>类名前缀是啥？ HHY</li></ul><p>回答完毕后就会创建工程，执行完自动打开工程，目录结构如下：</p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220519235130748.png" alt="Snip20181128_12.png"></p><p>其中Example就是我们的示例工程，HHYReq就是我们存放仓库代码的位置，里面默认创建有Assets和Classes两个文件夹，我们的代码文件就放在Classes里，图片资源文件可以放在Assets里。<br>另外还有生成的License证书和REAME文件。<br>其中比较重要的一个文件是HHYRep.podspec，这是我们关联远程仓库的一个配置文件，稍后我们将在里面进行部分修改。</p><h4 id="3-放入代码和资源文件"><a href="#3-放入代码和资源文件" class="headerlink" title="3. 放入代码和资源文件"></a>3. 放入代码和资源文件</h4><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220519235131937.png" alt="Snip20181128_15.png"></p><p>加入代码文件，注意这里不要勾选target。</p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220519235132019.png" alt="Snip20181128_17.png"></p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220519235132064.png" alt="Snip20181128_18.png"></p><p>这里我添加了TimerHelper和UITableViewHelper两个文件，注意前面是有文件夹分层，如果需要在后续拉取后有文件层级关系，需要进行额外配置，后面有具体介绍。<br>  目录结构如下：</p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220519235132431.png" alt="Snip20181128_16.png"></p><p>另外，因为我们这里是创建了示例工程的，所以如果当你添加文件或者删除文件后，需要进入到Podfile同级目录下进行pod install，才可以引用引入的文件。</p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220519235132508.png" alt="Snip20181128_19.png"></p><h4 id="4-提交代码到刚刚创建的远程仓库"><a href="#4-提交代码到刚刚创建的远程仓库" class="headerlink" title="4. 提交代码到刚刚创建的远程仓库"></a>4. 提交代码到刚刚创建的远程仓库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">~/Desktop/HHYRep   master ●  git remote add origin https://github.com/HuiYouHua/HHYRep.git</span><br><span class="line">~/Desktop/HHYRep   master ●  git add .</span><br><span class="line">~/Desktop/HHYRep   master ✚  git commit -m -a</span><br><span class="line">~/Desktop/HHYRep   master  git push</span><br><span class="line">~/Desktop/HHYRep   master  git push -u origin </span><br><span class="line">~/Desktop/HHYRep   master  git tag 0.0.1</span><br><span class="line">~/Desktop/HHYRep   master  git push origin 0.0.1</span><br></pre></td></tr></table></figure><p>提交项目并打上版本号0.0.1，保持和HHYRep.podspec上的一致<br>这里提交除了点问题，但问题不大。<br>提交完之后，查看github上的工程目录如下:</p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220519235132991.png" alt="Snip20181128_20.png"></p><h2 id="二、关联仓库"><a href="#二、关联仓库" class="headerlink" title="二、关联仓库"></a>二、关联仓库</h2><h4 id="1-配置HHYRep-podspec文件"><a href="#1-配置HHYRep-podspec文件" class="headerlink" title="1. 配置HHYRep.podspec文件"></a>1. 配置HHYRep.podspec文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line">#</span><br><span class="line">#  Be sure to run `pod spec lint HHYLib.podspec&#x27; to ensure this is a</span><br><span class="line">#  valid spec and to remove all comments including this before submitting the spec.</span><br><span class="line">#</span><br><span class="line">#  To learn more about Podspec attributes see http://docs.cocoapods.org/specification.html</span><br><span class="line">#  To see working Podspecs in the CocoaPods repo see https://github.com/CocoaPods/Specs/</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">Pod::Spec.new do |s|</span><br><span class="line"></span><br><span class="line">  # ―――  Spec Metadata  ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #</span><br><span class="line">  #</span><br><span class="line">  #  These will help people to find your library, and whilst it</span><br><span class="line">  #  can feel like a chore to fill in it&#x27;s definitely to your advantage. The</span><br><span class="line">  #  summary should be tweet-length, and the description more in depth.</span><br><span class="line">  #</span><br><span class="line">  # 项目名称</span><br><span class="line">  s.name         = &quot;HHYRep&quot;</span><br><span class="line">  # 项目版本号</span><br><span class="line">  s.version      = &quot;0.0.1&quot;</span><br><span class="line">  # 项目摘要</span><br><span class="line">  s.summary      = &quot;HHYRep&quot;</span><br><span class="line"></span><br><span class="line">  # This description is used to generate tags and improve search results.</span><br><span class="line">  #   * Think: What does it do? Why did you write it? What is the focus?</span><br><span class="line">  #   * Try to keep it short, snappy and to the point.</span><br><span class="line">  #   * Write the description between the DESC delimiters below.</span><br><span class="line">  #   * Finally, don&#x27;t worry about the indent, CocoaPods strips it!</span><br><span class="line">  # 详细描述</span><br><span class="line">  s.description  = &quot;HHYRep远程仓库&quot;</span><br><span class="line"></span><br><span class="line">  # 仓库主页地址</span><br><span class="line">  s.homepage     = &quot;https://github.com/HuiYouHua/HHYRep&quot;</span><br><span class="line">  # s.screenshots  = &quot;www.example.com/screenshots_1.gif&quot;, &quot;www.example.com/screenshots_2.gif&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  # ―――  Spec License  ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #</span><br><span class="line">  #</span><br><span class="line">  #  Licensing your code is important. See http://choosealicense.com for more info.</span><br><span class="line">  #  CocoaPods will detect a license file if there is a named LICENSE*</span><br><span class="line">  #  Popular ones are &#x27;MIT&#x27;, &#x27;BSD&#x27; and &#x27;Apache License, Version 2.0&#x27;.</span><br><span class="line">  #</span><br><span class="line"></span><br><span class="line">  # s.license      = &quot;MIT (example)&quot;</span><br><span class="line">  # 证书</span><br><span class="line">  s.license      = &#123; :type =&gt; &quot;MIT&quot;, :file =&gt; &quot;LICENSE&quot; &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  # ――― Author Metadata  ――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #</span><br><span class="line">  #</span><br><span class="line">  #  Specify the authors of the library, with email addresses. Email addresses</span><br><span class="line">  #  of the authors are extracted from the SCM log. E.g. $ git log. CocoaPods also</span><br><span class="line">  #  accepts just a name if you&#x27;d rather not provide an email address.</span><br><span class="line">  #</span><br><span class="line">  #  Specify a social_media_url where others can refer to, for example a twitter</span><br><span class="line">  #  profile URL.</span><br><span class="line">  #</span><br><span class="line">  # 作者名称邮箱地址</span><br><span class="line">  s.author             = &#123; &quot;华惠友&quot; =&gt; &quot;793316968@qq.com&quot; &#125;</span><br><span class="line">  # Or just: s.author    = &quot;华惠友&quot;</span><br><span class="line">  # s.authors            = &#123; &quot;华惠友&quot; =&gt; &quot;793316968@qq.com&quot; &#125;</span><br><span class="line">  # s.social_media_url   = &quot;http://twitter.com/华惠友&quot;</span><br><span class="line"></span><br><span class="line">  # ――― Platform Specifics ――――――――――――――――――――――――――――――――――――――――――――――――――――――― #</span><br><span class="line">  #</span><br><span class="line">  #  If this Pod runs only on iOS or OS X, then specify the platform and</span><br><span class="line">  #  the deployment target. You can optionally include the target after the platform.</span><br><span class="line">  #</span><br><span class="line"></span><br><span class="line">  # s.platform     = :ios</span><br><span class="line">  # 平台版本号</span><br><span class="line">  s.platform     = :ios, &quot;8.0&quot;</span><br><span class="line"></span><br><span class="line">  #  When using multiple platforms</span><br><span class="line">  # s.ios.deployment_target = &quot;5.0&quot;</span><br><span class="line">  # s.osx.deployment_target = &quot;10.7&quot;</span><br><span class="line">  # s.watchos.deployment_target = &quot;2.0&quot;</span><br><span class="line">  # s.tvos.deployment_target = &quot;9.0&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  # ――― Source Location ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #</span><br><span class="line">  #</span><br><span class="line">  #  Specify the location from where the source should be retrieved.</span><br><span class="line">  #  Supports git, hg, bzr, svn and HTTP.</span><br><span class="line">  #</span><br><span class="line">  # git源码地址</span><br><span class="line">  s.source       = &#123; :git =&gt; &quot;https://github.com/HuiYouHua/HHYRep.git&quot;, :tag =&gt; &quot;#&#123;s.version&#125;&quot; &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  # ――― Source Code ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #</span><br><span class="line">  #</span><br><span class="line">  #  CocoaPods is smart about how it includes source code. For source files</span><br><span class="line">  #  giving a folder will include any swift, h, m, mm, c &amp; cpp files.</span><br><span class="line">  #  For header files it will include any header in the folder.</span><br><span class="line">  #  Not including the public_header_files will make all headers public.</span><br><span class="line">  #</span><br><span class="line"></span><br><span class="line">  # 不分层的话就可以直接按照下面的写法</span><br><span class="line">  # s.source_files  = &quot;Classes&quot;, &quot;Classes/**/*.&#123;h,m&#125;&quot;</span><br><span class="line">  # s.exclude_files = &quot;Classes/**/*.h&quot;</span><br><span class="line"></span><br><span class="line">  # 代码文件</span><br><span class="line">  # 分层文件夹</span><br><span class="line">  s.subspec &#x27;TimerHelper&#x27; do |t|</span><br><span class="line">t.subspec &#x27;GCD&#x27; do |gcd|</span><br><span class="line">  gcd.source_files = &#x27;HHYRep/Classes/TimerHelper/GCD/**/*.&#123;h,m&#125;&#x27;</span><br><span class="line">  # gcd.public_header_files = &#x27;Classes/TimerHelper/GCD/**/*.h&#x27;</span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line">  t.subspec &#x27;NSTimer&#x27; do |nst|</span><br><span class="line">  nst.source_files = &#x27;HHYRep/Classes/TimerHelper/NSTimer/**/*.&#123;h,m&#125;&#x27;</span><br><span class="line">  # nst.public_header_files = &#x27;Classes/TimerHelper/NSTimer/**/*.h&#x27;</span><br><span class="line">  end</span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line">  s.subspec &#x27;UITableVIewHelper&#x27; do |uit|</span><br><span class="line">  uit.source_files = &#x27;HHYRep/Classes/UITableVIewHelper/**/*.&#123;h,m&#125;&#x27;</span><br><span class="line">  # gcd.public_header_files = &#x27;Classes/TimerHelper/GCD/**/*.h&#x27;</span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  # s.public_header_files = &quot;Classes/**/*.h&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  # ――― Resources ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #</span><br><span class="line">  #</span><br><span class="line">  #  A list of resources included with the Pod. These are copied into the</span><br><span class="line">  #  target bundle with a build phase script. Anything else will be cleaned.</span><br><span class="line">  #  You can preserve files from being cleaned, please don&#x27;t preserve</span><br><span class="line">  #  non-essential files like tests, examples and documentation.</span><br><span class="line">  #</span><br><span class="line"></span><br><span class="line">  # 图片资源</span><br><span class="line">  # s.resource  = &quot;icon.png&quot;</span><br><span class="line">  s.resources = &quot;HHYRep/Resource/*.png&quot;</span><br><span class="line"></span><br><span class="line">  # s.preserve_paths = &quot;FilesToSave&quot;, &quot;MoreFilesToSave&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  # ――― Project Linking ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #</span><br><span class="line">  #</span><br><span class="line">  #  Link your library with frameworks, or libraries. Libraries do not include</span><br><span class="line">  #  the lib prefix of their name.</span><br><span class="line">  #</span><br><span class="line"></span><br><span class="line">  # s.framework  = &quot;Foundation&quot;</span><br><span class="line">  # s.frameworks = &quot;SomeFramework&quot;, &quot;AnotherFramework&quot;</span><br><span class="line"></span><br><span class="line">  # s.library   = &quot;iconv&quot;</span><br><span class="line">  # s.libraries = &quot;iconv&quot;, &quot;xml2&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  # ――― Project Settings ――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #</span><br><span class="line">  #</span><br><span class="line">  #  If your library depends on compiler flags you can set them in the xcconfig hash</span><br><span class="line">  #  where they will only apply to your library. If you depend on other Podspecs</span><br><span class="line">  #  you can include multiple dependencies to ensure it works.</span><br><span class="line"></span><br><span class="line">  s.requires_arc = true</span><br><span class="line"></span><br><span class="line">  # s.xcconfig = &#123; &quot;HEADER_SEARCH_PATHS&quot; =&gt; &quot;$(SDKROOT)/usr/include/libxml2&quot; &#125;</span><br><span class="line">  # s.dependency &quot;JSONKit&quot;, &quot;~&gt; 1.4&quot;</span><br><span class="line"></span><br><span class="line">end</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意这里面我进行的代码的分层，如果不分层的话则可以按照下面的写法：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 不分层的话就可以直接按照下面的写法</span><br><span class="line">  # s.source_files  = &quot;Classes&quot;, &quot;Classes/**/*.&#123;h,m&#125;&quot;</span><br><span class="line">  # s.exclude_files = &quot;Classes/**/*.h&quot;</span><br></pre></td></tr></table></figure></p><h4 id="2-提交HHYRep-podspec到官方Specs-Repo上"><a href="#2-提交HHYRep-podspec到官方Specs-Repo上" class="headerlink" title="2. 提交HHYRep.podspec到官方Specs Repo上"></a>2. 提交HHYRep.podspec到官方Specs Repo上</h4><p>添加我们的配置文件到官方的配置文件库中，将库进行关联方面后面我们进行查找。<br>首先我们需要验证我们的配置文件有没有通过验证<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> ~/Desktop/HHYRep   master ●  pod lib lint --allow-warnings</span><br><span class="line">HHYRep passed validation.</span><br></pre></td></tr></table></figure><br>这里我们加了—allow-warnings，为的是让警告也通过验证，不然过不了验证。这里出现passed validation.表示我们通过了验证，下面我们就可以提交文件到git官方仓库了<br>但之前我们需要查看是否有注册过Cocoapods账号。</p><h4 id="3-验证Cocoapods账号"><a href="#3-验证Cocoapods账号" class="headerlink" title="3. 验证Cocoapods账号"></a>3. 验证Cocoapods账号</h4><h6 id="1）终端输入pod-trunk-me"><a href="#1）终端输入pod-trunk-me" class="headerlink" title="1）终端输入pod trunk me"></a>1）终端输入<strong>pod trunk me</strong></h6><p>这里是还没有注册账号：</p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220519235133970.png" alt="查看是否注册Cocoapods邮箱.png"></p><h6 id="2）注册账号："><a href="#2）注册账号：" class="headerlink" title="2）注册账号："></a>2）注册账号：</h6><p>终端输入<strong>pod trunk me register 邮箱地址 ‘用户名’ —description=’描述信息’</strong></p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220519235134907.png" alt="注册Cocoapods账号.png"></p><h6 id="3）验证邮箱账号："><a href="#3）验证邮箱账号：" class="headerlink" title="3）验证邮箱账号："></a>3）验证邮箱账号：</h6><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220519235135128.png" alt="验证Cocoapods账号.png"></p><h6 id="4）再次查看"><a href="#4）再次查看" class="headerlink" title="4）再次查看"></a>4）再次查看</h6><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220519235135228.png" alt="Snip20181128_21.png"></p><p>这里显示我得账号信息以及我拥有的Pods</p><h4 id="4-上传HHYRep-podspec"><a href="#4-上传HHYRep-podspec" class="headerlink" title="4. 上传HHYRep.podspec"></a>4. 上传HHYRep.podspec</h4><p>终端输入<strong>pod trunk push HHYRep.podspec —allow-warnings</strong></p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220519235135452.png" alt="Snip20181128_22.png"></p><p>上传成功会出现如上页面。<br>到这，我们建立Cocoapods远程仓库就完成了。</p><p>我们可以用终端去搜索我们建的仓库<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> ~/Desktop/HHYRep   master ●  pod search HHYRep</span><br><span class="line">[!] Unable to find a pod with name, author, summary, or description matching `HHYRep`</span><br></pre></td></tr></table></figure><br>这里我们进行搜索的时候发现没搜索到，是因为有缓存，删掉就好了<br>终端输入<strong>rm ~/Library/Caches/CocoaPods/search_index.json</strong>，再次进行搜索，结构如下：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Common.h:12:78: warning: this block declaration is not a prototype [-Wstrict-pro</span><br><span class="line">-&gt; HHYRep (0.0.1)</span><br><span class="line">   HHYRep</span><br><span class="line">   pod &#x27;HHYRep&#x27;, &#x27;~&gt; 0.0.1&#x27;</span><br><span class="line">   - Homepage: https://github.com/HuiYouHua/HHYRep</span><br><span class="line">   - Source:   https://github.com/HuiYouHua/HHYRep.git</span><br><span class="line">   - Versions: 0.0.1 [master repo]</span><br><span class="line">   - Subspecs:</span><br><span class="line">     - HHYRep/TimerHelper (0.0.1)</span><br><span class="line">     - HHYRep/TimerHelper/GCD (0.0.1)</span><br><span class="line">     - HHYRep/TimerHelper/NSTimer (0.0.1)</span><br><span class="line">     - HHYRep/UITableVIewHelper (0.0.1)</span><br><span class="line">(END)</span><br></pre></td></tr></table></figure></p><h3 id="三、版本更新"><a href="#三、版本更新" class="headerlink" title="三、版本更新"></a>三、版本更新</h3><h3 id="1-修改-podspec文件中的版本号"><a href="#1-修改-podspec文件中的版本号" class="headerlink" title="1.修改.podspec文件中的版本号"></a>1.修改.podspec文件中的版本号</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 项目版本号</span><br><span class="line">s.version      = &quot;0.0.1&quot;</span><br></pre></td></tr></table></figure><h3 id="2-对项目进行更新"><a href="#2-对项目进行更新" class="headerlink" title="2. 对项目进行更新"></a>2. 对项目进行更新</h3><p>对项目进行代码的更改，同时也要<strong>pod install</strong>一下，更新工程到github上。</p><blockquote><h3 id="上传到github"><a href="#上传到github" class="headerlink" title="上传到github"></a>上传到github</h3><p>git add .<br>git commit -m -a<br>git push</p><h3 id="打tag值，跟版本号一致"><a href="#打tag值，跟版本号一致" class="headerlink" title="打tag值，跟版本号一致"></a>打tag值，跟版本号一致</h3><p>git tag ‘0.0.2’<br>git push —tags</p><h3 id="验证podspec文件并提交"><a href="#验证podspec文件并提交" class="headerlink" title="验证podspec文件并提交"></a>验证podspec文件并提交</h3><p>pod spec lint —allow-warnings<br>pod trunk push HHYRep.podspec —allow-warnings</p><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><p>pod search HHYRep</p></blockquote><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220519235135561.png" alt="Snip20181128_23.png"></p><h3 id="四、测试"><a href="#四、测试" class="headerlink" title="四、测试"></a>四、测试</h3><p>新建CocopodsDemo工程测试<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">~/Desktop/CocopodsDemo  pod init</span><br><span class="line">~/Desktop/CocopodsDemo  touch podfile</span><br><span class="line">~/Desktop/CocopodsDemo  vi Podfile</span><br><span class="line">~/Desktop/CocopodsDemo  pod install</span><br></pre></td></tr></table></figure><br>新建文件podfile<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">platform:ios,&#x27;8.0&#x27;</span><br><span class="line">target &#x27;CocopodsDemo&#x27; do</span><br><span class="line">    </span><br><span class="line">    #source &#x27;https://github.com/CocoaPods/Specs.git&#x27;</span><br><span class="line">    #source &#x27;https://github.com/HuiYouHua/HHYPodspec.git&#x27;</span><br><span class="line">    </span><br><span class="line">pod &#x27;AFNetworking&#x27;, &#x27;~&gt;3.1.0&#x27; </span><br><span class="line">pod &#x27;HHYRep&#x27;, &#x27;~&gt; 0.0.2&#x27;</span><br><span class="line">end</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>文件目录</p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220519235137628.png" alt="Snip20181128_24.png"></p><p>其中显示有层级目录，写法可以参照<a href="https://github.com/AFNetworking/AFNetworking/blob/master/AFNetworking.podspec">AFNetworking.podspec</a></p><h3 id="五、建立自己的Specs索引仓库"><a href="#五、建立自己的Specs索引仓库" class="headerlink" title="五、建立自己的Specs索引仓库"></a>五、建立自己的Specs索引仓库</h3><p>这种的也就是建立私有的远程仓库了<br>我们先了解下Specs和Specs Repo、Code和Code Repo。<br>github上把仓库都叫Repo，所以这四个分别对应的就是</p><blockquote><p>Specs：本地的索引仓库<br>Specs Repo：github官方的索引仓库<br>这两者存放的都是podsepc文件，里面记录了某个仓库的名称、描述、作者、版本、地址等等。索引仓库中每个项目都是以独立的文件夹的形式存放的，每个项目如果有不同的版本，那么不同的版本也会以独立的文件夹形式存放。</p><p>Code：本地的代码仓库<br>Code Repo：github上的代码仓库</p></blockquote><h4 id="1-建立索引仓库"><a href="#1-建立索引仓库" class="headerlink" title="1. 建立索引仓库"></a>1. 建立索引仓库</h4><p>进入github上创建索引仓库，创建方式跟创建代码仓库差不多。</p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220519235137899.png" alt="Snip20181128_25.png"></p><h4 id="2-将本地索引仓库和远程索引仓库关联"><a href="#2-将本地索引仓库和远程索引仓库关联" class="headerlink" title="2. 将本地索引仓库和远程索引仓库关联"></a>2. 将本地索引仓库和远程索引仓库关联</h4><h6 id="1）首先查看本机中存在索引仓库："><a href="#1）首先查看本机中存在索引仓库：" class="headerlink" title="1）首先查看本机中存在索引仓库："></a>1）首先查看本机中存在索引仓库：</h6><p>终端输入：<strong>pod repo</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> ~  pod repo</span><br><span class="line"></span><br><span class="line">master</span><br><span class="line">- Type: git (master)</span><br><span class="line">- URL:  https://github.com/CocoaPods/Specs.git</span><br><span class="line">- Path: /Users/huahuiyou/.cocoapods/repos/master</span><br><span class="line"></span><br><span class="line">1 repo</span><br></pre></td></tr></table></figure><br>这里展示的是本机中存在的索引仓库，其中master指的就是官方的索引仓库，我们在访达中进入~/.cocoapods/repos文件夹可以查看到。</p><h6 id="2-关联仓库"><a href="#2-关联仓库" class="headerlink" title="2.关联仓库"></a>2.关联仓库</h6><p>终端输入<strong>pod repo add 本机仓库名称 远程索引仓库地址</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> ~  pod repo add HHYSpecs https://github.com/HuiYouHua/HHYSpecs.git</span><br><span class="line">Cloning spec repo `HHYSpecs` from `https://github.com/HuiYouHua/HHYSpecs.git`</span><br><span class="line"> ~  pod repo</span><br><span class="line"></span><br><span class="line">HHYSpecs</span><br><span class="line">- Type: git (master)</span><br><span class="line">- URL:  https://github.com/HuiYouHua/HHYSpecs.git</span><br><span class="line">- Path: /Users/huahuiyou/.cocoapods/repos/HHYSpecs</span><br><span class="line"></span><br><span class="line">master</span><br><span class="line">- Type: git (master)</span><br><span class="line">- URL:  https://github.com/CocoaPods/Specs.git</span><br><span class="line">- Path: /Users/huahuiyou/.cocoapods/repos/master</span><br><span class="line"></span><br><span class="line">2 repos</span><br><span class="line"> ~ </span><br></pre></td></tr></table></figure><br>再次查看可以看到，多了一个自己命名的索引仓库</p><h6 id="3-将-podspec文件上传到索引仓库"><a href="#3-将-podspec文件上传到索引仓库" class="headerlink" title="3. 将.podspec文件上传到索引仓库"></a>3. 将.podspec文件上传到索引仓库</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/Desktop/HHYRep   master  pod repo push HHYSpecs HHYRep.podspec --allow-warnings</span><br></pre></td></tr></table></figure><h6 id="4-查看索引仓库"><a href="#4-查看索引仓库" class="headerlink" title="4. 查看索引仓库"></a>4. 查看索引仓库</h6><p>远程索引仓库</p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220519235138541.png" alt="Snip20181128_26.png"></p><p>本机索引仓库</p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220520002132847.png" alt="Snip20181128_27.png"></p><ol><li>拉取仓库<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">platform:ios,&#x27;8.0&#x27;</span><br><span class="line">target &#x27;test&#x27; do</span><br><span class="line">    </span><br><span class="line">    # 官方的索引仓库，这里是用来引入AFNetworking的</span><br><span class="line">    source &#x27;https://github.com/CocoaPods/Specs.git&#x27;</span><br><span class="line">    # 自己的索引仓库，这里是引入HHYRep</span><br><span class="line">    source &#x27;https://github.com/HuiYouHua/HHYPodspec.git&#x27;</span><br><span class="line">    </span><br><span class="line">pod &#x27;AFNetworking&#x27;, &#x27;~&gt;3.1.0&#x27; </span><br><span class="line">pod &#x27;HHYRep&#x27;, &#x27;~&gt; 0.0.6&#x27;</span><br><span class="line">end</span><br><span class="line"></span><br></pre></td></tr></table></figure>另外当官方索引仓库和私有仓库都有索引的话，会出现冲突，所以删掉一个或者指明引用对象即可。</li></ol><p>综上就是Cocoapods的共有仓库和私有仓库的搭建。</p>]]></content>
      
      
      <categories>
          
          <category> 组件化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>支付宝使用总结</title>
      <link href="/2016/11/30/%E6%94%AF%E4%BB%98%E5%AE%9D%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
      <url>/2016/11/30/%E6%94%AF%E4%BB%98%E5%AE%9D%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><blockquote><p>写这篇文章主要是总结一下支付宝的使用,因为最近这个项目要添加一个支付宝功能,所有的资料都是通过查看蚂蚁金服开发者平台和其他开发者写的一些资料加上自己的汇总得来的</p><p>但是呢,不幸的是这个项目不能采用第三方支付,因为购买的是虚拟产品,更新审核很大可能不会给过,有人说可以通过控制后台开关进行控制前台支付功能的隐藏,过了审核再打开开关,但是风险还是比较大的,被发现了那就GG</p><p>这个项目采用的是内购,支付宝呢我自己研究下,这里就总结一下以后有机会的话我再尝试了,大差不差</p><p>好了,废话不多说了,开始进入正题</p></blockquote><h2 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h2><p>需要的东西:</p><ul><li>商户唯一的PID(partner的简称):是商户与支付宝签约后,商户获得的支付宝商户唯一标识码.当商户把支付宝功能介入商户网站时会PID,以便让支付宝认证商户.</li><li>账号ID(sellerID):用户购买的支付账号,订单支付金额将打入该账户,一个partner可以对应多个seller_id。</li><li>下载相应的公钥私钥(加密签名使用,RSA加密)<br>其中前两个一般都是公司负责的,但是非要你弄的的话也没事:</li></ul><p>1.首先你需要有一个支付宝账号(最好公司的)登录<a href="https://open.alipay.com/platform/home.htm">蚂蚁金服</a>实名认证这个支付宝账号,需要视同企业资料,成为企业支付宝账号.<br>2.登录支付宝官方网站<a href="https://b.alipay.com/order/serviceIndex.htm">支付宝商家中心</a>,与支付宝进行签约.<br>3.然后进入开发者平台,创建应用,<a href="https://doc.open.alipay.com/doc2/detail.htm?spm=a219a.7629140.0.0.mLiPMe&amp;treeId=197&amp;articleId=105240&amp;docType=1#s0">官方文档</a><br>4.按照官方文档走,生成公钥和私钥以及上述的几个东西</p><p>注:其中RSA密钥私钥有两个,一个是pkcs8密钥和普通密钥,这里我们使用pkcs8密钥,另外公钥是用来在开发平台的应用配置中添加公钥,同时会生成一个支付宝公钥.</p><h2 id="二、集成支付宝SDK"><a href="#二、集成支付宝SDK" class="headerlink" title="二、集成支付宝SDK"></a>二、集成支付宝SDK</h2><p>1.支付宝SDK下载地址为:<a href="https://doc.open.alipay.com/doc2/detail.htm?treeId=54&amp;articleId=104509&amp;docType=1">这里</a><br>PS:另外还可以下载对应服务端SDK,各种不同的开发语言都有集成示例.</p><p>2.来看看我们的SDK里需要的东西:</p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220519234930613.png" alt="支付宝SDK内的玩意.png"><br>我们需要的东西如下:</p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220519234930663.png" alt="需要的东西.png"><br>将这几个文件放到一个文件夹中并命名为AliPaySDK拖入项目中.</p><p>3.下面就是环境的配置了,这个东西网上找找,相信你可以配置成功的,就不多说了,给你两个地址好了:<br><a href="https://doc.open.alipay.com/doc2/detail.htm?treeId=204&amp;articleId=105295&amp;docType=1">官方文档环境配置</a><br><a href="http://www.jianshu.com/p/2aedc82c02b5">民间高手配置</a><br>出了什么问题,结合这两个就可以了.</p><h2 id="三、支付宝支付流程"><a href="#三、支付宝支付流程" class="headerlink" title="三、支付宝支付流程"></a>三、支付宝支付流程</h2><p>这里是借鉴别人的支付流程了,<a href="http://www.jianshu.com/p/11af0e29a6a7">你看</a></p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220519234930733.png" alt="支付流程.png"><br>支付过程:<br>1.用户向商城网站发起确认订单的请求<br>2.商城网站接收到请求保存订单数据到数据库或其他存储介质<br>3.返回订单确认页面,页面上应该显示订单金额等信息<br>4.用户确认支付,发起支付请求.注:支付请求时发送到支付网关(比如支付宝,网银在线等)而不是发送到商城网站<br>5.显示支付页面<br>6.用户填写认证信息(账号密码等)提交<br>7.这里有两个步骤,一个是扣款成功后页面跳转到支付结果页面(展示给用户),另一个是支付通知,这两步没有先后顺序可能同时执行,商城网站接收到支付通知后根据验证规则验证信息的有效性,并作出相应的更改操作(例:有效则更改订单为已付款装填,无效则记录非法请求信息).</p><p>那么我们注意的就是第4步和第7步</p><h2 id="四、客户端代码的实现"><a href="#四、客户端代码的实现" class="headerlink" title="四、客户端代码的实现"></a>四、客户端代码的实现</h2><h5 id="入口类"><a href="#入口类" class="headerlink" title="入口类"></a>入口类</h5><p>支付宝客户端打开<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">- (BOOL)application:(UIApplication *)application</span><br><span class="line">            openURL:(NSURL *)url</span><br><span class="line">  sourceApplication:(NSString *)sourceApplication</span><br><span class="line">         annotation:(id)annotation &#123;</span><br><span class="line">    </span><br><span class="line">    if ([url.host isEqualToString:@&quot;safepay&quot;]) &#123;</span><br><span class="line">        //跳转支付宝钱包进行支付，处理支付结果</span><br><span class="line">        [[AlipaySDK defaultService] processOrderWithPaymentResult:url standbyCallback:^(NSDictionary *resultDic) &#123;</span><br><span class="line">            NSLog(@&quot;result = %@&quot;,resultDic);</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;</span><br><span class="line">    return YES;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// NOTE: 9.0以后使用新API接口</span><br><span class="line">- (BOOL)application:(UIApplication *)app openURL:(NSURL *)url options:(NSDictionary *)options</span><br><span class="line">&#123;</span><br><span class="line">    if ([url.host isEqualToString:@&quot;safepay&quot;]) &#123;</span><br><span class="line">        //跳转支付宝钱包进行支付，处理支付结果</span><br><span class="line">        [[AlipaySDK defaultService] processOrderWithPaymentResult:url standbyCallback:^(NSDictionary *resultDic) &#123;</span><br><span class="line">            NSLog(@&quot;result = %@&quot;,resultDic);</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;</span><br><span class="line">    return YES;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="生成订单信息"><a href="#生成订单信息" class="headerlink" title="生成订单信息"></a>生成订单信息</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">    *商户的唯一的parnter和seller。</span><br><span class="line">    *签约后，支付宝会为每个商户分配一个唯一的 parnter 和 seller。</span><br><span class="line">    */</span><br><span class="line"> /*============================================================================*/</span><br><span class="line">   /*=======================需要填写商户app申请的===================================*/</span><br><span class="line">   /*============================================================================*/</span><br><span class="line">   NSString *partner = PID;</span><br><span class="line">   NSString *seller = @&quot;&quot;;</span><br><span class="line">   NSString *privateKey = kPrivateKey;</span><br><span class="line">   //支付宝公钥（目前所有支付宝公钥都是这个）</span><br><span class="line">   NSString* key = @&quot;&quot;;</span><br><span class="line">   //这个方法应该是初始化公钥并保存到本地吧</span><br><span class="line">   id&lt;DataVerifier&gt; verifier = CreateRSADataVerifier(key);</span><br><span class="line">   /*============================================================================*/</span><br><span class="line">   /*============================================================================*/</span><br><span class="line">   /*============================================================================*/</span><br><span class="line">   </span><br><span class="line">   //partner和seller获取失败,提示</span><br><span class="line">   if ([partner length] == 0 ||</span><br><span class="line">       [seller length] == 0 ||</span><br><span class="line">       [privateKey length] == 0)</span><br><span class="line">   &#123;</span><br><span class="line">       UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@&quot;提示&quot;</span><br><span class="line">                                                       message:@&quot;缺少partner或者seller或者私钥。&quot;</span><br><span class="line">                                                      delegate:self</span><br><span class="line">                                             cancelButtonTitle:@&quot;确定&quot;</span><br><span class="line">                                             otherButtonTitles:nil];</span><br><span class="line">       [alert show];</span><br><span class="line">       return;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   /*</span><br><span class="line">    *生成订单信息及签名</span><br><span class="line">    */</span><br><span class="line">   //将商品信息赋予AlixPayOrder的成员变量</span><br><span class="line">   Order *order = [[Order alloc] init];</span><br><span class="line">   order.partner = partner;</span><br><span class="line">   order.sellerID = seller;</span><br><span class="line">   order.outTradeNO = @&quot;10087&quot;; //订单ID（由商家自行制定）</span><br><span class="line">   order.subject = @&quot;火车票&quot;; //商品标题</span><br><span class="line">   order.body = @&quot;这是从北京到芜湖的火车票&quot;; //商品描述</span><br><span class="line">   order.totalFee = @&quot;0.01&quot;; //商品价格</span><br><span class="line">   order.notifyURL =  @&quot;http://www.baidu.com&quot;; //回调URL</span><br><span class="line">   </span><br><span class="line">   order.service = @&quot;mobile.securitypay.pay&quot;;</span><br><span class="line">   order.paymentType = @&quot;1&quot;;</span><br><span class="line">   order.inputCharset = @&quot;utf-8&quot;;</span><br><span class="line">   order.itBPay = @&quot;30m&quot;;</span><br><span class="line">   order.showURL = @&quot;m.alipay.com&quot;;</span><br></pre></td></tr></table></figure><h5 id="应用注册scheme-在AlixPayDemo-Info-plist定义URL-types"><a href="#应用注册scheme-在AlixPayDemo-Info-plist定义URL-types" class="headerlink" title="应用注册scheme,在AlixPayDemo-Info.plist定义URL types"></a>应用注册scheme,在AlixPayDemo-Info.plist定义URL types</h5><p>注意这一步<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NSString *appScheme = @&quot;alisdkdemo&quot;;</span><br></pre></td></tr></table></figure></p><h5 id="将商品拼接成字符串"><a href="#将商品拼接成字符串" class="headerlink" title="将商品拼接成字符串"></a>将商品拼接成字符串</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//将商品信息拼接成字符串</span><br><span class="line">NSString *orderSpec = [order description];</span><br><span class="line">NSLog(@&quot;orderSpec = %@&quot;,orderSpec);</span><br><span class="line"></span><br><span class="line">//获取私钥并将商户信息签名,外部商户可以根据情况存放私钥和签名,只需要遵循RSA签名规范,并将签名字符串base64编码和UrlEncode</span><br><span class="line">id&lt;DataSigner&gt; signer = CreateRSADataSigner(privateKey);</span><br><span class="line">NSString *signedString = [signer signString:orderSpec];</span><br><span class="line"></span><br><span class="line">//将签名成功字符串格式化为订单字符串,请严格按照该格式</span><br><span class="line">NSString *orderString = nil;</span><br><span class="line">if (signedString != nil) &#123;</span><br><span class="line">    orderString = [NSString stringWithFormat:@&quot;%@&amp;sign=\&quot;%@\&quot;&amp;sign_type=\&quot;%@\&quot;&quot;,</span><br><span class="line">                   orderSpec, signedString, @&quot;RSA&quot;];</span><br><span class="line">    </span><br><span class="line">    [[AlipaySDK defaultService] payOrder:orderString fromScheme:appScheme callback:^(NSDictionary *resultDic) &#123;</span><br><span class="line">        NSLog(@&quot;返回结果resultDic = %@&quot;,resultDic);</span><br></pre></td></tr></table></figure><h5 id="支付结果页面验证"><a href="#支付结果页面验证" class="headerlink" title="支付结果页面验证"></a>支付结果页面验证</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">            if (resultDic)</span><br><span class="line">            &#123;</span><br><span class="line">                /*</span><br><span class="line">                 9000 订单支付成功</span><br><span class="line">                 8000 正在处理中</span><br><span class="line">                 4000 订单支付失败</span><br><span class="line">                 6001 用户中途取消</span><br><span class="line">                 6002 网络连接出错</span><br><span class="line">                 */</span><br><span class="line">                if ([resultDic[@&quot;resultStatus&quot;]integerValue] == 9000)</span><br><span class="line">                    //网上很多教程到这里就结束了，因为他们没有验证返回订单签名</span><br><span class="line">                &#123;</span><br><span class="line">                    //验签</span><br><span class="line">                    //去掉返回字典中result值里面的“\\”</span><br><span class="line">                    NSString *result = [resultDic[@&quot;result&quot;] stringByReplacingOccurrencesOfString:@&quot;\\\\&quot; withString:@&quot;&quot;];</span><br><span class="line">                    //分割字符串获取订单信息和签名</span><br><span class="line">//                     [self.result componentsSeparatedByString:@&quot;&amp;sign_type=\&quot;RSA\&quot;&amp;sign=&quot;][0];</span><br><span class="line">                    NSArray *array = [result componentsSeparatedByString:@&quot;&amp;sign_type=\&quot;RSA\&quot;&amp;sign=&quot;];</span><br><span class="line">                      //返回的订单信息</span><br><span class="line">                      NSString *orderString = array[0];</span><br><span class="line">                      //返回的订单签名</span><br><span class="line">                      NSString *signedString = [array[1] substringToIndex:[array[1]length]-1];</span><br><span class="line">                      //验证返回信息与签名</span><br><span class="line">                      if ([verifier verifyString:orderString withSign:signedString])</span><br><span class="line">                      &#123;</span><br><span class="line">                          //验证签名成功，交易结果无篡改</span><br><span class="line">                          NSLog(@&quot;------------支付成功---------------&quot;);</span><br><span class="line">                      &#125;</span><br><span class="line">                      else</span><br><span class="line">                      &#123;</span><br><span class="line">                          //验签错误</span><br><span class="line">                      &#125;</span><br><span class="line">                      </span><br><span class="line">                      &#125;</span><br><span class="line">                      </span><br><span class="line">                      &#125;</span><br><span class="line">                      else</span><br><span class="line">                      &#123;</span><br><span class="line">                          //交易失败</span><br><span class="line">                      &#125;</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里实现由上述步骤中的第4步以及第7步中的支付结果页面(这个是展示给用户的)<br><strong>注意:关于第4步的密钥加签和第7步的验证最好放到服务器端做,以保证安全</strong></p><p>这个是支付请求接口的callback返回的resultDic,摆出来方便研究<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">po resultDic</span><br><span class="line">&#123;</span><br><span class="line">    memo = “&quot;;</span><br><span class="line">    result = &quot;partner=\&quot;2088121307144063\&quot;&amp;seller_id=\&quot;service@9elephas.com\&quot;&amp;out_trade_no=\&quot;10086\&quot;&amp;subject=\&quot;\U706b\U8f66\U7968\&quot;&amp;body=\&quot;\U8fd9\U662f\U4ece\U5317\U4eac\U5230\U829c\U6e56\U7684\U706b\U8f66\U7968\&quot;&amp;total_fee=\&quot;0.01\&quot;&amp;notify_url=\&quot;http://www.baidu.com\&quot;&amp;service=\&quot;mobile.securitypay.pay\&quot;&amp;payment_type=\&quot;1\&quot;&amp;_input_charset=\&quot;utf-8\&quot;&amp;it_b_pay=\&quot;30m\&quot;&amp;show_url=\&quot;m.alipay.com\&quot;&amp;success=\&quot;true\&quot;&amp;sign_type=\&quot;RSA\&quot;&amp;sign=\&quot;Qtqv2CjSf2WXdg37cLKiN0b+nCdJsAk+deB95c+qykyz1F9Zc2sglc+6/tReTNoIFbX4D3jS31KMYEuDHuwx8ibm8fyDYpAPxHsD1x6+MaoBpXAe2UtsF6v7xFGzhmieJ8hG4WYgUhxp6LrxtSBHuxreI+pjMSeaMA0qZEvJj4g=\&quot;&quot;;</span><br><span class="line">    resultStatus = 9000;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="五、接口问题"><a href="#五、接口问题" class="headerlink" title="五、接口问题"></a>五、接口问题</h2><p>这里讲述的东西还是上面所说的第4步和第7步<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 支付宝SDK支付请求接口</span><br><span class="line">- (void)payOrder:(NSString *)orderStr</span><br><span class="line">      fromScheme:(NSString *)schemeStr</span><br><span class="line">        callback:(CompletionBlock)completionBlock;</span><br></pre></td></tr></table></figure><br>这个方法是用来发送支付请求,也就是第4步中的确认支付(发起支付请求)<br>另外还有一个方法<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- (void)processOrderWithPaymentResult:(NSURL *)resultUrl</span><br><span class="line">                      standbyCallback:(CompletionBlock)completionBlock;</span><br></pre></td></tr></table></figure><br>  这两方法的区别之处主要是区分你的手机有没有下载支付宝客户端,如果没有下载支付宝客户端,在你支付完成后,支付宝服务器会通过callback返回信息,反之会在standbyCallback返回信息.</p><p>在上面的代码中可以看到,我们在返回信息的block中做了验签操作,当然这个最好是放在服务器端进行.我们除了在这里做验签操作之外,我们还需要做些可视化的操作,比如说通知用户这笔交易的成功与否,需要给用户展示什么样的东西等等…(注意,我们这里还没有对服务器数据库等做更新订单的操作)</p><p>同时当我们阅读<a href="https://doc.open.alipay.com/docs/doc.htm?spm=a219a.7629140.0.0.A8CMxI&amp;treeId=193&amp;articleId=105302&amp;docType=1">开放平台文档</a>的时候会发现他有两种通知,一种是客户端同步返回,一种是支付结果异步通知,其主要区别如下:<br>其官方文档是这样说的:</p><blockquote><p>支付宝SDK对商户的请求支付(payOrder方法)数据处理完成后,会将结果同步反馈给商户app端.<br><strong>同步返回的数据，商户可以按照下文描述的方式在服务端<br>验证，验证通过后，可以认为本次用户付款成功。有些时候会出现商户app在支付宝付款阶段被关闭导致无法正确收到同步结果，此时支付结果可以完全依赖服务端的异步通知。</strong><br><strong>由于同步通知和异步通知都可以作为支付完成的凭证，且异步通知支付宝一定会确保发送给商户服务端。为了简化集成流程，商户可以将同步结果仅仅作为一个支付结束的通知（忽略执行校验），实际支付是否成功，完全依赖服务端异步通知。</strong></p></blockquote><p>这里我来解释下,意思就是说当你支付完成后,支付宝页面会自动跳转到之前的界面,但是会有这样的情况发生,就是当你界面还没跳转时,用户自己将该页面关闭,那就无法正确的收到同步结果了,因此这里还必须得采用服务器端异步通知来保持订单的同步.</p><p>至于同步操作就不多说了,在这里我们主要做两件事,一件就是验签,保证订单的可靠性,另外就是一些可视化操作,让用户知道交易成功与否.<br>这里是官方文档对于客户端同步返回的介绍:</p><blockquote><p><strong>第四步：</strong> 验证签名是否合法：<br>使用各自语言对应的SHA1WithRSA签名验证函数，传入签名的原始字符串、支付宝公钥、签名类型RSA、签名字符进行合法性验证。<br><strong>第五步： 在第四步签名验证通过后，必须严格按照如下的描述校验通知参数的合法性：</strong><br><strong>1、商户需要验证该通知数据中的out_trade_no是否为商户系统中创建的订单号；2、判断total_amount是否确实为该订单的实际金额（即商户订单创建时的金额）；3、校验通知中的seller_id（或者seller_email) 是否为out_trade_no这笔单据对应的操作方（有的时候，一个商户可能有多个seller_id/seller_email）；4、验证app_id是否为该商户本身。上述1、2、3、4有任何一个验证不通过，则表明同步校验结果是无效的，只有全部验证通过后，才可以认定买家付款成功。</strong></p></blockquote><h2 id="六、支付结果异步通知"><a href="#六、支付结果异步通知" class="headerlink" title="六、支付结果异步通知"></a>六、支付结果异步通知</h2><blockquote><p>看官方文档中的介绍:<strong>对于App支付产生的交易，支付宝会根据原始支付API中传入的异步通知地址notify_url，通过POST请求的形式将支付结果作为参数通知到商户系统。</strong></p></blockquote><p>这里的异步通知地址就是之前构建订单信息中的回调地址notify_url</p><p>再看,服务器异步通知页面特性:</p><blockquote><p>必须保证服务器异步通知页面（notify_url）上无任何字符，如空格、HTML标签、开发系统自带抛出的异常提示信息等；</p><p>支付宝是用POST方式发送通知信息，因此该页面中获取参数的方式，如：request.Form(“out_trade_no”)、$_POST[‘out_trade_no’]；</p><p>支付宝主动发起通知，该方式才会被启用；</p><p>只有在支付宝的交易管理中存在该笔交易，且发生了交易状态的改变，支付宝才会通过该方式发起服务器通知（即时到账交易状态为“等待买家付款”的状态默认是不会发送通知的）；</p><p>服务器间的交互，不像页面跳转同步通知可以在页面上显示出来，这种交互方式是不可见的；</p><p>第一次交易状态改变（即时到账中此时交易状态是交易完成）时，不仅会返回同步处理结果，而且服务器异步通知页面也会收到支付宝发来的处理结果通知；</p><p>程序执行完后必须打印输出“success”（不包含引号）。如果商户反馈给支付宝的字符不是success这7个字符，支付宝服务器会不断重发通知，直到超过24小时22分钟。一般情况下，25小时以内完成8次通知（通知的间隔频率一般是：4m,10m,10m,1h,2h,6h,15h）；</p><p>程序执行完成后，该页面不能执行页面跳转。如果执行页面跳转，支付宝会收不到success字符，会被支付宝服务器判定为该页面程序运行出现异常，而重发处理结果通知；</p><p>cookies、session等在此页面会失效，即无法获取这些数据；</p><p>该方式的调试与运行必须在服务器上，即互联网上能访问；<br>该方式的作用主要防止订单丢失，即页面跳转同步通知没有处理订单更新，它则去处理；</p><p>当商户收到服务器异步通知并打印出success时，服务器异步通知参数notify_id才会失效。也就是说在支付宝发送同一条异步通知时（包含商户并未成功打印出success导致支付宝重发数次通知），服务器异步通知参数notify_id是不变的。</p></blockquote><p>这里需要注意的是:<br>他是当订单状态发生变化时,支付宝服务器才会通知这个页面,然后在这个页面做验签,更新服务器数据库等操作.<br>另外验签通过后需要返回success,不然会重复通知.</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这里总结一下,支付宝这一块最重要的应该就是上面说的确认支付和返回结果页面以及支付通知信息这一块,搞定了就不难了,当然还有RSA算法,有时间我去研究研究,这个不是重点</p>]]></content>
      
      
      <categories>
          
          <category> 支付 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(十四)即时通讯之XMPPFramework本地通知</title>
      <link href="/2016/08/22/XMPP/(%E5%8D%81%E5%9B%9B)%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E4%B9%8BXMPPFramework%E6%9C%AC%E5%9C%B0%E9%80%9A%E7%9F%A5/"/>
      <url>/2016/08/22/XMPP/(%E5%8D%81%E5%9B%9B)%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E4%B9%8BXMPPFramework%E6%9C%AC%E5%9C%B0%E9%80%9A%E7%9F%A5/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>这也是本人第一次琢磨关于即时通讯方面的内容,结合网上查看的相关资料搭建出来的仿微信小demo,如有意见请多多指教</p></blockquote><p><strong>具体项目可以在github<a href="https://git.oschina.net/huyoyu/WeiChat">WeiChat</a>下载进行查看,如若各位看官老爷觉得还可以请点star</strong></p><p>续前篇<a href="http://www.jianshu.com/p/6b3c12790f8e">(十)即时通讯之XMPPFramework登陆注册</a></p><p>续前篇<a href="http://www.jianshu.com/p/b1be451ccf5c">(十一)即时通讯之XMPPFramework电子名片</a></p><p>续前篇<a href="http://www.jianshu.com/p/e542856d24a9">(十二)即时通讯之XMPPFramework花名册</a></p><p>续前篇<a href="http://www.jianshu.com/p/1a6b01217778">(十三)即时通讯之XMPPFramework文字语音图片聊天</a></p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220520002024874.png" alt="服务器地址"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">**Attention,这里需要改成自己的服务器地址和端口号</span><br><span class="line">并且数据库和服务器一定要开启哟,不然没法登陆的哟**</span><br><span class="line">#ifdef DEBUG</span><br><span class="line">#define kHostName @&quot;192.168.199.111&quot;</span><br><span class="line">//#define kHostName @&quot;127.0.0.1&quot;</span><br><span class="line">#define kHostPort 5222</span><br><span class="line">#else</span><br><span class="line">#define kHostNanme @&quot;&quot;</span><br><span class="line">#define kHostPort 5222</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><h2 id="本地通知"><a href="#本地通知" class="headerlink" title="本地通知"></a>本地通知</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">**本地通知**</span><br><span class="line">****</span><br><span class="line">**入口方法中调用以下代码**</span><br><span class="line">- (void)registerPush&#123;</span><br><span class="line">    float sysVer = [[[UIDevice currentDevice] systemVersion] floatValue];</span><br><span class="line">    if(sysVer &lt; 8)&#123;</span><br><span class="line">        [[UIApplication sharedApplication] registerForRemoteNotificationTypes:(UIRemoteNotificationTypeAlert | UIRemoteNotificationTypeBadge | UIRemoteNotificationTypeSound)];</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">#if __IPHONE_OS_VERSION_MAX_ALLOWED &gt;= _IPHONE80_</span><br><span class="line">        UIMutableUserNotificationCategory *categorys = [[UIMutableUserNotificationCategory alloc] init];</span><br><span class="line">        UIUserNotificationSettings *userSettings = [UIUserNotificationSettings settingsForTypes:UIUserNotificationTypeBadge|UIUserNotificationTypeSound|UIUserNotificationTypeAlert</span><br><span class="line">                                                                                     categories:[NSSet setWithObject:categorys]];</span><br><span class="line">        [[UIApplication sharedApplication] registerUserNotificationSettings:userSettings];</span><br><span class="line">        [[UIApplication sharedApplication] registerForRemoteNotifications];</span><br><span class="line">#endif</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">****</span><br><span class="line">**添加plist选项**</span><br><span class="line">打开后台模式,添加一个Voice over IP</span><br><span class="line">****</span><br><span class="line">**允许XMPPStream的Socket后台运行**</span><br><span class="line">_xmppStream.enableBackgroundingOnSocket = YES;</span><br><span class="line">****</span><br><span class="line">**XMPPManaget中添加一个代理方法**</span><br><span class="line">- (void)xmppStream:(XMPPStream *)sender didReceiveMessage:(XMPPMessage *)message &#123;</span><br><span class="line">    NSLog(@&quot;收到消息&quot;);</span><br><span class="line">    if ([UIApplication sharedApplication].applicationState != UIApplicationStateActive) &#123;</span><br><span class="line">        NSLog(@&quot;我在后台收到消息&quot;);</span><br><span class="line">        [UIApplication sharedApplication].applicationIconBadgeNumber = 5;</span><br><span class="line">        // 本地通知</span><br><span class="line">        UILocalNotification *localNote = [[UILocalNotification alloc] init];</span><br><span class="line">        // 设置通知内容</span><br><span class="line">        localNote.alertBody = [NSString stringWithFormat:@&quot;%@\n%@&quot;,message.fromStr,message.body];</span><br><span class="line">        // 设置时间</span><br><span class="line">        localNote.fireDate = [NSDate date];</span><br><span class="line">        // 设置声音</span><br><span class="line">        localNote.soundName = @&quot;default&quot;;</span><br><span class="line">        // 执行</span><br><span class="line">        [[UIApplication sharedApplication] scheduleLocalNotification:localNote];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        // 什么也不做</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> XMPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Object-C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(十三)即时通讯之XMPPFramework文字语音图片聊天</title>
      <link href="/2016/08/22/XMPP/(%E5%8D%81%E4%B8%89)%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E4%B9%8BXMPPFramework%E6%96%87%E5%AD%97%E8%AF%AD%E9%9F%B3%E5%9B%BE%E7%89%87%E8%81%8A%E5%A4%A9/"/>
      <url>/2016/08/22/XMPP/(%E5%8D%81%E4%B8%89)%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E4%B9%8BXMPPFramework%E6%96%87%E5%AD%97%E8%AF%AD%E9%9F%B3%E5%9B%BE%E7%89%87%E8%81%8A%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>这也是本人第一次琢磨关于即时通讯方面的内容,结合网上查看的相关资料搭建出来的仿微信小demo,如有意见请多多指教</p></blockquote><p><strong>具体项目可以在github<a href="https://git.oschina.net/huyoyu/WeiChat">WeiChat</a>下载进行查看,如若各位看官老爷觉得还可以请点star</strong></p><p>续前篇<a href="http://www.jianshu.com/p/6b3c12790f8e">(十)即时通讯之XMPPFramework登陆注册</a></p><p>续前篇<a href="http://www.jianshu.com/p/b1be451ccf5c">(十一)即时通讯之XMPPFramework电子名片</a></p><p>续前篇<a href="http://www.jianshu.com/p/e542856d24a9">(十二)即时通讯之XMPPFramework花名册</a></p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220519235557364.png" alt="服务器地址"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">**Attention,这里需要改成自己的服务器地址和端口号</span><br><span class="line">并且数据库和服务器一定要开启哟,不然没法登陆的哟**</span><br><span class="line">#ifdef DEBUG</span><br><span class="line">#define kHostName @&quot;192.168.199.111&quot;</span><br><span class="line">//#define kHostName @&quot;127.0.0.1&quot;</span><br><span class="line">#define kHostPort 5222</span><br><span class="line">#else</span><br><span class="line">#define kHostNanme @&quot;&quot;</span><br><span class="line">#define kHostPort 5222</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><p>先来谈谈做聊天功能的感想,其实吧,这个也不复杂,主要是界面搭建过于麻烦,先来说<strong>功能实现:</strong></p><blockquote><p>1.关于聊天功能,当日这个包括有文字,语音,图片,还有文件传输,视频音频聊天,这些我就没写了,就实现了文字,语音,图片这三个部分,后面的再写也没多大意思了.<br>2.其实关于聊天说到底就一个方法sendElement:(NSXMLElement *)element,后面跟上你要发送的内容就行了.<br>3.既然有各种不同的聊天内容,那就要加上关键字进行判断来区分是文字是语音还是图片.<br>4.这区分不同内容也有好几种方式<br>5.对于发送内容有两种方式,当日是对于语音图片,这种大容量的内容来说的,第一种是使用XML来携带内容,这种方式对服务器压力很大,因为一旦携带的内容过大,那么就会使传输速度变得很慢.另一种是通过文件服务器的方式,通过put将要传输方式发送到文件服务器,然后发送URL就可以了,对于文件的传输与接收都是通过上传下载来完成.这两种方式都有实现,可以看demo.<br>6.聊天功能最重要的就是你要知道你传输的message的结构是什么样的,由于是用XML组织的,所以很容易就能知道你传输的内容组织,这样能方便你进行区分传输内容以及扩展你想要的一些功能,还要做一些回执操作,以及类似心跳包之类的操作.</p></blockquote><p>再来说说<strong>界面实现:</strong></p><blockquote><p>1.首先重中之重是得选择一个好的设计模式了,这里采用MVVM,将原先的数据模型分为数据模型加frame模型,其业务逻辑分开,在获取数据时,就对数据和frame进行计算,再在单元格初始化的时候进行赋值.<br>2.其次是frame的计算,因为有文字,图片,语音所以得慢慢计算单元格的自适应高度.<br>3.对于键盘的处理,这个其实蛮复杂的,尤其是点击发文件按钮后,弹出的一个自定义模块,这个你们看demo吧,不过多阐述了,这里主要讲的是功能实现,界面实现就发挥你们的想象力好了.<br>4.另外还有对于界面处理的诸多细节,demo中也有部分未处理好,万望谅解.</p></blockquote><p>看图:<br>这里高度有点不对,但是并没找到原因<br><strong>注意,这里需要模拟器和真机进行测试,展示给读者的是模拟器,真机就没有展示出来了</strong><br><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/strip-20220519235615975.gif" alt="文字聊天.gif"></p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/strip-20220519235625563.gif" alt="图片聊天.gif"></p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/strip-20220519235633223.gif" alt="语音聊天"></p><blockquote><p>丑话说在中间,聊天界面还存在有一个bug,暂且还没找出来为什么,但不影响使用</p></blockquote><p>本篇讲的是聊天功能中的聊天功能的实现,内容有点长,请耐心观看.</p><h3 id="1-聊天模块激活"><a href="#1-聊天模块激活" class="headerlink" title="1.聊天模块激活"></a>1.聊天模块激活</h3><p>没什么好说的,跟前面的一样,聊天模块激活<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> *  XMPPMessageArchiving聊天模块激活</span><br><span class="line"> */</span><br><span class="line">self.archivingStorage = [XMPPMessageArchivingCoreDataStorage sharedInstance];</span><br><span class="line">self.messageArchiving = [[XMPPMessageArchiving alloc] initWithMessageArchivingStorage:self.archivingStorage dispatchQueue:dispatch_get_main_queue()];</span><br><span class="line">[self.messageArchiving activate:self.stream];</span><br></pre></td></tr></table></figure></p><h3 id="2-发送文字聊天内容"><a href="#2-发送文字聊天内容" class="headerlink" title="2.发送文字聊天内容"></a>2.发送文字聊天内容</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#pragma mark - TextView的代理方法 点击renturn发送信息</span><br><span class="line">#pragma mark 发送文字聊天信息</span><br><span class="line">- (void)textViewDidChange:(UITextView *)textView &#123;</span><br><span class="line">    if ([textView.text hasSuffix:@&quot;\n&quot;]) &#123;</span><br><span class="line">        NSLog(@&quot;已经发送消息&quot;);</span><br><span class="line">        [self sendMessageWithText:textView.text bodyType:@&quot;text&quot;];</span><br><span class="line">        textView.text = nil;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)sendMessageWithText:(NSString *)text bodyType:(NSString *)type &#123;</span><br><span class="line">//    XMPPMessage *message = [XMPPMessage messageWithType:@&quot;chat&quot; to:self.jidChatTo.jid];</span><br><span class="line">//    // 设置bodyType为text</span><br><span class="line">//    [message addAttributeWithName:@&quot;bodyType&quot; stringValue:type];</span><br><span class="line">//    [message addBody:text];</span><br><span class="line">//    [[XMPPManager sharedmanager].stream sendElement:message];</span><br><span class="line">    </span><br><span class="line">    XMPPMessage* message = [[XMPPMessage alloc] initWithType:@&quot;chat&quot; to:self.jidChatTo.jid];</span><br><span class="line">    </span><br><span class="line">    [message addBody:type];</span><br><span class="line">    </span><br><span class="line">    // 设置节点内容</span><br><span class="line">    XMPPElement *attachment = [XMPPElement elementWithName:@&quot;attachment&quot; stringValue:text];</span><br><span class="line">    // 包含子节点</span><br><span class="line">    [message addChild:attachment];</span><br><span class="line">    [[XMPPManager sharedmanager].stream sendElement:message];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-获取文字聊天内容"><a href="#3-获取文字聊天内容" class="headerlink" title="3.获取文字聊天内容"></a>3.获取文字聊天内容</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">- (void)relodChatMessage &#123;</span><br><span class="line">    XMPPManager *manager = [XMPPManager sharedmanager];</span><br><span class="line">    NSManagedObjectContext *context = manager.archivingStorage.mainThreadManagedObjectContext;</span><br><span class="line">    NSFetchRequest *request = [NSFetchRequest fetchRequestWithEntityName:@&quot;XMPPMessageArchiving_Message_CoreDataObject&quot;];</span><br><span class="line">    </span><br><span class="line">    NSPredicate *predicate = [NSPredicate predicateWithFormat:@&quot;streamBareJidStr=%@ AND bareJidStr=%@&quot;,[UserManager sharedmanager].jid,self.jidChatTo.jid.bare];</span><br><span class="line">    </span><br><span class="line">    NSSortDescriptor *timeSort = [NSSortDescriptor sortDescriptorWithKey:@&quot;timestamp&quot; ascending:YES];</span><br><span class="line">    request.sortDescriptors = @[timeSort];</span><br><span class="line">    request.predicate = predicate;</span><br><span class="line">    </span><br><span class="line">    self.resultController = [[NSFetchedResultsController alloc] initWithFetchRequest:request managedObjectContext:context sectionNameKeyPath:nil cacheName:nil];</span><br><span class="line">    self.resultController.delegate = self;</span><br><span class="line">    NSError *error = nil;</span><br><span class="line">    if ([self.resultController performFetch:&amp;error]) &#123;</span><br><span class="line">        NSLog(@&quot;%@&quot;,error);</span><br><span class="line">    &#125;</span><br><span class="line">    //NSLog(@&quot;-----%@&quot;,self.resultController.fetchedObjects);</span><br><span class="line">    [self getChatMsgArray];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - NSFetchedResultsControllerDelegate</span><br><span class="line">// 代理方法,当数据发生变化时调用该方法</span><br><span class="line">- (void)controller:(NSFetchedResultsController *)controller didChangeObject:(id)anObject atIndexPath:(nullable NSIndexPath *)indexPath forChangeType:(NSFetchedResultsChangeType)type newIndexPath:(nullable NSIndexPath *)newIndexPath &#123;</span><br><span class="line">    [self relodChatMessage];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 此处获取数据库中的会话数组,对模型类进行赋值,并且设置其单个会话的frame</span><br><span class="line">/**</span><br><span class="line"> *  采用MVVM的设计模式</span><br><span class="line">    提供两个模型:</span><br><span class="line">        &gt;数据模型：存放文字数据\图片数据</span><br><span class="line">        &gt;frame模型：存放数据模型\所有子控件的frame\cell的高度</span><br><span class="line">    其中cell直接拥有一个frame模型(不要直接拥有数据模型).即:使fram模型拥有数据模型</span><br><span class="line">    在cell赋值的时候直接赋值frame模型</span><br><span class="line"> */</span><br><span class="line">- (void)getChatMsgArray &#123;</span><br><span class="line">    [self.chatMsgArray removeAllObjects];</span><br><span class="line">    for (XMPPMessageArchiving_Message_CoreDataObject *msg in self.resultController.fetchedObjects) &#123;</span><br><span class="line">        </span><br><span class="line">        ChatMessageModel *messageModel = [[ChatMessageModel alloc] init];</span><br><span class="line">        // 将模型中的上一条信息的时间戳取出来放到数据模型中处理</span><br><span class="line">        if (self.chatMsgArray.count) &#123;</span><br><span class="line">            ChatFrameModel *preChatFrameModel = self.chatMsgArray.lastObject;</span><br><span class="line">            messageModel.preMsgDate = preChatFrameModel.msg.msg.timestamp;</span><br><span class="line">        &#125;</span><br><span class="line">        // 数据模型的setter</span><br><span class="line">        messageModel.msg = msg;</span><br><span class="line">        </span><br><span class="line">        ChatFrameModel *frameModel = [[ChatFrameModel alloc] init];</span><br><span class="line">        // frame模型的setter</span><br><span class="line">        frameModel.msg = messageModel;</span><br><span class="line">        [self.chatMsgArray addObject:frameModel];</span><br><span class="line"> </span><br><span class="line">        // 图片浏览器</span><br><span class="line">        if ([msg.message.body isEqualToString:@&quot;image&quot;]) &#123;</span><br><span class="line">            XMPPElement *node = msg.message.children.lastObject;</span><br><span class="line">            // 取出消息的解码</span><br><span class="line">            NSString *base64str = node.stringValue;</span><br><span class="line">            NSData *data = [[NSData alloc]initWithBase64EncodedString:base64str options:0];</span><br><span class="line">            UIImage *image = [[UIImage alloc]initWithData:data];</span><br><span class="line">            [self.chatImageArray addObject:image];</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    [self.myTab reloadData];</span><br><span class="line">    [self scrollToBottom];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于业务逻辑我就不展示了,感兴趣的可以查看demo</p><h3 id="4-发送语音聊天"><a href="#4-发送语音聊天" class="headerlink" title="4.发送语音聊天"></a>4.发送语音聊天</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line">#pragma mark ******************************</span><br><span class="line">#pragma mark -- 发送语音聊天信息</span><br><span class="line">- (IBAction)sendVoiceBtn:(UIButton *)sender &#123;</span><br><span class="line">    if (CGRectGetMaxY(self.moreView.frame) == [UIScreen mainScreen].bounds.size.height) &#123;</span><br><span class="line">        self.moreView.frame = kMoreInputViewOriFrame;</span><br><span class="line">        [self.chatTextView resignFirstResponder];</span><br><span class="line">    &#125;</span><br><span class="line">    if (self.inputViewBottonConstraint.constant == 200) &#123;</span><br><span class="line">        [self.chatTextView becomeFirstResponder];</span><br><span class="line">        [self dissmissMoreInputViewWithAniation:YES];</span><br><span class="line">    &#125;</span><br><span class="line">    if (!self.sendVoiceBtn.hidden) &#123;</span><br><span class="line">        [self.chatTextView becomeFirstResponder];</span><br><span class="line">        //self.inputViewBottonConstraint.constant = 0;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        if ([self.chatTextView isFirstResponder]) &#123;</span><br><span class="line">            [self.chatTextView resignFirstResponder];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    self.sendVoiceBtn.hidden = sender.selected;</span><br><span class="line">    sender.selected = !sender.selected;</span><br><span class="line">    UIImage *normalImage = sender.selected ? [UIImage imageNamed:@&quot;ToolViewKeyboard&quot;] : [UIImage imageNamed:@&quot;ToolViewInputVoice&quot;];</span><br><span class="line">    UIImage *highlightImage = sender.selected ? [UIImage imageNamed:@&quot;ToolViewKeyboardHL&quot;] : [UIImage imageNamed:@&quot;ToolViewInputVoiceHL&quot;];</span><br><span class="line">    [sender setImage:normalImage forState:UIControlStateNormal];</span><br><span class="line">    [sender setImage:highlightImage forState:UIControlStateHighlighted];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 在按钮上按下按钮开始录音</span><br><span class="line">- (IBAction)sendTouchDown:(UIButton *)sender &#123;</span><br><span class="line">    NSLog(@&quot;%s, line = %d&quot;, __FUNCTION__, __LINE__);</span><br><span class="line">    self.sendVoiceBtn.backgroundColor = [UIColor lightGrayColor];</span><br><span class="line">    // 设置提示框</span><br><span class="line">    popVoiceView *voiceV = [popVoiceView voiceAlertPopView];</span><br><span class="line">    voiceV.bounds = CGRectMake(0, 0, 150, 150);</span><br><span class="line">    CGFloat centerX = [UIScreen mainScreen].bounds.size.width / 2.0;</span><br><span class="line">    CGFloat centerY = [UIScreen mainScreen].bounds.size.height / 2.0;</span><br><span class="line">    voiceV.center = CGPointMake(centerX, centerY);</span><br><span class="line">    self.voiceView = voiceV;</span><br><span class="line">    [self.view addSubview:self.voiceView];</span><br><span class="line">    </span><br><span class="line">    // 录音</span><br><span class="line">    [self.audioRecorder record];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 在按钮上抬起手指发送语音</span><br><span class="line">- (IBAction)sendTouchUpInside:(UIButton *)sender &#123;</span><br><span class="line">    NSLog(@&quot;%s, line = %d&quot;, __FUNCTION__, __LINE__);</span><br><span class="line">    self.sendVoiceBtn.backgroundColor = BackGround243Color;</span><br><span class="line">    NSTimeInterval time = self.audioRecorder.currentTime;</span><br><span class="line">    </span><br><span class="line">    if (time &lt; 1.5) &#123;</span><br><span class="line">        // 时间小于1.5秒不发送,大于1.5秒才发送</span><br><span class="line">        // 停止录音</span><br><span class="line">        [self.audioRecorder stop];</span><br><span class="line">        // 删除录音文件</span><br><span class="line">        [self.audioRecorder deleteRecording];</span><br><span class="line">        </span><br><span class="line">        self.voiceView.voiceImageV.image = [UIImage imageNamed:@&quot;QQ20160818-3&quot;];</span><br><span class="line">        self.voiceView.voiceTitleLab.text = @&quot;说话时间太短&quot;;</span><br><span class="line">        </span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        // 停止录音</span><br><span class="line">        [self.audioRecorder stop];</span><br><span class="line">        </span><br><span class="line">        // 发送语音</span><br><span class="line">        NSString *urlStr = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) lastObject];</span><br><span class="line">        urlStr = [urlStr stringByAppendingPathComponent:kRecordAudioFile];</span><br><span class="line">        NSData *voiceData = [NSData dataWithContentsOfFile:urlStr];</span><br><span class="line">        [self sendVoiceMessageWithData:voiceData bodyType:@&quot;voice&quot; withDuringTime:time];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    [self.voiceView removeFromSuperview];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">- (void)sendVoiceMessageWithData:(NSData *)data bodyType:(NSString *)type withDuringTime:(NSTimeInterval)time&#123;</span><br><span class="line">    XMPPMessage* message = [[XMPPMessage alloc] initWithType:@&quot;chat&quot; to:self.jidChatTo.jid];</span><br><span class="line">    // 将时间传过去</span><br><span class="line">    NSString *timeStr = [NSString stringWithFormat:@&quot;%f&quot;,time];</span><br><span class="line">    [message addAttributeWithName:@&quot;duringTime&quot; stringValue:timeStr];</span><br><span class="line">    [message addBody:type];</span><br><span class="line"></span><br><span class="line">    NSString *base64str = [data base64EncodedStringWithOptions:0];</span><br><span class="line"></span><br><span class="line">    XMPPElement *attachment = [XMPPElement elementWithName:@&quot;attachment&quot; stringValue:base64str];</span><br><span class="line"></span><br><span class="line">    [message addChild:attachment];</span><br><span class="line">    [[XMPPManager sharedmanager].stream sendElement:message];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 手指拖到按钮外面将要取消录音</span><br><span class="line">- (IBAction)sendDragOutside:(UIButton *)sender &#123;</span><br><span class="line">    NSLog(@&quot;%s, line = %d&quot;, __FUNCTION__, __LINE__);</span><br><span class="line">    self.voiceView.voiceImageV.image = [UIImage imageNamed:@&quot;QQ20160818-2&quot;];</span><br><span class="line">    self.voiceView.voiceTitleLab.text = @&quot;松开手指, 取消发送&quot;;</span><br><span class="line">    self.voiceView.voiceTitleLab.backgroundColor = [UIColor colorWithRed:0.826 green:0.0 blue:0.0 alpha:1.0];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 在按钮外面抬起手指取消录音</span><br><span class="line">- (IBAction)sendTouchUpOutside:(UIButton *)sender &#123;</span><br><span class="line">    NSLog(@&quot;%s, line = %d&quot;, __FUNCTION__, __LINE__);</span><br><span class="line">    [self.voiceView removeFromSuperview];</span><br><span class="line">    </span><br><span class="line">    // 停止录音</span><br><span class="line">    [self.audioRecorder stop];</span><br><span class="line">    // 删除录音文件</span><br><span class="line">    [self.audioRecorder deleteRecording];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 设置音频保存路径</span><br><span class="line">- (NSURL *)getSavePath &#123;</span><br><span class="line">    NSString *urlStr = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) lastObject];</span><br><span class="line">    urlStr = [urlStr stringByAppendingPathComponent:kRecordAudioFile];</span><br><span class="line">    NSURL *url = [NSURL URLWithString:urlStr];</span><br><span class="line">    </span><br><span class="line">    return url;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  设置音频会话</span><br><span class="line">    注意:一定要添加音频会话,不然真机上的录音时间不对,并且不能进行播放音频</span><br><span class="line"> */</span><br><span class="line">-(void)setAudioSession&#123;</span><br><span class="line">    AVAudioSession *audioSession=[AVAudioSession sharedInstance];</span><br><span class="line">    //设置为播放和录音状态，以便可以在录制完之后播放录音</span><br><span class="line">    [audioSession setCategory:AVAudioSessionCategoryPlayAndRecord error:nil];</span><br><span class="line">    [audioSession setActive:YES error:nil];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 录音文件设置</span><br><span class="line">- (NSDictionary *)getAudioSetting &#123;</span><br><span class="line">    NSMutableDictionary *dicM = [NSMutableDictionary dictionary];</span><br><span class="line">    // 设置录音格式</span><br><span class="line">    [dicM setObject:@(kAudioFormatLinearPCM) forKey:AVFormatIDKey];</span><br><span class="line">    // 设置录音采样率,8000是电话采样率,对于一般录音已经够了</span><br><span class="line">    [dicM setObject:@(8000) forKey:AVSampleRateKey];</span><br><span class="line">    // 设置通道,这里采用单声道</span><br><span class="line">    [dicM setObject:@(1) forKey:AVNumberOfChannelsKey];</span><br><span class="line">    // 每个采样点位数,分别为8,16,24,32</span><br><span class="line">    [dicM setObject:@(8) forKey:AVLinearPCMBitDepthKey];</span><br><span class="line">    // 是否使用浮点数采样</span><br><span class="line">    [dicM setObject:@(YES) forKey:AVLinearPCMIsFloatKey];</span><br><span class="line">    // ...其他设置</span><br><span class="line">    return dicM;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark -- AVAudioRecorderDelegate</span><br><span class="line">// 录音完成</span><br><span class="line">- (void)audioRecorderDidFinishRecording:(AVAudioRecorder *)recorder successfully:(BOOL)flag &#123;</span><br><span class="line">    //NSLog(@&quot;录音完毕&quot;);</span><br><span class="line">&#125;</span><br><span class="line">#pragma mark -- AVAudioPlayerDelegate</span><br><span class="line"></span><br><span class="line">- (void)audioPlayerDidFinishPlaying:(AVAudioPlayer *)player successfully:(BOOL)flag &#123;</span><br><span class="line">    NSLog(@&quot;播放完毕&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-播放语音"><a href="#5-播放语音" class="headerlink" title="5.播放语音"></a>5.播放语音</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">if ([chatFrameModel.msg.msg.message.body isEqualToString:@&quot;voice&quot;]) &#123;</span><br><span class="line">   if (self.audioPlayer.isPlaying) &#123;</span><br><span class="line">       [self.audioPlayer stop];</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   XMPPElement *node = chatFrameModel.msg.msg.message.children.lastObject;</span><br><span class="line">   // 取出消息的解码</span><br><span class="line">   NSString *base64str = node.stringValue;</span><br><span class="line">   NSData *data = [[NSData alloc]initWithBase64EncodedString:base64str options:0];</span><br><span class="line">   </span><br><span class="line">   self.audioPlayer = [[AVAudioPlayer alloc] initWithData:data error:NULL];</span><br><span class="line">   self.audioPlayer.delegate = self;</span><br><span class="line">   [self.audioPlayer play];</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="6-发送图片信息"><a href="#6-发送图片信息" class="headerlink" title="6.发送图片信息"></a>6.发送图片信息</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">XMPPMessage* message = [[XMPPMessage alloc] initWithType:@&quot;chat&quot; to:self.jidChatTo.jid];</span><br><span class="line">    // 设置bodyType类型值为image</span><br><span class="line">    //[message addAttributeWithName:@&quot;bodyType&quot; stringValue:type];</span><br><span class="line">#warning 此处采用图片,语音等传输方式为XML携带信息,所以传输速度慢,因为未搭建文件服务器,所以采用该种办法,建议采用文件服务器方式,传递URL</span><br><span class="line">    // 该处设置message的body为文件类型,后面对文件类型的判断由body来实现,其中尝试使用[message addAttributeWithName:@&quot;bodyType&quot; stringValue:type];来实现文件类型的判断但未成功,原因暂时未知</span><br><span class="line">    [message addBody:type];</span><br><span class="line">    </span><br><span class="line">    // 转换成base64的编码</span><br><span class="line">    NSString *base64str = [data base64EncodedStringWithOptions:0];</span><br><span class="line">    </span><br><span class="line">    // 设置节点内容</span><br><span class="line">    XMPPElement *attachment = [XMPPElement elementWithName:@&quot;attachment&quot; stringValue:base64str];</span><br><span class="line">    </span><br><span class="line">    // 包含子节点</span><br><span class="line">    [message addChild:attachment];</span><br><span class="line"></span><br><span class="line">#warning 此处采用的是文件服务器方式传输,但由于未建立文件服务器,所以传输对象为写死的一图片,语音等文件的url,仅供测试使用</span><br><span class="line">    //[message addBody:@&quot;http://img5.duitang.com/uploads/item/201407/24/20140724054410_5ctE2.jpeg&quot;];</span><br><span class="line">    // 发送图片消息</span><br><span class="line">    [[XMPPManager sharedmanager].stream sendElement:message];</span><br></pre></td></tr></table></figure><p>7.会话内容回执<br>通过单元格代理方式来获得会话内容回执进行音频播放和图片浏览<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#pragma mark ******************************</span><br><span class="line">#pragma mark --ChatCellDelegate</span><br><span class="line">- (void)getCurrentChatCell:(ChatTableViewCell *)cell withCurrentChatFrame:(ChatFrameModel *)chatFrameModel &#123;</span><br><span class="line">    //NSString *chatType = [chatFrameModel.msg.msg.message attributeStringValueForName:@&quot;bodyType&quot;];</span><br><span class="line">    if ([chatFrameModel.msg.msg.message.body isEqualToString:@&quot;image&quot;]) &#123;</span><br><span class="line">        MWPhotoBrowser *browser = [[MWPhotoBrowser alloc] initWithDelegate:self];</span><br><span class="line">        NSUInteger index = 0;</span><br><span class="line">        // 如果当前单元格中的url存在,则在数组中找到与之匹配的,并找出其序号</span><br><span class="line">        if (chatFrameModel.msg.msg.body) &#123;</span><br><span class="line">            index = [self.chatImageArray indexOfObject:chatFrameModel.msg.msg.body];</span><br><span class="line">        &#125;</span><br><span class="line">        // 设置图片查看器当前查看的位置</span><br><span class="line">        [browser setCurrentPhotoIndex:index];</span><br><span class="line">        // 跳转到图片查看器</span><br><span class="line">        [self.navigationController pushViewController:browser animated:YES];</span><br><span class="line">    &#125; else if ([chatFrameModel.msg.msg.message.body isEqualToString:@&quot;voice&quot;]) &#123;</span><br><span class="line">        if (self.audioPlayer.isPlaying) &#123;</span><br><span class="line">            [self.audioPlayer stop];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        XMPPElement *node = chatFrameModel.msg.msg.message.children.lastObject;</span><br><span class="line">        // 取出消息的解码</span><br><span class="line">        NSString *base64str = node.stringValue;</span><br><span class="line">        NSData *data = [[NSData alloc]initWithBase64EncodedString:base64str options:0];</span><br><span class="line">        </span><br><span class="line">        self.audioPlayer = [[AVAudioPlayer alloc] initWithData:data error:NULL];</span><br><span class="line">        self.audioPlayer.delegate = self;</span><br><span class="line">        [self.audioPlayer play];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="8-键盘高度"><a href="#8-键盘高度" class="headerlink" title="8.键盘高度"></a>8.键盘高度</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#pragma mak -- 更改键盘高度</span><br><span class="line">- (void)keyboardFrameChange:(NSNotification *)sender &#123;</span><br><span class="line">    // 获得键盘改变后的frame</span><br><span class="line">    NSValue *keyboardFrame = sender.userInfo[UIKeyboardFrameEndUserInfoKey];</span><br><span class="line">    CGRect rect = [keyboardFrame CGRectValue];</span><br><span class="line">    CGFloat height = CGRectGetHeight(rect);</span><br><span class="line">    // 计算聊天窗口的底部偏移量</span><br><span class="line">    if (rect.origin.y == [UIScreen mainScreen].bounds.size.height) &#123;</span><br><span class="line">        self.inputViewBottonConstraint.constant = 0;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        self.inputViewBottonConstraint.constant = height;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    [UIView animateWithDuration:0.25 animations:^&#123;</span><br><span class="line">        [self.view layoutIfNeeded];</span><br><span class="line">    &#125;];</span><br><span class="line">    [self scrollToBottom];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> XMPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Object-C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(十二)即时通讯之XMPPFramework花名册</title>
      <link href="/2016/08/22/XMPP/(%E5%8D%81%E4%BA%8C)%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E4%B9%8BXMPPFramework%E8%8A%B1%E5%90%8D%E5%86%8C/"/>
      <url>/2016/08/22/XMPP/(%E5%8D%81%E4%BA%8C)%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E4%B9%8BXMPPFramework%E8%8A%B1%E5%90%8D%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>这也是本人第一次琢磨关于即时通讯方面的内容,结合网上查看的相关资料搭建出来的仿微信小demo,如有意见请多多指教</p></blockquote><p><strong>具体项目可以在github<a href="https://git.oschina.net/huyoyu/WeiChat">WeiChat</a>下载进行查看,如若各位看官老爷觉得还可以请点star</strong></p><p>续前篇<a href="http://www.jianshu.com/p/6b3c12790f8e">(十)即时通讯之XMPPFramework登陆注册</a></p><p>续前篇<a href="http://www.jianshu.com/p/b1be451ccf5c">(十一)即时通讯之XMPPFramework电子名片</a></p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220519234204624.png" alt="服务器地址"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">**Attention,这里需要改成自己的服务器地址和端口号</span><br><span class="line">并且数据库和服务器一定要开启哟,不然没法登陆的哟**</span><br><span class="line">#ifdef DEBUG</span><br><span class="line">#define kHostName @&quot;192.168.199.111&quot;</span><br><span class="line">//#define kHostName @&quot;127.0.0.1&quot;</span><br><span class="line">#define kHostPort 5222</span><br><span class="line">#else</span><br><span class="line">#define kHostNanme @&quot;&quot;</span><br><span class="line">#define kHostPort 5222</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><p>本篇讲的是XMPPFramework的花名册部分</p><h3 id="1-什么是花名册"><a href="#1-什么是花名册" class="headerlink" title="1.什么是花名册"></a>1.什么是花名册</h3><p> 花名册就是XMPPRoster类,XMPPRoster可以处理和好友的相关事情,比如或获取好友列表,添加好友,接收好友请求,同意好友添加,拒绝好友添加等.</p><h3 id="2-XMPPRoster相关类"><a href="#2-XMPPRoster相关类" class="headerlink" title="2.XMPPRoster相关类"></a>2.XMPPRoster相关类</h3><ul><li>XMPPRoster（花名册）</li><li>XMPPRosterCoreDataStorage（花名册存储类）</li><li>XMPPRosterStorage（花名册存储代理）</li><li>XMPPRosterDelegate（花名册操作类）</li></ul><h3 id="3-XMPPRoster的使用"><a href="#3-XMPPRoster的使用" class="headerlink" title="3.XMPPRoster的使用"></a>3.XMPPRoster的使用</h3><p>其实这些模块的使用与之前的模块大同小异,请接着看:</p><h5 id="3-1XMPPRoster的激活"><a href="#3-1XMPPRoster的激活" class="headerlink" title="3.1XMPPRoster的激活"></a>3.1XMPPRoster的激活</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">         *  XMPPRoster模块激活</span><br><span class="line">         */</span><br><span class="line">        self.rosterStorage = [XMPPRosterCoreDataStorage sharedInstance];</span><br><span class="line">        self.roster = [[XMPPRoster alloc] initWithRosterStorage:self.rosterStorage];</span><br><span class="line">        [self.roster activate:self.stream];</span><br></pre></td></tr></table></figure><h5 id="3-2获取好友列表"><a href="#3-2获取好友列表" class="headerlink" title="3.2获取好友列表"></a>3.2获取好友列表</h5><p>查询步骤:</p><ul><li>1.设置代理XMPPRosterDelegate,这是为了监听后面的好友请求</li><li>2.通过XMPPRosterCoreDataStorage的数据库获得管理对象上下文</li><li>3.设置请求实体对象</li><li>4.设置查询条件</li><li>5.排序</li><li>6.执行请求NSFetchedResultsController(代理),</li><li>7.缓存到本地刷新</li></ul><p><strong>注意:设置查询条件的条件</strong></p><p>这里使用了一个类NSFetchedResultsController,是将查询和表结合的一种控件<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">// 通常有两种方式,这里就采用这种方式,如有兴趣可以查阅相关资料</span><br><span class="line">    XMPPManager *manager = [XMPPManager sharedmanager];</span><br><span class="line">    [manager.roster addDelegate:self delegateQueue:dispatch_get_main_queue()];</span><br><span class="line">    UserManager *user = [UserManager sharedmanager];</span><br><span class="line">    // 通过XMPPRosterCoreDataStorage的数据库获得管理对象上下文</span><br><span class="line">    NSManagedObjectContext *context = manager.rosterStorage.mainThreadManagedObjectContext;</span><br><span class="line">    // 设置请求实体对象,在数据库中名为XMPPUserCoreDataStorageObject的一张表</span><br><span class="line">    NSFetchRequest *request = [[NSFetchRequest alloc] initWithEntityName:@&quot;XMPPUserCoreDataStorageObject&quot;];</span><br><span class="line">    // 设置谓词查询条件,用户名是自己的JID</span><br><span class="line">    NSPredicate *predicate = [NSPredicate predicateWithFormat:@&quot;streamBareJidStr=%@&quot;,user.jid];</span><br><span class="line">    request.predicate = predicate;</span><br><span class="line">    </span><br><span class="line">    // 排序:按照用户名进行排序</span><br><span class="line">    NSSortDescriptor *sort = [NSSortDescriptor sortDescriptorWithKey:@&quot;displayName&quot; ascending:YES]</span><br><span class="line">    ;</span><br><span class="line">    request.sortDescriptors = @[sort];</span><br><span class="line">    </span><br><span class="line">    _fetchedRequestC = [[NSFetchedResultsController alloc] initWithFetchRequest:request managedObjectContext:context sectionNameKeyPath:nil cacheName:nil];</span><br><span class="line">    _fetchedRequestC.delegate = self;</span><br><span class="line"></span><br><span class="line">    NSError *error = nil;</span><br><span class="line">    if ([_fetchedRequestC performFetch:&amp;error]) &#123;</span><br><span class="line">        NSLog(@&quot;%@&quot;,error);</span><br><span class="line">    &#125;</span><br><span class="line">    [self.friendsArray removeAllObjects];</span><br><span class="line">    [self.friendsArray addObjectsFromArray:_fetchedRequestC.fetchedObjects];</span><br><span class="line">    [self.tableView reloadData];</span><br><span class="line">    </span><br><span class="line">    for (XMPPUserCoreDataStorageObject *obj in self.friendsArray) &#123;</span><br><span class="line">        //NSLog(@&quot;%@ ++ %@ ++ %@&quot;, obj.jidStr, obj.nickname, obj.displayName);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#pragma mark - NSFetchedResultsControllerDelegate</span><br><span class="line">// 代理方法,当数据发生变化时调用该方法</span><br><span class="line">- (void)controller:(NSFetchedResultsController *)controller didChangeObject:(id)anObject atIndexPath:(nullable NSIndexPath *)indexPath forChangeType:(NSFetchedResultsChangeType)type newIndexPath:(nullable NSIndexPath *)newIndexPath &#123;</span><br><span class="line">    NSLog(@&quot;数据发生变化&quot;);</span><br><span class="line">    [self.friendsArray removeAllObjects];</span><br><span class="line">    [self.friendsArray addObjectsFromArray:controller.fetchedObjects];</span><br><span class="line">    for (XMPPUserCoreDataStorageObject *obj in self.friendsArray) &#123;</span><br><span class="line">        //NSLog(@&quot;%@ -- %@ -- %@&quot;, obj.jidStr, obj.nickname, obj.displayName);</span><br><span class="line">    &#125;</span><br><span class="line">    [self.tableView reloadData];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="3-3添加好友"><a href="#3-3添加好友" class="headerlink" title="3.3添加好友"></a>3.3添加好友</h5><p><strong>注意:<br>  1.不能添加自己为好友<br>  2.不能添加已存在的好友</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">if ([self.searchTextField.text isEqualToString:[UserManager sharedmanager].loginName]) &#123;</span><br><span class="line">    [self showAlert:@&quot;不能添加自己为好友&quot;];</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">NSString *jidStr = [NSString stringWithFormat:@&quot;%@@%@&quot;,self.searchTextField.text,kHostName];</span><br><span class="line">XMPPJID *jid = [XMPPJID jidWithString:jidStr];</span><br><span class="line"></span><br><span class="line">XMPPManager *manager = [XMPPManager sharedmanager];</span><br><span class="line">if ([manager.rosterStorage userExistsWithJID:jid xmppStream:manager.stream]) &#123;</span><br><span class="line">    [self showAlert:@&quot;不能重复添加好友&quot;];</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[manager.roster subscribePresenceToUser:jid];</span><br><span class="line">[self showAlert:@&quot;已发送添加好友请求&quot;];</span><br></pre></td></tr></table></figure><h5 id="3-4删除好友"><a href="#3-4删除好友" class="headerlink" title="3.4删除好友"></a>3.4删除好友</h5><p><strong>注意:<br>  1.从服务器删<br>  2.从本地缓存删<br>  3.从表中删</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">XMPPUserCoreDataStorageObject *friend = self.friendsArray[indexPath.row];</span><br><span class="line">// 从服务器删</span><br><span class="line">[[XMPPManager sharedmanager].roster removeUser:friend.jid];</span><br><span class="line">// 从数组缓存中删</span><br><span class="line">[self.friendsArray removeObject:friend];</span><br><span class="line">// 从表中删</span><br><span class="line">[tableView deleteRowsAtIndexPaths:@[[NSIndexPath indexPathForRow:indexPath.row inSection:indexPath.section]] withRowAnimation:UITableViewRowAnimationFade];</span><br></pre></td></tr></table></figure></p><h5 id="3-5监听好友请求"><a href="#3-5监听好友请求" class="headerlink" title="3.5监听好友请求"></a>3.5监听好友请求</h5><p><strong>注意:<br>  1.可接受<br>  2.可拒绝</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">XMPPRoster *roster = [XMPPManager sharedmanager].roster;</span><br><span class="line">NSString *message = [NSString stringWithFormat:@&quot;%@请求添加你为好友&quot;,presence.from.user];</span><br><span class="line">XIAlertView *alertView = [[XIAlertView alloc] initWithTitle:@&quot;提示&quot; message:message cancelButtonTitle:@&quot;拒绝&quot;];</span><br><span class="line">[alertView addDefaultStyleButtonWithTitle:@&quot;接收&quot; handler:^(XIAlertView *alertView, XIAlertButtonItem *buttonItem) &#123;</span><br><span class="line">    if (buttonItem == 0) &#123;</span><br><span class="line">        // 接受</span><br><span class="line">        [roster rejectPresenceSubscriptionRequestFrom:presence.from];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">         / /拒绝</span><br><span class="line">         [roster acceptPresenceSubscriptionRequestFrom:presence.from andAddToRoster:YES];</span><br><span class="line">    &#125;</span><br><span class="line">    [alertView dismiss];</span><br><span class="line">&#125;];</span><br><span class="line">[alertView show];</span><br></pre></td></tr></table></figure></p><p>未完待续…</p>]]></content>
      
      
      <categories>
          
          <category> XMPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Object-C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(十一)即时通讯之XMPPFramework电子名片</title>
      <link href="/2016/08/22/XMPP/(%E5%8D%81%E4%B8%80)%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E4%B9%8BXMPPFramework%E7%94%B5%E5%AD%90%E5%90%8D%E7%89%87/"/>
      <url>/2016/08/22/XMPP/(%E5%8D%81%E4%B8%80)%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E4%B9%8BXMPPFramework%E7%94%B5%E5%AD%90%E5%90%8D%E7%89%87/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>这也是本人第一次琢磨关于即时通讯方面的内容,结合网上查看的相关资料搭建出来的仿微信小demo,如有意见请多多指教</p></blockquote><p><strong>具体项目可以在github<a href="https://git.oschina.net/huyoyu/WeiChat">WeiChat</a>下载进行查看,如若各位看官老爷觉得还可以请点star</strong></p><p>续前篇<a href="http://www.jianshu.com/p/6b3c12790f8e">(十)即时通讯之XMPPFramework登陆注册</a></p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220519234154328.png" alt="服务器地址"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">**Attention,这里需要改成自己的服务器地址和端口号</span><br><span class="line">并且数据库和服务器一定要开启哟,不然没法登陆的哟**</span><br><span class="line">#ifdef DEBUG</span><br><span class="line">#define kHostName @&quot;192.168.199.111&quot;</span><br><span class="line">//#define kHostName @&quot;127.0.0.1&quot;</span><br><span class="line">#define kHostPort 5222</span><br><span class="line">#else</span><br><span class="line">#define kHostNanme @&quot;&quot;</span><br><span class="line">#define kHostPort 5222</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><p>本篇讲的是XMPPFramework的电子名片部分</p><h3 id="1-什么叫电子名片"><a href="#1-什么叫电子名片" class="headerlink" title="1.什么叫电子名片"></a>1.什么叫电子名片</h3><p>在Extensions中有XEP-0054扩展，提供了一种可以通过XMPP发送电子名片的机制。</p><p>vCard，也叫Versitcard，vCard的常用文件扩展名是.vcf。在XMPP中通过XMPPvCardTemp和XMPPvCardCoreDataStorage两个类来实现。<br>vCard是电子名片的文件格式标准，一般附加在电子邮件之后，但也可以用于其它场合，比如在因特网上相互交换。</p><h3 id="2-电子名片相关类"><a href="#2-电子名片相关类" class="headerlink" title="2.电子名片相关类"></a>2.电子名片相关类</h3><ul><li>XMPPvCardTemp 代表电子名片<br>  它是继承自NSXMLElement的,提供了很多属性,比如出生日期,姓名,地址,手机号,邮箱等.</li><li>XMPPvCardCoreDataStorage 代表电子名片在core data存储<br>  它是一个单例类,直接与数据库相关,它遵循 XMPPvCardAvatarStorage,表示头像模块的存储代理,就可以将电子头像写入电子名片数据存储中</li><li>XMPPvCardTempModule ,继承自XMPPModule类,用于提供电子名片增、删、改、查操作</li></ul><h3 id="3-XMPPvCardTemp的使用"><a href="#3-XMPPvCardTemp的使用" class="headerlink" title="3.XMPPvCardTemp的使用"></a>3.XMPPvCardTemp的使用</h3><p><strong>注意:</strong><br><strong>1. XMPPvCardTemp可以在各个界面获得,用于用户信息的展示<br>  2.当对XMPPvCardTemp进行了修改时,需要想服务器进行更新<br>  3.可以通过代理方法获得用户头像,使用传值来获得头像展示</strong></p><h5 id="3-1XMPPvCardTemp的激活"><a href="#3-1XMPPvCardTemp的激活" class="headerlink" title="3.1XMPPvCardTemp的激活"></a>3.1XMPPvCardTemp的激活</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">         *  XMPPvCardCoreDataStorage和XMPPvCardTempModule模块的激活与设置代理</span><br><span class="line">         */</span><br><span class="line">        self.vCardStorage = [XMPPvCardCoreDataStorage sharedInstance];</span><br><span class="line">        self.vCardModule = [[XMPPvCardTempModule alloc] initWithvCardStorage:self.vCardStorage];</span><br><span class="line">        [self.vCardModule activate:self.stream];</span><br><span class="line">        [self.vCardModule addDelegate:self delegateQueue:dispatch_get_main_queue()];</span><br><span class="line">        </span><br><span class="line">        /**</span><br><span class="line">         *  XMPPvCardAvatarModule头像模块激活与设置代理</span><br><span class="line">         */</span><br><span class="line">        self.vCardAvatar = [[XMPPvCardAvatarModule alloc] initWithvCardTempModule:self.vCardModule];</span><br><span class="line">        [self.vCardAvatar activate:self.stream];</span><br><span class="line">        [self.vCardAvatar addDelegate:self delegateQueue:dispatch_get_main_queue()];</span><br></pre></td></tr></table></figure><h5 id="3-2XMPPvCardTemp的使用"><a href="#3-2XMPPvCardTemp的使用" class="headerlink" title="3.2XMPPvCardTemp的使用"></a>3.2XMPPvCardTemp的使用</h5><p>在微信主界面中我的界面可以通过电子名片来获得用户相关信息<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">    *  从电子名片的模型中获取自已用户信息的电子名片展示在个人信息中</span><br><span class="line">    */</span><br><span class="line">   XMPPManager *manager = [XMPPManager sharedmanager];</span><br><span class="line">   XMPPvCardTemp *vCard = manager.vCardModule.myvCardTemp;</span><br><span class="line">   self.nameLab.text = vCard.nickname;</span><br><span class="line">   self.weiXinNameLab.text = [NSString stringWithFormat:@&quot;微信号:  %@&quot;,[UserManager sharedmanager].loginName];</span><br><span class="line">   self.headerImageV.image = [UIImage imageWithData:vCard.photo];</span><br><span class="line">   </span><br><span class="line">   // 头像发生改变时,回调block改变个人信息的头像</span><br><span class="line">   [manager xmppGetUserHeaderImage:^(UIImage *image) &#123;</span><br><span class="line">       self.headerImageV.image = image;</span><br><span class="line">   &#125;];</span><br></pre></td></tr></table></figure><br>在微信的用户设置界面可以对用户的信息相关设置,这里举例对用户头像的设置<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 选取头像成功后需要手动将数据更新到服务器</span><br><span class="line">    XMPPManager *manager = [XMPPManager sharedmanager];</span><br><span class="line">    XMPPvCardTemp *vCard = manager.vCardModule.myvCardTemp;</span><br><span class="line">    vCard.photo = UIImageJPEGRepresentation(image, 0.75);</span><br><span class="line">    //vCard.nickname = @&quot;华惠友&quot;;</span><br><span class="line">    // 更新到服务器</span><br><span class="line">    [manager.vCardModule updateMyvCardTemp:vCard];</span><br></pre></td></tr></table></figure></p><h5 id="3-3当用户电子名片代理"><a href="#3-3当用户电子名片代理" class="headerlink" title="3.3当用户电子名片代理"></a>3.3当用户电子名片代理</h5><p>当用户的名片信息或头像发生变化时,如果在激活模块中设置了代理,那么就可以通过代理来获得用户的名片信息<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#pragma mark -- XMPPvCardTempModuleDelegate名片代理</span><br><span class="line">/**</span><br><span class="line"> *  当用户名片信息发生改变时,调用该方法</span><br><span class="line"> */</span><br><span class="line">- (void)xmppvCardTempModule:(XMPPvCardTempModule *)vCardTempModule</span><br><span class="line">        didReceivevCardTemp:(XMPPvCardTemp *)vCardTemp</span><br><span class="line">                     forJID:(XMPPJID *)jid &#123;</span><br><span class="line">    // 打印用户信息</span><br><span class="line">    XMPPvCardTemp *temp = [self.vCardStorage vCardTempForJID:jid xmppStream:self.stream];</span><br><span class="line">    //NSLog(@&quot;%@&quot;,temp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark ******************************</span><br><span class="line">#pragma mark -- XMPPvCardAvatarDelegate名片代理</span><br><span class="line">/**</span><br><span class="line"> *  当用户名片头像发生改变时,调用该方法</span><br><span class="line"> */</span><br><span class="line">- (void)xmppvCardAvatarModule:(XMPPvCardAvatarModule *)vCardTempModule</span><br><span class="line">              didReceivePhoto:(UIImage *)photo</span><br><span class="line">                       forJID:(XMPPJID *)jid &#123;</span><br><span class="line">    NSLog(@&quot;头像发生变化&quot;);</span><br><span class="line">    if (self.imageBlock) &#123;</span><br><span class="line">        self.imageBlock(photo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>未完待续…</p>]]></content>
      
      
      <categories>
          
          <category> XMPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Object-C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(十)即时通讯之XMPPFramework登陆注册</title>
      <link href="/2016/08/20/XMPP/(%E5%8D%81)%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E4%B9%8BXMPPFramework%E7%99%BB%E9%99%86%E6%B3%A8%E5%86%8C/"/>
      <url>/2016/08/20/XMPP/(%E5%8D%81)%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E4%B9%8BXMPPFramework%E7%99%BB%E9%99%86%E6%B3%A8%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>这也是本人第一次琢磨关于即时通讯方面的内容,结合网上查看的相关资料搭建出来的仿微信小demo,如有意见请多多指教</p><p>写了这么多,尼玛终于到正题了,前面9篇讲的都是基本概念及相关环境的搭建,这里列举一下:</p><ul><li>Sokcet套接字的简介</li><li>网络七层协议,TCP/UDP的概念</li><li>CocoaSocket的使用</li><li>XMPP协议的简介</li><li>XMPP通讯环境SQL的搭建</li><li>XMPP通讯环境服务器openfire的搭建</li><li>XMPP通讯环境客户端message,Aduim,Spark的搭建</li><li>XMPPFramework框架的导入及简单介绍</li></ul></blockquote><p><strong>具体项目可以在github<a href="https://git.oschina.net/huyoyu/WeiChat">WeiChat</a>下载进行查看,如若各位看官老爷觉得还可以请点star</strong></p><p><strong>下面开始进入正题</strong><br><strong>XMPPFramework的使用</strong></p><p><strong>看图</strong></p><ul><li><p>用户注册<br><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/strip.gif" alt="注册.gif"></p></li><li><p>登陆<br><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/strip-20220519234142098.gif" alt="登陆"></p></li><li><p>切换用户登陆<br><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/strip-20220519234142477.gif" alt="切换用户登陆.gif"></p></li><li><p>注销<br><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/strip-20220519234142702.gif" alt="注销"></p></li></ul><p>今天讲的是XMPP的登陆注册部分,废话不多说:</p><h3 id="1-登陆注册部分常用的对象"><a href="#1-登陆注册部分常用的对象" class="headerlink" title="1.登陆注册部分常用的对象"></a>1.登陆注册部分常用的对象</h3><ul><li>XMPPStream XMPP通道:负责XMPP信息的传输以及传输状态等</li><li>XMPPReconnect 自动连接</li></ul><h3 id="2-准备工作"><a href="#2-准备工作" class="headerlink" title="2.准备工作"></a>2.准备工作</h3><p>1.创建一个单例类名为XMPPManager,负责XMPP相关管理工作,比如各类登陆注册模块的激活,实现都在这里进行处理.<br>2.创建一个单例类名为UserManager,负责用户的账号密码的管理以及获取用户信息等方面.</p><h3 id="3-登录注册实现部分"><a href="#3-登录注册实现部分" class="headerlink" title="3.登录注册实现部分"></a>3.登录注册实现部分</h3><h4 id="3-1实现原理"><a href="#3-1实现原理" class="headerlink" title="3.1实现原理"></a>3.1实现原理</h4><p>这里阐述下实现原理,具体实现过程请参考下部分代码以及项目内容.</p><pre><code> 1.导入XMPPStream,XMPPReonnect头文件 2.激活XMPPStream,XMPPReconnect模块并设置代理 3.登录的流程：  xmpp的登录流程是，  3.1 传递 JID , Host , Port 先连接上服务器   3.2连接成功了 再 发送密码到服务器 ，  3.3授权成功 或者 授权失败.这就代表登陆成功或失败,成功了则跳到微信主界面 4.注册的流程:   4.1xmpp的注册流程是， 传递 JID , Host , Port 先连接上服务器 :通过JID连接成功连接成功则会自动调用XMPPStreamDelegatexmppStreamDidConnect 代理方法然后在通过代理方法调用 XMPPStream的发送密码的方法authenticateWithPassword   4.2连接成功了 再 发送注册密码到服务器    4.3注册成功 或者 失败,注册成功了跳到登陆界面,进行登陆共同点：不管你jid存不存在 都能连接到服务器。不同点:发送的是授权密码 还是 发送注册密码 就是决定你是登录还是注册.5.在登陆注册页面进行调用方法并传递状态</code></pre><p><strong>注意:<br>  1.连接到服务器后,对于是登陆还是注册的判断<br>  2.登陆成功后需要发送一个在线状态消息,离线了需要发送离线状态消息<br>  3.在UserManager中登陆用户信息和注册用户信息分清楚<br>  4.XMPPStream代理方法执行的顺序先后<br>  5.block对于登陆注册状态的提示<br>  6.对于XMPP JID的理解,用户名@服务器地址.设备信息(可选)</strong><br>    详细请看demo<br>  7.这个demo里登录名就是密码,不影响使用,请注意</p><h4 id="3-2XMPPManager部分"><a href="#3-2XMPPManager部分" class="headerlink" title="3.2XMPPManager部分"></a>3.2XMPPManager部分</h4><h5 id="3-2-1单例类"><a href="#3-2-1单例类" class="headerlink" title="3.2.1单例类"></a>3.2.1单例类</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#pragma mark 创建XMPPManager单例类</span><br><span class="line">singleton_m(manager)</span><br></pre></td></tr></table></figure><h5 id="3-2-2创建XMPPStream对象"><a href="#3-2-2创建XMPPStream对象" class="headerlink" title="3.2.2创建XMPPStream对象"></a>3.2.2创建XMPPStream对象</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 登录注册什么的都是和服务器交互,所以我们用到的类就是XMPPStream</span><br><span class="line">- (void)connect &#123;</span><br><span class="line">    if (!self.stream) &#123;</span><br><span class="line">        // 创建XMPPStream,只需要初始化一次,所以加判断</span><br><span class="line">        self.stream = [[XMPPStream alloc] init];</span><br><span class="line">        // 设置stream的域名和端口号</span><br><span class="line">        self.stream.hostName = kHostName;</span><br><span class="line">        self.stream.hostPort = kHostPort;</span><br><span class="line">        // 添加代理 连接成功后调用传密码的方法</span><br><span class="line">        [self.stream addDelegate:self delegateQueue:dispatch_get_main_queue()];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 连接服务器</span><br><span class="line">- (void)connectToServer &#123;</span><br><span class="line">    // 判断是否连接成功过</span><br><span class="line">    if (![self.stream isConnected]) &#123;</span><br><span class="line">        // 连接到服务器</span><br><span class="line">        NSError *error;</span><br><span class="line">        [self.stream connectWithTimeout:XMPPStreamTimeoutNone error:&amp;error];</span><br><span class="line">        if (error) &#123;</span><br><span class="line">            NSLog(@&quot;%@&quot;,error);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // 连接成功则会自动调用XMPPStreamDelegatexmppStreamDidConnect 代理方法</span><br><span class="line">            // 然后在通过代理方法调用 XMPPStream的发送密码的方法authenticateWithPassword</span><br><span class="line">            NSLog(@&quot;连接成功&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-2-3-用户登陆-使用登陆JID用户名"><a href="#3-2-3-用户登陆-使用登陆JID用户名" class="headerlink" title="3.2.3 用户登陆,使用登陆JID用户名"></a>3.2.3 用户登陆,使用登陆JID用户名</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">- (void)xmppUserLogin:(UserSatateBlock)block &#123;</span><br><span class="line">    // block赋值给全局变量,在代理方法中调用block传递登陆信息</span><br><span class="line">    self.block = block;</span><br><span class="line">    </span><br><span class="line">    // 不管登陆几次,每次登陆之前都要先把连接断开</span><br><span class="line">    [self.stream disconnect];</span><br><span class="line">    </span><br><span class="line">    // 初始化XMPPPStream</span><br><span class="line">    [self connect];</span><br><span class="line">    </span><br><span class="line">    /**</span><br><span class="line">     *  因为在调用之前,在userDefault中存储的是登陆用户的名字</span><br><span class="line">        所以在这里获取用户的名字</span><br><span class="line">     */</span><br><span class="line">    UserManager *user = [UserManager sharedmanager];</span><br><span class="line">    [user readLoginInfo];</span><br><span class="line">    // 设置XMPPStream的JID   : yoyu@127.0.0.1.iPhone</span><br><span class="line">    self.stream.myJID = [XMPPJID jidWithUser:user.loginName domain:kHostName resource:@&quot;iPhone&quot;];</span><br><span class="line">    </span><br><span class="line">    // 通过读取UserDefault中的name连接服务器</span><br><span class="line">    [self connectToServer];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-2-4用户注册-使用注册JID用户名"><a href="#3-2-4用户注册-使用注册JID用户名" class="headerlink" title="3.2.4用户注册,使用注册JID用户名"></a>3.2.4用户注册,使用注册JID用户名</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">- (void)xmppUserRegist:(UserSatateBlock)block &#123;</span><br><span class="line">    self.block = block;</span><br><span class="line">    </span><br><span class="line">    // 不管登陆几次,每次登陆之前都要先把连接断开</span><br><span class="line">    [self.stream disconnect];</span><br><span class="line">    </span><br><span class="line">    // 初始化XMPPPStream</span><br><span class="line">    [self connect];</span><br><span class="line">    </span><br><span class="line">    /**</span><br><span class="line">     *  因为在调用之前,在userDefault中存储的是注册用户的名字</span><br><span class="line">        所以在这里获取用户的名字</span><br><span class="line">     */</span><br><span class="line">    UserManager *user = [UserManager sharedmanager];</span><br><span class="line">    [user readRegistInfo];</span><br><span class="line">    // 设置XMPPStream的JID   : yoyu@127.0.0.1.iPhone</span><br><span class="line">    self.stream.myJID = [XMPPJID jidWithUser:user.registName domain:kHostName resource:@&quot;iPhone&quot;];</span><br><span class="line">    </span><br><span class="line">    // 通过读取UserDefault中的name连接服务器</span><br><span class="line">    [self connectToServer];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-2-5用户注销"><a href="#3-2-5用户注销" class="headerlink" title="3.2.5用户注销"></a>3.2.5用户注销</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">- (void)xmppUserLogout &#123;</span><br><span class="line">    // 发送离线状态</span><br><span class="line">    [self sendOfflineMessage];</span><br><span class="line">    </span><br><span class="line">    // 断开连接</span><br><span class="line">    [self.stream disconnect];</span><br><span class="line">    </span><br><span class="line">    // 跳转到登陆界面</span><br><span class="line">    UIWindow *window = [[UIApplication sharedApplication].delegate window];</span><br><span class="line">    UIStoryboard *storyBoard = [UIStoryboard storyboardWithName:@&quot;LoginAndRegist&quot; bundle:nil];</span><br><span class="line">    window.rootViewController = [storyBoard instantiateInitialViewController];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-2-6XMPPStreamDelegate连接服务器状态"><a href="#3-2-6XMPPStreamDelegate连接服务器状态" class="headerlink" title="3.2.6XMPPStreamDelegate连接服务器状态"></a>3.2.6XMPPStreamDelegate连接服务器状态</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">#pragma mark -- XMPPStreamDelegate</span><br><span class="line">/**</span><br><span class="line"> *  登录的流程：</span><br><span class="line">    xmpp的登录流程是， 传递 JID , Host , Port 先连接上服务器 ，连接成功了 再 发送密码到服务器 ，授权成功 或者 授权失败</span><br><span class="line"> </span><br><span class="line">    注册的流程：</span><br><span class="line">    xmpp的注册流程是， 传递 JID , Host , Port 先连接上服务器 ，连接成功了 再 发送注册密码到服务器 ，注册成功 或者 失败</span><br><span class="line"> </span><br><span class="line">    共同点：</span><br><span class="line">    不管你jid存不存在 都能连接到服务器。</span><br><span class="line"> </span><br><span class="line">    不同点:</span><br><span class="line">    发送的是授权密码 还是 发送注册密码 就是决定你是登录还是注册</span><br><span class="line"></span><br><span class="line"> */</span><br><span class="line">/**</span><br><span class="line">    通过JID连接成功</span><br><span class="line"> *  连接成功则会自动调用XMPPStreamDelegatexmppStreamDidConnect 代理方法</span><br><span class="line">    然后在通过代理方法调用 XMPPStream的发送密码的方法authenticateWithPassword</span><br><span class="line"> */</span><br><span class="line">#pragma mark -- 连接成功</span><br><span class="line">- (void)xmppStreamDidConnect:(XMPPStream *)sender &#123;</span><br><span class="line">    NSLog(@&quot;通过JID建立连接成功&quot;);</span><br><span class="line">    /**</span><br><span class="line">     *  发送密码进行授权登陆</span><br><span class="line">        分登陆密码</span><br><span class="line">        和注册密码</span><br><span class="line">        需要判断</span><br><span class="line">     */</span><br><span class="line">    UserManager *user = [UserManager sharedmanager];</span><br><span class="line">    //[user readUserInfo];</span><br><span class="line">    NSError *error = nil;</span><br><span class="line">    NSLog(@&quot;%@&quot;,user.loginName);</span><br><span class="line">    NSLog(@&quot;---%@&quot;,user.registName);</span><br><span class="line">    if (user.loginName) &#123;</span><br><span class="line">        // 发送登陆密码</span><br><span class="line">        [self.stream authenticateWithPassword:user.loginPsw error:&amp;error];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        // 发送注册密码</span><br><span class="line">        [self.stream registerWithPassword:user.registPsw error:&amp;error];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark -- 连接失败,与服务器断开连接(例如网络原因)</span><br><span class="line">- (void)xmppStreamDidDisconnect:(XMPPStream *)sender withError:(NSError *)error &#123;</span><br><span class="line">    NSLog(@&quot;通过JID建立连接失败,与服务器断开连接&quot;);</span><br><span class="line">    if (self.block) &#123;</span><br><span class="line">        self.block(XMPPUserStateTypeOther);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 发送通知:状态2表示连接服务器失败</span><br><span class="line">    [[NSNotificationCenter defaultCenter] postNotificationName:kLoginStateNotification object:nil userInfo:@&#123;@&quot;state&quot;:@&quot;3&quot;&#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-2-7XMPPStreamDelegate登陆"><a href="#3-2-7XMPPStreamDelegate登陆" class="headerlink" title="3.2.7XMPPStreamDelegate登陆"></a>3.2.7XMPPStreamDelegate登陆</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> *  属于登陆方面</span><br><span class="line"> */</span><br><span class="line">#pragma mark -- 授权登陆成功</span><br><span class="line">-(void)xmppStreamDidAuthenticate:(XMPPStream *)sender&#123;</span><br><span class="line">    NSLog(@&quot;授权登陆成功&quot;);</span><br><span class="line">    if (self.block) &#123;</span><br><span class="line">        self.block(XMPPUserStateTypeSuccess);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 授权登陆成功后,跳转到主界面</span><br><span class="line">    UIWindow *window = [[UIApplication sharedApplication].delegate window];</span><br><span class="line">    UIStoryboard *storyBoard = [UIStoryboard storyboardWithName:@&quot;Main&quot; bundle:nil];</span><br><span class="line">    window.rootViewController = [storyBoard instantiateInitialViewController];</span><br><span class="line">    </span><br><span class="line">    // 同时要发送一个在线的信息</span><br><span class="line">    [self sendOnlineMessage];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark -- 授权登陆失败</span><br><span class="line">-(void)xmppStream:(XMPPStream *)sender didNotAuthenticate:(DDXMLElement *)error&#123;</span><br><span class="line">    NSLog(@&quot;授权登陆失败&quot;);</span><br><span class="line">    if (self.block) &#123;</span><br><span class="line">        self.block(XMPPUserStateTypeFaild);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-2-8XMPPStreamDelegate注册"><a href="#3-2-8XMPPStreamDelegate注册" class="headerlink" title="3.2.8XMPPStreamDelegate注册"></a>3.2.8XMPPStreamDelegate注册</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> *  属于注册方面</span><br><span class="line"> */</span><br><span class="line">#pragma mark -- 注册成功</span><br><span class="line">- (void)xmppStreamDidRegister:(XMPPStream *)sender&#123;</span><br><span class="line">    NSLog(@&quot;注册成功&quot;);</span><br><span class="line">    if (self.block) &#123;</span><br><span class="line">        self.block(XMPPUserStateTypeSuccess);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark -- 注册失败</span><br><span class="line">- (void)xmppStream:(XMPPStream *)sender didNotRegister:(NSXMLElement *)error&#123;</span><br><span class="line">    NSLog(@&quot;注册失败&quot;);</span><br><span class="line">    if (self.block) &#123;</span><br><span class="line">        self.block(XMPPUserStateTypeFaild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-2-7登陆状态发送"><a href="#3-2-7登陆状态发送" class="headerlink" title="3.2.7登陆状态发送"></a>3.2.7登陆状态发送</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#pragma mark ******************************</span><br><span class="line">#pragma mark - 登陆成功后,给服务器发送一个在线消息:上线了</span><br><span class="line">/**</span><br><span class="line">    presence表示用户状态</span><br><span class="line"> </span><br><span class="line">   presence 的状态：</span><br><span class="line">        available 上线</span><br><span class="line">        away 离开</span><br><span class="line">        do not disturb 忙碌</span><br><span class="line">        unavailable 下线</span><br><span class="line"> */</span><br><span class="line">- (void)sendOnlineMessage &#123;</span><br><span class="line">    /**</span><br><span class="line">     *  关于用户的上线和下线，需要用到一个类XMPPPresence 类。这个类是XMPPElement的子类，主要用来管理某些信息的展现。首先要实例化一个对象，这其中会用到一个presenceWithType 方法，有两个选择@&quot;unavailable&quot;代表下线，@&quot;available&quot;代表上线，一般情况上线的时候后面就可以直接省略。</span><br><span class="line">     */</span><br><span class="line">    XMPPPresence *pre = [XMPPPresence presenceWithType:@&quot;available&quot;];</span><br><span class="line">    // XMPPPresence *pre = [XMPPPresence presence];</span><br><span class="line">    [self.stream sendElement:pre];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - 离线时,给服务器发送一个在线消息:下线了</span><br><span class="line">- (void)sendOfflineMessage &#123;</span><br><span class="line">    XMPPPresence *pre = [XMPPPresence presenceWithType:@&quot;unavailable&quot;];</span><br><span class="line">    [self.stream sendElement:pre];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.3登陆注册页面<br>  这个部分就不详细介绍了,可以进demo查阅</p><p>未完待续…</p>]]></content>
      
      
      <categories>
          
          <category> XMPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Object-C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(九)即时通讯之XMPPFramework简介</title>
      <link href="/2016/08/20/XMPP/(%E4%B9%9D)%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E4%B9%8BXMPPFramework%E7%AE%80%E4%BB%8B/"/>
      <url>/2016/08/20/XMPP/(%E4%B9%9D)%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E4%B9%8BXMPPFramework%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>关于使用XMPPFramework完成即时通讯请继续关注后面系类内容.</p></blockquote><p><a href="http://www.jianshu.com/p/b5aa4238d2bf">即时通讯之XMPPFramework导入</a></p><p><a href="https://github.com/robbiehanson/XMPPFramework">XMPPFramework</a>是一个OS X/iOS平台的开源项目，使用Objective-C实现了XMPP协议（RFC-3920），同时还提供了用于读写XML的工具，大大简化了基于XMPP的通信应用的开发,是对XMPP的一次封装,使得我们更好的使用XMPP协议。</p><h3 id="XMPP中常用对象们"><a href="#XMPP中常用对象们" class="headerlink" title="XMPP中常用对象们"></a>XMPP中常用对象们</h3><p>XMPPStream：xmpp基础服务类</p><p>XMPPRoster：好友列表类</p><p>XMPPRosterCoreDataStorage：好友列表（用户账号）在core data中的操作类</p><p>XMPPvCardCoreDataStorage：好友名片（昵称，签名，性别，年龄等信息）在core data中的操作类</p><p>XMPPvCardTemp：好友名片实体类，从数据库里取出来的都是它</p><p>xmppvCardAvatarModule：好友头像</p><p>XMPPReconnect：如果失去连接,自动重连</p><p>XMPPRoom：提供多用户聊天支持</p><p>XMPPPubSub：发布订阅</p><p>XMPPMessageArchiving: 聊天信息模块</p><p>XMPPMessageArchivingCoreDataStorage: 聊天信息在数据库中的操作类</p><p>这些模块使用大都是需要先激活再使用,具体的可以关注接下来的文章</p><h3 id="下面是XMPPFramework几个常用到的扩展。"><a href="#下面是XMPPFramework几个常用到的扩展。" class="headerlink" title="下面是XMPPFramework几个常用到的扩展。"></a>下面是XMPPFramework几个常用到的扩展。</h3><h3 id="协议简介"><a href="#协议简介" class="headerlink" title="协议简介"></a>协议简介</h3><p>XEP-0009</p><p>在两个XMPP实体间传输XML-RPC编码请求和响应</p><p>XEP-0006</p><p>使能与网络上某个XMPP实体间的通信</p><p>XEP-0045</p><p>多人聊天相关协议</p><p>XEP-0054</p><p>名片格式的标准文档</p><p>XEP-0060</p><p>提供通用公共订阅功能</p><p>XEP-0065</p><p>两个XMPP用户之间建立一个带外流，主要用于文件传输</p><p>XEP-0082</p><p>日期和时间信息的标准化表示</p><p>XEP-0085</p><p>聊天对话中通知用户状态</p><p>XEP-0100</p><p>表述了XMPP客户端与提供传统的IM服务的代理网关之间交换的最佳实践</p><p>XEP-0115</p><p>广播和动态发现客户端、设备、或一般实体能力。</p><p>XEP-0136</p><p>为服务端备份和检索XMPP消息定义机制和偏好设置</p><p>XEP-0153</p><p>用于交换用户头像</p><p>XEP-0184</p><p>消息送达回执协议</p><p>XEP-0199</p><p>XMPP ping 协议</p><p>XEP-0202</p><p>用于交换实体间的本地时间信息</p><p>XEP-0203</p><p>用于延迟发送</p><p>XEP-0224</p><p>引起另一个用户注意的协议</p><p>详细的协议，点击<a href="http://xmpp.org/xmpp-protocols/xmpp-extensions/">这里</a></p>]]></content>
      
      
      <categories>
          
          <category> XMPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Object-C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(八)即时通讯之XMPPFramework导入</title>
      <link href="/2016/08/20/XMPP/(%E5%85%AB)%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E4%B9%8BXMPPFramework%E5%AF%BC%E5%85%A5/"/>
      <url>/2016/08/20/XMPP/(%E5%85%AB)%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E4%B9%8BXMPPFramework%E5%AF%BC%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<blockquote><p>XMPPFramework框架的导入有两种方式<br>1.通过cocopods进行配置,比较方便,但某些时候可能会配置不成功.<br>2.手动配置.需要导入XMPPFramework矿建并配置相关依赖以及一些处理,较为麻烦.</p></blockquote><p><strong>下面介绍的就是手动配置XMPP框架 </strong></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在提供的Xcode示例项目中，包含有在iOS中使用XMPPFramework的演示项目。您可以在Xcode/iPhoneXMPP文件夹中找到它。该项目的设计并不是为了演示一个完整的商业应用，而仅是为了演示如何使用XMPPFramework框架，并提供有iOS平台上需要使用的具体代码。您可以随意修改及测试该项目，并浏览AppDelegate文件中的代码。提示，该示例程序仅使用了框架中的一小部分功能。<br>本文档提供了如何将XMPPFramework框架添加到iOS项目的详细说明，您也可以参照iPhoneXMPP项目中的具体引用。<br>提示：请按照以下步骤逐一执行，而不要省略或者跳过某个步骤。</p><ul><li><p><strong>第一步</strong><br>使用源代码管理器检出最新版本的项目。默认的分支包含有最新稳定版本的代码。<br>github地址:<a href="https://github.com/robbiehanson/XMPPFramework">https://github.com/robbiehanson/XMPPFramework</a><br>下载对应的压缩包并解压缩</p></li><li><p><strong>第二步</strong><br>尽管本框架包含有对其他项目的依赖，不过您已无需再使用git去分别克隆这些项目。在克隆XMPPFramework框架的同时，这些项目会被同时克隆并保存在Vendor文件夹中。接下来，我们将逐一确认每一个依赖，以确保在完成最后一步工作之后，能够正常编译项目。<br>第一个依赖是<a href="https://github.com/robbiehanson/CocoaLumberjack">CocoaLumberjack</a>，这是XMPPFramework框架使用的日志框架。<br>（有关日志框架的进一步信息，可以参见XMPPFramework的介绍文档，另外在Lumberjack的项目主页中也提供有大量的文档。）<br>将Vendor/CocoaLumberjack复制并添加入Xcode项目。<br>Lumberjack不包含任何子依赖或特殊要求的框架。<br>现在，请确认您的项目可以正常编译。</p></li><li><p><strong>第三步</strong><br>第二个依赖是CocoaAsyncSocket，这是XMPPFramework框架使用的底层网络框架。<br>将Vendor/CocoaAsyncSocket复制并添加入Xcode项目。<br>要使用此依赖，需要将苹果的<strong>CFNetwork</strong>框架添加到项目。<br>要使用此依赖，还需要将苹果的<strong>Security</strong>框架添加到项目。<br>现在，请确认您的项目可以正常编译。</p></li><li><p><strong>第四步</strong><br>第三个依赖是KissXML，由于苹果并没有针对iOS提供NSXML类以处理NSXMLDocument、NSXMLElement、NSXMLNode，因此我们使用KissXML取而代之。<br>将Vendor/KissXML复制并添加入Xcode项目。<br>由于KissXML内部使用到libxml2。因此还需要告诉Xcode在哪里可以找到libxml2的头文件，并且在编译完成后链接libxml2编译库。要做到这两点，在项目的编译设置中设置以下两条编译指令即可：</p></li></ul><ol><li>Other Link Flags = -lxml2</li><li>Header Search Paths = /usr/include/libxml2<br>执行完上述操作后，请确认您的项目可以正常编译。</li></ol><ul><li><p><strong>第五步</strong><br>第四个以及最后一个依赖是libidn。将以下文件添加到项目中：<br>Vendor/libidn/idn-int.h<br>Vendor/libidn/stringprep.h<br>Vendor/libidn/libidn.a<br>上述最后一个文件libidn.a是一个静态库，支持包括：x86*64、i386、ppc、armv6、armv7等多种架构。因而该文件的个头也不小，大约有1.7M。但是不用担心，编译器会在编译时仅提取架构所需的内容，并且只会提取被使用的那一部分，而由于框架中仅仅只用到了该静态库中很小的一部分内容。换言之，该静态库的使用不会明显增加您应用程序的大小！<br>注释：libidn的源代码包含在libidn-1.15.tar.gz中。不过很显然，没有必要将其添加到项目之中。<br>执行完上述操作后，请确认您的项目可以正常编译。</p></li><li><p><strong>第六步</strong><br>将以下文件夹复制并添加入Xcode项目：<br>Authentication<br>Categories<br>Core<br>Utilities<br>另外，还需将libresolv.dylib添加至Xcode项目。<br>执行完上述操作后，请确认您的项目可以正常编译。</p></li></ul><h4 id="大功告成"><a href="#大功告成" class="headerlink" title="大功告成!!!"></a>大功告成!!!</h4><p>至此，您已经准备好在项目中使用XMPPFramework框架了。后续的相关操作请参见：Intro to XMPPFramework文档。</p>]]></content>
      
      
      <categories>
          
          <category> XMPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Object-C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(七)即时通讯之mac上搭建客户端</title>
      <link href="/2016/08/20/XMPP/(%E4%B8%83)%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E4%B9%8Bmac%E4%B8%8A%E6%90%AD%E5%BB%BA%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
      <url>/2016/08/20/XMPP/(%E4%B8%83)%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E4%B9%8Bmac%E4%B8%8A%E6%90%AD%E5%BB%BA%E5%AE%A2%E6%88%B7%E7%AB%AF/</url>
      
        <content type="html"><![CDATA[<p><strong>搭建openfire服务器前先搭建数据库:</strong><a href="http://www.jianshu.com/p/368708e9b8bb">即时通讯之mac上安装MySQL</a></p><p><strong>搭建客户端前先搭建openfire服务器:</strong><a href="http://www.jianshu.com/writer#/notebooks/5785180/notes/5368292">即时通讯之mac上安装MySQL</a></p><h3 id="1-进入XMPP官网下载客户端"><a href="#1-进入XMPP官网下载客户端" class="headerlink" title="1.进入XMPP官网下载客户端"></a>1.进入XMPP官网下载客户端</h3><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220519234037511.png" alt=""></p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220519234037640.png" alt=""></p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220519234037839.png" alt=""></p><p>主要使用两个客户端Adium和Spark<br><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220519234038095.png" alt=""></p><p>外带mac信息<br><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220519234038453.png" alt=""></p><h3 id="2-开启openfire服务器-添加用户"><a href="#2-开启openfire服务器-添加用户" class="headerlink" title="2.开启openfire服务器,添加用户"></a>2.开启openfire服务器,添加用户</h3><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220519234038837.png" alt=""></p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220519234039137.png" alt=""></p><h3 id="3-信息登录"><a href="#3-信息登录" class="headerlink" title="3.信息登录"></a>3.信息登录</h3><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220519234039561.png" alt=""></p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220519234039671.png" alt=""></p><p>填写完整XMPP JID<br><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220519234039753.png" alt=""></p><h3 id="4-Adium登录"><a href="#4-Adium登录" class="headerlink" title="4.Adium登录"></a>4.Adium登录</h3><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220519234041319.png" alt=""></p><h3 id="5-Spark登录"><a href="#5-Spark登录" class="headerlink" title="5.Spark登录"></a>5.Spark登录</h3><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220519234041849.png" alt=""></p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220519234043172.png" alt=""></p><p>三款客户端都可以添加好友等功能,自己研究吧</p>]]></content>
      
      
      <categories>
          
          <category> XMPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Object-C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(六)即时通讯之mac上搭建openfire服务器</title>
      <link href="/2016/08/20/XMPP/(%E5%85%AD)%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E4%B9%8Bmac%E4%B8%8A%E6%90%AD%E5%BB%BAopenfire%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2016/08/20/XMPP/(%E5%85%AD)%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E4%B9%8Bmac%E4%B8%8A%E6%90%AD%E5%BB%BAopenfire%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p><strong>搭建openfire服务器前先搭建数据库:</strong><a href="http://www.jianshu.com/p/368708e9b8bb">即时通讯之mac上安装MySQL</a></p><h2 id="一、下载并安装openfire"><a href="#一、下载并安装openfire" class="headerlink" title="一、下载并安装openfire"></a>一、下载并安装openfire</h2><p>1.到<a href="http://www.igniterealtime.org/downloads/index.jsp下载最新openfire">http://www.igniterealtime.org/downloads/index.jsp下载最新openfire</a> for mac版</p><p>比如：Openfire 3.8.1，下载后的文件：openfire_3_8_1.dmg</p><p>2.点击安装，并执行默认操作</p><p><img src="http://upload-images.jianshu.io/upload_images/2202576-18bcfbef500673d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>3.启动openfire服务</p><p>在系统偏好设置的其他里，点击openfire偏好</p><p><img src="http://upload-images.jianshu.io/upload_images/2202576-7e036ebfb55cfab6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>启动后，点击Open Admin Console按钮，自动在浏览器中打开本地web配置页面<a href="http://localhost:9090/setup/index.jsp">http://localhost:9090/setup/index.jsp</a></p><h2 id="二、配置openfire服务器"><a href="#二、配置openfire服务器" class="headerlink" title="二、配置openfire服务器"></a>二、配置openfire服务器</h2><h4 id="1-设置语言，选中文"><a href="#1-设置语言，选中文" class="headerlink" title="1.设置语言，选中文"></a>1.设置语言，选中文</h4><p><img src="http://upload-images.jianshu.io/upload_images/2202576-d0f75ace437ab989.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h4 id="2-主机设置"><a href="#2-主机设置" class="headerlink" title="2.主机设置"></a>2.主机设置</h4><p>设置主机的访问ip地址</p><p><img src="http://upload-images.jianshu.io/upload_images/2202576-84017a18116056e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>注意：域不能是机器名，否则会如下错误：</p><p>HTTP ERROR: 500 INTERNAL_SERVER_ERROR</p><p>本地的域，要设置为127.0.0.1</p><h4 id="3-数据库设置"><a href="#3-数据库设置" class="headerlink" title="3.数据库设置"></a>3.数据库设置</h4><p>如果要设置外部数据库（推荐，比如：MySQL），选择标准数据库连接</p><p><img src="http://upload-images.jianshu.io/upload_images/2202576-2d7532873006d264.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>账号为root,密码为安装mysql时的初始密码,这里为123</p><h4 id="4-设置数据库连接"><a href="#4-设置数据库连接" class="headerlink" title="4.设置数据库连接"></a>4.设置数据库连接</h4><p><img src="http://upload-images.jianshu.io/upload_images/2202576-cedbbab8553c6f3e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>（1）数据库驱动选择：MySQL，前提是已安装MySQL（具体的安装方法可以参考上一篇：mac上安装MySQL）</p><p>（2）JDBC驱动，默认不变</p><pre><code>com.mysql.jdbc.Driver</code></pre><p>（3）数据库URL：</p><p>形式如下：</p><pre><code>jdbc:mysql://你的主机名:端口号/数据库名称</code></pre><p>这里设置为</p><pre><code>jdbc:mysql://localhost:3306/openfire</code></pre><p>其中主机名[host-name]改为localhost，</p><p>其中数据库名称[database-name]改为openfire</p><p>解决数据库字符编码问题，可以在后面加</p><pre><code>?useUnicode=true&amp;characterEncoding=UTF-8&amp;characterSetResults=UTF-8</code></pre><p>最终的url形式是</p><pre><code>jdbc:mysql://localhost:3306/openfire?useUnicode=true&amp;characterEncoding=UTF-8&amp;characterSetResults=UTF-8</code></pre><p>注意：前提是已存在一个名为openfire的数据库，否则会报如下错误，连接配置不成功</p><p>The Openfire database schema does not appear to be installed. Follow the installation guide to fix this error. </p><p>前期的MySQL数据库准备工作如下：</p><p><1>设置/usr/local/openfire文件夹的访问权限为可读写</p><p>方法1：在finder中前往文件夹/usr/local/，右键openfire文件夹，显示简介</p><p>点击如图右下角中的锁图标解锁，并设置权限为：可以读写</p><p><img src="http://upload-images.jianshu.io/upload_images/2202576-1922c6ababe84d19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>方法2：打开终端，输入如下命令</p><pre><code>sudo chmod 777 /usr/local/openfire</code></pre><p>其中777表示授权可读写权限，000表示无访问权限</p><p><2>在终端中，登陆MySQL</p><pre><code>mysql -u root -p</code></pre><p>然后输入数据库的root密码</p><p><3>创建数据库openfire</p><pre><code>create database openfire;</code></pre><p><4>导入openfire资源文件夹 resources/database下的数据表</p><pre><code>use openfire;source /usr/local/openfire/resources/database/openfire_mysql.sql</code></pre><p> 在终端出现一排导入过程</p><p><img src="http://upload-images.jianshu.io/upload_images/2202576-124a1f4158cf4b81.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p> <5>刷新权限</p><pre><code>flush privileges;</code></pre><p><6>退出MySQL</p><pre><code>exit</code></pre><p>（4）用户名和密码</p><p>这里的用户名密码，是访问MySQL数据库时使用的帐号：root，和安装MySQL设置的root密码</p><h4 id="5-特性设置"><a href="#5-特性设置" class="headerlink" title="5.特性设置"></a>5.特性设置</h4><p>如果不打算使用LDAP，则保持默认设置</p><p><img src="http://upload-images.jianshu.io/upload_images/2202576-4b7f0e45db76dcd0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h4 id="6-设置openfire服务器管理员的帐号和密码"><a href="#6-设置openfire服务器管理员的帐号和密码" class="headerlink" title="6.设置openfire服务器管理员的帐号和密码"></a>6.设置openfire服务器管理员的帐号和密码</h4><p><img src="http://upload-images.jianshu.io/upload_images/2202576-db22cba9cac65ad3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>可以随便填写一个管理员邮箱，输入要设置的密码</p><p>完成注册</p><p><img src="http://upload-images.jianshu.io/upload_images/2202576-1fc76d62ae7aadef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h4 id="7-登陆管理控制台"><a href="#7-登陆管理控制台" class="headerlink" title="7.登陆管理控制台"></a>7.登陆管理控制台</h4><p>默认的管理员帐号是“admin”，默认管理员密码“admin”，如果上面设置了新密码，则管理员密码是新密码</p><p><img src="http://upload-images.jianshu.io/upload_images/2202576-b4e25be74c09a9b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>如果想去掉默认的admin帐号，并自定义，需要如下操作</p><p>（1）在终端中，登陆具体的数据库（openfire）</p><pre><code>mysql -u root -p openfire</code></pre><p>然后输入数据库的root密码</p><p>（2）删除表“ofUser”中的admin帐户</p><pre><code>delete from ofUser where username=&#39;admin&#39;;</code></pre><p>（3）创建自定义管理员（用户名：xiaodao，密码：123）</p><pre><code>INSERT INTO ofUser (username, plainPassword, encryptedPassword, name, email, creationDate, modificationDate) VALUES (&#39;xiaodao&#39;,&#39;123&#39;,&#39;123&#39;,&#39;Administrator&#39;,&#39;xiaodao@sunyard.com&#39;,&#39;0&#39;,&#39;0&#39;);</code></pre><p>  注意：如果重设了用户名，必须重启openfire服务器</p><p><img src="http://upload-images.jianshu.io/upload_images/2202576-7675fb1f77a92c9b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h4 id="8-后台控制界面"><a href="#8-后台控制界面" class="headerlink" title="8.后台控制界面"></a>8.后台控制界面</h4><p><img src="http://upload-images.jianshu.io/upload_images/2202576-f13faa8f6c89157c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="三、卸载openfire"><a href="#三、卸载openfire" class="headerlink" title="三、卸载openfire"></a>三、卸载openfire</h2><h4 id="1-停止服务"><a href="#1-停止服务" class="headerlink" title="1.停止服务"></a>1.停止服务</h4><p>在系统偏好设置的其他里，打开openfire偏好设置</p><p>点击Stop Openfire按钮，停止服务</p><p><img src="http://upload-images.jianshu.io/upload_images/2202576-321828f4fc7138b4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h4 id="2-删除文件"><a href="#2-删除文件" class="headerlink" title="2.删除文件"></a>2.删除文件</h4><p>打开终端，输入以下命令</p><pre><code>sudo rm -rf /Library/PreferencePanes/Openfire.prefPanesudo rm -rf /usr/local/openfiresudo rm -rf /Library/LaunchDaemons/org.jivesoftware.openfire.plist</code></pre><p>其中第一条命令之后，需要输入本机管理员密码</p><p>==</p><p>==</p><p>==</p><p><strong>有时候会碰到OpenFire打不开的情况</strong><br><strong>很重要,遇到打不开按如下操作即可</strong></p><p>解决方法：</p><p>打开终端，按顺序输入以下命令：(注意细小的标点符号，建议逐一复制命令到终端运行)</p><pre><code>sudo chmod -R 777 /usr/local/openfire/binsudo sucd /usr/local/openfire/binexport JAVA_HOME=`/usr/libexec/java_home`echo $JAVA_HOME /Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/Homecd /usr/local/openfire/bin./openfire.sh</code></pre>]]></content>
      
      
      <categories>
          
          <category> XMPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Object-C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(五)即时通讯之mac上安装MySQL</title>
      <link href="/2016/08/20/XMPP/(%E4%BA%94)%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E4%B9%8Bmac%E4%B8%8A%E5%AE%89%E8%A3%85MySQL/"/>
      <url>/2016/08/20/XMPP/(%E4%BA%94)%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E4%B9%8Bmac%E4%B8%8A%E5%AE%89%E8%A3%85MySQL/</url>
      
        <content type="html"><![CDATA[<h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><p>到MySQL官网上<a href="http://dev.mysql.com/downloads/mysql/，下载mysql可安装dmg版本">http://dev.mysql.com/downloads/mysql/，下载mysql可安装dmg版本</a></p><p>比如：Mac OS X ver. 10.7 (x86, 64-bit), DMG Archive</p><p>下载完的文件为：mysql-5.6.10-osx10.7-x86_64.dmg</p><p>1.点击安装</p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220519234003781.png" alt=""></p><p>2.点击安装</p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220519234003824.png" alt=""></p><p>安装好后，再系统偏好设置的其他里，会出现如下图标：</p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220519234003863.png" alt=""></p><p>3.点击此图标，跳出对话框</p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220519234003904.png" alt=""></p><p>点击Start MySQL Server按钮，启动mysql</p><p>下面为MySQL的基本操作,用到再看</p><h2 id="二、打开终端，定义mysql别名"><a href="#二、打开终端，定义mysql别名" class="headerlink" title="二、打开终端，定义mysql别名"></a>二、打开终端，定义mysql别名</h2><p>输入alias命令</p><pre><code>alias mysql=/usr/local/mysql/bin/mysql</code></pre><p>回车，再输入</p><pre><code>alias mysqladmin=/usr/local/mysql/bin/mysqladmin</code></pre><h2 id="三、设置mysql-root帐号的密码"><a href="#三、设置mysql-root帐号的密码" class="headerlink" title="三、设置mysql root帐号的密码"></a>三、设置mysql root帐号的密码</h2><pre><code>mysqladmin -u root password 初始密码</code></pre><p>2.如果设置完密码后，需要修改，执行命令</p><pre><code>mysqladmin -u root -p  password 最新密码</code></pre><p>接着会提示输入密码，此时输入旧密码，回车</p><h2 id="四、连接数据库"><a href="#四、连接数据库" class="headerlink" title="四、连接数据库"></a>四、连接数据库</h2><pre><code>mysql -u root -p</code></pre><p>然后提示输入密码，输入三中设置的初始密码</p><p>2.如果登陆远程主机上的mysql数据库</p><pre><code>mysql -h 主机地址 -u 用户名 -p 用户密码</code></pre><p>安装完以后尝试一下终端敲mysql是否有反应,没有反应就打开<a href="http://jingyan.baidu.com/article/a378c960b8f828b328283033.html网站">http://jingyan.baidu.com/article/a378c960b8f828b328283033.html网站</a></p><h2 id="五、执行常用的mysql数据库操作"><a href="#五、执行常用的mysql数据库操作" class="headerlink" title="五、执行常用的mysql数据库操作"></a>五、执行常用的mysql数据库操作</h2><p>注意：以下操作都发现在，连接数据库之后，进入mysql环境，之后执行的命令都必须带有分号“;”</p><p>首先，以root权限连接mysql</p><pre><code>mysql -u root -p</code></pre><p>然后，输入root的密码</p><p>1、增加新用户</p><p>格式如下：</p><pre><code>grant 操作权限 on 数据库.* to 用户名@登陆主机地址 identified by &#39;密码&#39;;</code></pre><p>意思是：授予，某主机上的某用户（附带该用户的登陆密码）在某数据库上，执行某些操作的权限</p><p>(1)比如：任意主机上(“%”)，用户（用户名：test1，密码：adc）在所有数据库上，执行任意操作的权限（很危险）</p><pre><code>grant all privileges on *.* to test1@&quot;%&quot; identified by &quot;abc&quot;;</code></pre><p>其中all privileges表示查询，插入，修改，删除的权限：select,insert,update,delete</p><p>以上命令等价于：</p><pre><code>grant select,insert,update,delete on *.* to test1@&quot;%&quot; identified by &quot;abc&quot;;</code></pre><p>然后刷新权限</p><pre><code>flush privileges;</code></pre><p> (2)比如：授权本地主机上的用户操作数据库的权限</p><p>创建数据库(比如：openfire)</p><pre><code>create database openfire;</code></pre><p>授予本地主机用户（用户名：test2，密码：123）访问数据库(数据库名称：openfire)的操作权限</p><pre><code>grant all privileges on openfire.* to test2@localhost identified by &quot;123&quot;;flush privileges;</code></pre><p> 之后，就可以用新的用户，访问openfire数据库了</p><p>2.更新指定帐户的密码（用户名：test1，新密码：1234）</p><pre><code>update mysql.user set password=password(&#39;1234&#39;) where User=&quot;test1&quot; and Host=&quot;localhost&quot;;</code></pre><p> 3.删除用户</p><p>先使用mysql数据库</p><pre><code>use mysql;</code></pre><p>删除mysql数据库中user表中的某个本地用户（test7）</p><pre><code>delete from user where User=&quot;test7&quot; and Host=&quot;localhost&quot;;</code></pre><p> 4.显示命令</p><p>（1）显示所有数据库列表</p><pre><code>show databases;</code></pre><p>初始化只有两个数据库，mysql和test</p><p>注意：MYSQL的系统信息都存储在mysql库中，比如：修改密码和新增用户，实际上就是用这个库进行操作</p><p>（2）打开某个数据库(比如数据库：openfire)</p><pre><code>use openfire;</code></pre><p>（3）显示本库中的所有表</p><pre><code>show tables;</code></pre><p>（4）显示某表（table1）的结构</p><pre><code>describe table1;</code></pre><p>（5）建库</p><pre><code>create database 库名;</code></pre><p>（6）建表</p><pre><code>use 库名；create table 表名 (字段设定列表);</code></pre><p>（7）删库</p><pre><code>drop database 库名;</code></pre><p>（8）删表</p><pre><code>drop table 表名;</code></pre><p>（9）将表中的记录清空</p><pre><code>delete from 表名;</code></pre><p>（10）显示表中的记录</p><pre><code>select * from 表名;</code></pre><h2 id="六、退出mysql"><a href="#六、退出mysql" class="headerlink" title="六、退出mysql"></a>六、退出mysql</h2><pre><code>exit</code></pre><h2 id="七、启动和停止MySQL"><a href="#七、启动和停止MySQL" class="headerlink" title="七、启动和停止MySQL"></a>七、启动和停止MySQL</h2><p>启动</p><pre><code>sudo /Library/StartupItems/MySQLCOM/MySQLCOM start</code></pre><p>停止</p><pre><code>sudo /Library/StartupItems/MySQLCOM/MySQLCOM stop</code></pre><p>输入root密码</p>]]></content>
      
      
      <categories>
          
          <category> XMPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Object-C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(四)即时通讯系列之XMPP简介</title>
      <link href="/2016/08/20/XMPP/(%E5%9B%9B)%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E7%B3%BB%E5%88%97%E4%B9%8BXMPP%E7%AE%80%E4%BB%8B/"/>
      <url>/2016/08/20/XMPP/(%E5%9B%9B)%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E7%B3%BB%E5%88%97%E4%B9%8BXMPP%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<p>前面关于即时通讯基础Socket,大家学习使用XMPP之前可以先看看<br><a href="http://www.jianshu.com/p/94b138362173">即时通讯系列之Socket简介</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>前段时间使用XMPPFramework完成了一个仿微信的小项目,故特此来记录下即时通讯开发过程中的知识点以及存在一些问题,欢迎大家前来指教.<br>关于仿微信的demo在后面的篇章中会有github地址,请关注.</p><p>本篇是关于XMPP的相关介绍</p></blockquote><h3 id="1-为什么选择XMPP协议"><a href="#1-为什么选择XMPP协议" class="headerlink" title="1.为什么选择XMPP协议"></a>1.为什么选择XMPP协议</h3><p>在IETF 中，把IM协议划分为四种协议，即即时信息和出席协议(Instant Messaging and Presence Protocol, IMPP)、出席和即时信息协议(Presence and Instant Messaging Protocol, PRIM)、针对即时信息和出席扩展的会话发起协议(Session Initiation Protocol for Instant Messaging and Presence Leveraging Extensions, SIMPLE)，以及可扩展的消息出席协议(XMPP)</p><p>XMPP协议的前身是Jabber，我们采取XMPP协议主来实现IM主要是考虑XMPP协议是以XML为基础的，它继承了在XML环境中灵活的发展性。这表明XMPP是可扩展的，所以XMPP信息不仅可以是简单的文本，而且可以携带复杂的数据和各种格式的文件</p><ul><li><p>1.XMPP 协议是公开的，由JSF开源社区组织开发的。XMPP 协议并不属于任何的机构和个人，而是属于整个社区，这一点从根本上保证了其开放性。</p></li><li><p>2.XMPP 协议具有良好的扩展性。在XMPP 中，即时消息和到场信息都是基于XML 的结构化信息，这些信息以XML 节(XML Stanza)的形式在通信实体间交换。XMPP 发挥了XML 结构化数据的通用传输层的作用，它将出席和上下文敏感信息嵌入到XML 结构化数据中，从而使数据以极高的效率传送给最合适的资源。基于XML 建立起来的应用具有良好的语义完整性和扩展性。</p></li><li><p>3.分布式的网络架构。XMPP 协议都是基于Client/Server 架构，但是XMPP协议本身并没有这样的限制。网络的架构和电子邮件十分相似，但没有结合任何特定的网络架构，适用范围非常广泛。</p></li><li><p>4.XMPP 具有很好的弹性。XMPP 除了可用在即时通信的应用程序，还能用在网络管理、内容供稿、协同工具、档案共享、游戏、远端系统监控等。</p></li><li><p>5.安全性。XMPP在Client-to-Server通信，和Server-to-Server通信中都使用TLS (Transport Layer Security)协议作为通信通道的加密方法，保证通信的安全。任何XMPP服务器可以独立于公众XMPP网络（例如在企业内部网络中），而使用SASL及TLS等技术更加增强了通信的安全性。如下图所示：</p></li></ul><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220519233949921.png" alt=".png"></p><h3 id="2-XMPP的基本网络结构"><a href="#2-XMPP的基本网络结构" class="headerlink" title="2.XMPP的基本网络结构"></a>2.XMPP的基本网络结构</h3><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220519233949979.png" alt="xmpp的基本网络结构.png"></p><p>XMPP是一个典型的C/S架构，而不是像大多数即时通讯软件一样，使用P2P客户端到客户端的架构，也就是说在大多数情况下，当两个客户端进行通讯时，他们的消息都是通过服务器传递的(也有例外，例如在两个客户端传输文件时)．采用这种架构，主要是为了简化客户端，将大多数工作放在服务器端进行，这样，客户端的工作就比较简单，而且，当增加功能时，多数是在服务器端进行．XMPP服务的框架结构如下图所示．XMPP中定义了三个角色，XMPP客户端，XMPP服务器、网关．通信能够在这三者的任意两个之间双向发生．服务器同时承担了客户端信息记录、连接管理和信息的路由功能．网关承担着与异构即时通信系统的互联互通，异构系统可以包括SMS(短信)、MSN、ICQ等．基本的网络形式是单客户端通过TCP／IP连接到单服务器，然后在之上传输XML，工作原理是：</p><p>(1)节点连接到服务器；<br>(2)服务器利用本地目录系统中的证书对其认证；<br>(3)节点指定目标地址，让服务器告知目标状态；<br>(4)服务器查找、连接并进行相互认证；<br>(5)节点之间进行交互．</p><h3 id="3-XMPP客户端"><a href="#3-XMPP客户端" class="headerlink" title="3.XMPP客户端"></a>3.XMPP客户端</h3><p>XMPP 系统的一个设计标准是必须支持简单的客户端。事实上，XMPP 系统架构对客户端只有很少的几个限制。一个XMPP 客户端必须支持的功能有：</p><ol><li><p>通过 TCP 套接字与XMPP 服务器进行通信；</p></li><li><p>解析组织好的 XML 信息包；</p></li><li><p>理解消息数据类型。</p></li></ol><p>XMPP 将复杂性从客户端转移到服务器端。这使得客户端编写变得非常容易，更新系统功能也同样变得容易。XMPP 客户端与服务端通过XML 在TCP 套接字的5222 端口进行通信，而不需要客户端之间直接进行通信。</p><p>基本的XMPP 客户端必须实现以下标准协议（XEP-0211）：</p><p>RFC3920 核心协议Core</p><p>RFC3921 即时消息和出席协议Instant Messaging and Presence</p><p>XEP-0030 服务发现Service Discovery</p><p>XEP-0115 实体能力Entity Capabilities</p><h3 id="4-XMPP服务器"><a href="#4-XMPP服务器" class="headerlink" title="4.XMPP服务器"></a>4.XMPP服务器</h3><p>XMPP 服务器遵循两个主要法则：</p><p>l  监听客户端连接，并直接与客户端应用程序通信；</p><p>l  与其他 XMPP 服务器通信；</p><p>XMPP开源服务器一般被设计成模块化，由各个不同的代码包构成，这些代码包分别处理Session管理、用户和服务器之间的通信、服务器之间的通信、DNS（Domain Name System）转换、存储用户的个人信息和朋友名单、保留用户在下线时收到的信息、用户注册、用户的身份和权限认证、根据用户的要求过滤信息和系统记录等。另外，服务器可以通过附加服务来进行扩展，如完整的安全策略，允许服务器组件的连接或客户端选择，通向其他消息系统的网关。</p><p>基本的XMPP 服务器必须实现以下标准协议</p><p>RFC3920 核心协议Core</p><p>RFC3921 即时消息和出席协议Instant Messaging and Presence</p><p>XEP-0030 服务发现Service Discovery</p><h3 id="5-XMPP网关"><a href="#5-XMPP网关" class="headerlink" title="5.XMPP网关"></a>5.XMPP网关</h3><p>XMPP 突出的特点是可以和其他即时通信系统交换信息和用户在线状况。由于协议不同，XMPP 和其他系统交换信息必须通过协议的转换来实现，目前几种主流即时通信协议都没有公开，所以XMPP 服务器本身并没有实现和其他协议的转换，但它的架构允许转换的实现。实现这个特殊功能的服务端在XMPP 架构里叫做网关(gateway)。目前，XMPP 实现了和AIM、ICQ、IRC、MSN Massager、RSS0.9 和Yahoo Massager 的协议转换。由于网关的存在，XMPP 架构事实上兼容所有其他即时通信网络，这无疑大大提高了XMPP 的灵活性和可扩展性。</p><h3 id="6-服务器端介绍"><a href="#6-服务器端介绍" class="headerlink" title="6.服务器端介绍"></a>6.服务器端介绍</h3><h5 id="6-1-什么是Openfire"><a href="#6-1-什么是Openfire" class="headerlink" title="6.1 什么是Openfire"></a>6.1 什么是Openfire</h5><p>Openfire 采用Java开发，开源的实时协作（RTC）服务器基于XMPP（Jabber）协议。您可以使用它轻易的构建高效率的即时通信服务器.</p><p>Openfire安装和使用都非常简单，并利用Web进行管理。单台服务器可支持上万并发用户。</p><p>由于是采用开放的XMPP协议，您可以使用各种支持XMPP协议的IM客户端软件登陆服务.</p><h5 id="6-2为什么使用Openfire"><a href="#6-2为什么使用Openfire" class="headerlink" title="6.2为什么使用Openfire"></a>6.2为什么使用Openfire</h5><p>A、Openfire为Java开源项目</p><p>B、 采用开放的XMPP协议</p><p>C、 有多种针对不通系统的版本</p><p>D、使用Socket通讯</p><p>E、 单台服务器可支持上万并发用户,搭建分布式云服务器可轻松提供大量并发用户。</p><p>F、 Socket长连接</p><p>G、服务器稳定</p><p>H、提供接口，可自己开发插件</p><h3 id="7-XMPP协议的组成"><a href="#7-XMPP协议的组成" class="headerlink" title="7.XMPP协议的组成"></a>7.XMPP协议的组成</h3><p>RFC 3920 XMPP：核心。定义了XMPP 协议框架下应用的网络架构，引入了XML Stream（XML 流）与XML Stanza（XML 节），并规定XMPP 协议在通信过程中使用的XML 标签。使用XML 标签从根本上说是协议开放性与扩展性的需要。此外，在通信的安全方面，把TLS 安全传输机制与SASL 认证机制引入到内核，与XMPP 进行无缝的连接，为协议的安全性、可靠性奠定了基础。Core 文档还规定了错误的定义及处理、XML 的使用规范、JID（Jabber Identifier，Jabber 标识符）的定义、命名规范等等。所以这是所有基于XMPP 协议的应用都必需支持的文档。</p><p>RFC 3921：用户成功登陆到服务器之后，发布更新自己的在线好友管理、发送即时聊天消息等业务。所有的这些业务都是通过三种基本的XML 节来完成的：IQ Stanza（IQ 节）, Presence Stanza（Presence 节）, Message Stanza（Message 节）。RFC3921 还对阻塞策略进行了定义，定义是多种阻塞方式。可以说，RFC3921 是RFC3920 的充分补充。两个文档结合起来，就形成了一个基本的即时通信协议平台，在这个平台上可以开发出各种各样的应用。</p><p>XEP-0030 服务搜索。一个强大的用来测定XMPP 网络中的其它实体所支持特性的协议。</p><p>XEP-0115 实体性能。XEP-0030 的一个通过即时出席的定制，可以实时改变交变广告功能。</p><p>XEP-0045 多人聊天。一组定义参与和管理多用户聊天室的协议，类似于Internet 的Relay Chat，具有很高的安全性。</p><p>XEP-0096 文件传输。定义了从一个XMPP 实体到另一个的文件传输。</p><p>XEP-0124 HTTP 绑定。将XMPP 绑定到HTTP 而不是TCP，主要用于不能够持久的维持与服务器TCP 连接的设备。</p><p>XEP-0166 Jingle。规定了多媒体通信协商的整体架构。</p><p>XEP-0167 Jingle Audio Content Description Format。定义了从一个XMPP 实体到另一个的语音传输过程。</p><p>XEP-0176 Jingle ICE（Interactive Connectivity Establishment）Transport。ICE传输机制，文件解决了如何让防火墙或是NAT（Network Address Translation）保护下的实体建立连接的问题。</p><p>XEP-0177 Jingle Raw UDP Transport。纯UDP 传输机制，文件讲述了如何在没有防火墙且在同一网络下建立连接的。</p><p>XEP-0180 Jingle Video Content Description Format。定义了从一个XMPP 实体到另一个的视频传输过程。</p><p>XEP-0181 Jingle DTMF（Dual Tone Multi-Frequency）。</p><p>XEP-0183 Jingle Telepathy Transport Method。</p><h3 id="8-XMPP地址格式"><a href="#8-XMPP地址格式" class="headerlink" title="8.XMPP地址格式"></a>8.XMPP地址格式</h3><p>一个实体在XMPP网络结构中被称为一个接点，它有唯一的标示符jabber identifier(JID)，即实体地址，用来表示一个Jabber用户，但是也可以表示其他内容，例如一个聊天室．一个有效的JID包括一系列元素：(1)域名(domain identifier)；(2)节点(node identifier)；(3)源(resource identifier)．它的格式是node@domain/resource，node@domain ，类似电子邮件的地址格式．domain用来表示接点不同的设备或位置，这个是可选的，例如a在Server1上注册了一个用户，用户名为doom，那么a的JID就是doom@serverl，在发送消息时，指明doom@serverl就可以了，resource可以不用指定，但a在登录到这个Server时，fl的JID可能是doom@serverl、exodus(如果a用Exodus软件登录)，也可能是doom@serverl/psi(如果a用psi软件登录)．资源只用来识别属于用户的位置或设备等，一个用户可以同时以多种资源与同一个XMPP服务器连接。</p><p>XMPP消息格式<br>XMPP通信原语有3种：message、presence和iq。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">message</span><br><span class="line"></span><br><span class="line">message是一种基本推送消息方法，它不要求响应。主要用于IM、groupChat、alert和notification之类的应用中。</span><br><span class="line"></span><br><span class="line">主要属性如下：</span><br><span class="line"></span><br><span class="line">type属性，它主要有5种类型：</span><br><span class="line"></span><br><span class="line">normal：类似于email，主要特点是不要求响应；</span><br><span class="line"></span><br><span class="line">chat：类似于qq里的好友即时聊天，主要特点是实时通讯；</span><br><span class="line"></span><br><span class="line">groupchat：类似于聊天室里的群聊；</span><br><span class="line"></span><br><span class="line">headline：用于发送alert和notification；</span><br><span class="line"></span><br><span class="line">error：如果发送message出错，发现错误的实体会用这个类别来通知发送者出错了；</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">to属性：标识消息的接收方。</span><br><span class="line"></span><br><span class="line">from属性：指发送方的名字或标示。为防止地址外泄，这个地址通常由发送者的server填写，而不是发送者。</span><br><span class="line"></span><br><span class="line">载荷（payload）：例如body，subject,thread</span><br><span class="line"></span><br><span class="line">例子：</span><br><span class="line"></span><br><span class="line">&lt;message </span><br><span class="line"></span><br><span class="line">  to=&quot;lily@jabber.org/contact&quot; </span><br><span class="line"></span><br><span class="line">  type=&quot;chat&quot; &gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt; 你好，在忙吗&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/message&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">presence</span><br><span class="line"></span><br><span class="line">presence用来表明用户的状态，如：online、away、dnd(请勿打扰)等。当改变自己的状态时，就会在stream的上下文中插入一个Presence元素，来表明自身的状态。要想接受presence消息，必须经过一个叫做presence subscription的授权过程。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">属性：</span><br><span class="line"></span><br><span class="line">type属性，非必须。有以下类别</span><br><span class="line"></span><br><span class="line">subscribe：订阅其他用户的状态</span><br><span class="line"></span><br><span class="line">probe：请求获取其他用户的状态</span><br><span class="line"></span><br><span class="line">unavailable：不可用，离线（offline）状态</span><br><span class="line"></span><br><span class="line">to属性：标识消息的接收方。</span><br><span class="line"></span><br><span class="line">from属性：指发送方的名字或标示。</span><br><span class="line"></span><br><span class="line">载荷（payload）：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">show：</span><br><span class="line"></span><br><span class="line">chat：聊天中</span><br><span class="line"></span><br><span class="line">away：暂时离开</span><br><span class="line"></span><br><span class="line">xa：eXtend Away，长时间离开</span><br><span class="line"></span><br><span class="line">dnd：勿打扰</span><br><span class="line"></span><br><span class="line">status：格式自由，可阅读的文本。也叫做rich presence或者extended presence，常用来表示用户当前心情，活动，听的歌曲，看的视频，所在的聊天室，访问的网页，玩的游戏等等。</span><br><span class="line"></span><br><span class="line">priority：范围-128~127。高优先级的resource能接受发送到bare JID的消息，低优先级的resource不能。优先级为负数的resource不能收到发送到bare JID的消息。</span><br><span class="line"></span><br><span class="line">例子：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;presence from=&quot;alice@wonderland.lit/pda&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;show&gt;xa&lt;/show&gt;</span><br><span class="line"></span><br><span class="line">  &lt;status&gt;down the rabbit hole!&lt;/status&gt;</span><br><span class="line"></span><br><span class="line">&lt;/presence&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">iq （Info / Query）</span><br><span class="line"></span><br><span class="line">一种请求／响应机制，从一个实体从发送请求，另外一个实体接受请求，并进行响应。例如，client在stream的上下文中插入一个元素，向Server请求得到自己的好友列表，Server返回一个，里面是请求的结果。</span><br><span class="line"></span><br><span class="line">主要的属性是type。包括:</span><br><span class="line"></span><br><span class="line">Get :获取当前域值。类似于http get方法。</span><br><span class="line"></span><br><span class="line">Set :设置或替换get查询的值。类似于http put方法。</span><br><span class="line"></span><br><span class="line">Result :说明成功的响应了先前的查询。类似于http状态码200。</span><br><span class="line"></span><br><span class="line">Error: 查询和响应中出现的错误。</span><br><span class="line"></span><br><span class="line">例子：</span><br><span class="line"></span><br><span class="line">&lt;iq from=&quot;alice@wonderland.lit/pda&quot; </span><br><span class="line"></span><br><span class="line">    id=&quot;rr82a1z7&quot;</span><br><span class="line"></span><br><span class="line">    to=&quot;alice@wonderland.lit&quot; </span><br><span class="line"></span><br><span class="line">    type=&quot;get&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;query xmlns=&quot;jabber:iq:roster&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/iq&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>XMPP 3920 最靠谱的中文翻译文档</p><p><a href="http://wenku.baidu.com/view/563b1ebff121dd36a32d8225.html">http://wenku.baidu.com/view/563b1ebff121dd36a32d8225.html</a></p><p>XMPP-RFC3921中文</p><p><a href="http://wenku.baidu.com/view/37ac3efafab069dc502201c7.html">http://wenku.baidu.com/view/37ac3efafab069dc502201c7.html</a></p>]]></content>
      
      
      <categories>
          
          <category> XMPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Object-C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(三)即时通讯系列之UDPSocket</title>
      <link href="/2016/08/20/XMPP/(%E4%B8%89)%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E7%B3%BB%E5%88%97%E4%B9%8BUDPSocket/"/>
      <url>/2016/08/20/XMPP/(%E4%B8%89)%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E7%B3%BB%E5%88%97%E4%B9%8BUDPSocket/</url>
      
        <content type="html"><![CDATA[<p><a href="http://www.jianshu.com/p/94b138362173">即时通讯系列之Socket简介</a></p><blockquote><p>转自他人</p></blockquote><h3 id="1-UDP-Socket编程"><a href="#1-UDP-Socket编程" class="headerlink" title="1. UDP Socket编程"></a>1. UDP Socket编程</h3><p>先讲一讲UDP<br>编程，因为比TCP<br>要简单多了。首先，我们需要明白UDP<br>是用户数据报协议，英文名为<strong><em>User Datagram Protocol</em></strong>，它是面向无连接的。<br><strong>注意：</strong>Socket<br>通信一定有要服务端和客户端。<br><strong>1.1 UDP Socket客户端</strong><br>客户端的工作流程：首先调用socket<br>函数创建一个Socket<br>，然后指定服务端的IP<br>地址和端口号，就可以调用sendto<br>将字符串传送给服务器端，并可以调用recvfrom<br>接收服务器端返回的字符串，最后关闭该socket。<br>第一步：创建socket并配置socket，如服务端ip地址和端口号<br>第二步：调用sendto发送消息到服务器端<br>第三步：调用recvfrom接收来自服务器端的消息<br>第四步：调用close关闭socket</p><p><strong>1.1.1 客户端的代码实现：</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">- (void)udpClient &#123;</span><br><span class="line">  int clientSocketId;</span><br><span class="line">  ssize_t len;</span><br><span class="line">  socklen_t addrlen;</span><br><span class="line">  struct sockaddr_in client_sockaddr;</span><br><span class="line">  char buffer[256] = &quot;Hello, server, how are you?&quot;;</span><br><span class="line">  </span><br><span class="line">  // 第一步：创建Socket</span><br><span class="line">  clientSocketId = socket(AF_INET, SOCK_DGRAM, 0);</span><br><span class="line">  if(clientSocketId &lt; 0) &#123;</span><br><span class="line">    NSLog(@&quot;creat client socket fail\n&quot;);</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  addrlen = sizeof(struct sockaddr_in);</span><br><span class="line">  bzero(&amp;client_sockaddr, addrlen);</span><br><span class="line">  client_sockaddr.sin_family = AF_INET;</span><br><span class="line">  client_sockaddr.sin_addr.s_addr = inet_addr(&quot;192.168.1.107&quot;);</span><br><span class="line">  client_sockaddr.sin_port = htons(1024);</span><br><span class="line">  </span><br><span class="line">  int count = 10;</span><br><span class="line">  do &#123;</span><br><span class="line">    bzero(buffer, sizeof(buffer));</span><br><span class="line">    sprintf(buffer, &quot;%s&quot;, &quot;Hello, server, how are you?&quot;);</span><br><span class="line">    </span><br><span class="line">    // 第二步：发送消息到服务端</span><br><span class="line">    // 注意:UDP是面向无连接的，因此不用调用connect()</span><br><span class="line">    // 将字符串传送给server端</span><br><span class="line">   len = sendto(clientSocketId, buffer, sizeof(buffer), 0, (struct sockaddr *)&amp;client_sockaddr, addrlen);</span><br><span class="line">    </span><br><span class="line">    if (len &gt; 0) &#123;</span><br><span class="line">      NSLog(@&quot;发送成功&quot;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      NSLog(@&quot;发送失败&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 第三步：接收来自服务端返回的消息</span><br><span class="line">    // 接收server端返回的字符串</span><br><span class="line">    bzero(buffer, sizeof(buffer));</span><br><span class="line">    len = recvfrom(clientSocketId, buffer, sizeof(buffer), 0, (struct sockaddr *)&amp;client_sockaddr, &amp;addrlen);</span><br><span class="line">    NSLog(@&quot;receive message from server: %s&quot;, buffer);</span><br><span class="line">    </span><br><span class="line">    count--;</span><br><span class="line">  &#125; while (count &gt;= 0);</span><br></pre></td></tr></table></figure><br>  // 第四步：关闭socket<br>  // 由于是面向无连接的，消息发出处就可以了，不用管它收不收得到，发完就可以关闭了<br>  close(clientSocketId);<br>}</p><p><strong>1.1.2 客户端的打印日志</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">2015-12-06 15:38:36.095 iOS-Socket-C-Version-Client[9709:4234848] 发送成功</span><br><span class="line">2015-12-06 15:38:36.286 iOS-Socket-C-Version-Client[9709:4234848] receive message from server: Hello, server, how are you?</span><br><span class="line">2015-12-06 15:38:36.286 iOS-Socket-C-Version-Client[9709:4234848] 发送成功</span><br><span class="line">2015-12-06 15:38:36.291 iOS-Socket-C-Version-Client[9709:4234848] receive message from server: Hello, server, how are you?</span><br><span class="line">2015-12-06 15:38:36.291 iOS-Socket-C-Version-Client[9709:4234848] 发送成功</span><br><span class="line">2015-12-06 15:38:36.296 iOS-Socket-C-Version-Client[9709:4234848] receive message from server: Hello, server, how are you?</span><br><span class="line">2015-12-06 15:38:36.296 iOS-Socket-C-Version-Client[9709:4234848] 发送成功</span><br><span class="line">2015-12-06 15:38:36.316 iOS-Socket-C-Version-Client[9709:4234848] receive message from server: Hello, server, how are you?</span><br><span class="line">2015-12-06 15:38:36.317 iOS-Socket-C-Version-Client[9709:4234848] 发送成功</span><br><span class="line">2015-12-06 15:38:36.324 iOS-Socket-C-Version-Client[9709:4234848] receive message from server: Hello, server, how are you?</span><br><span class="line">2015-12-06 15:38:36.324 iOS-Socket-C-Version-Client[9709:4234848] 发送成功</span><br><span class="line">2015-12-06 15:38:36.328 iOS-Socket-C-Version-Client[9709:4234848] receive message from server: Hello, server, how are you?</span><br><span class="line">2015-12-06 15:38:36.329 iOS-Socket-C-Version-Client[9709:4234848] 发送成功</span><br><span class="line">2015-12-06 15:38:36.339 iOS-Socket-C-Version-Client[9709:4234848] receive message from server: Hello, server, how are you?</span><br><span class="line">2015-12-06 15:38:36.339 iOS-Socket-C-Version-Client[9709:4234848] 发送成功</span><br><span class="line">2015-12-06 15:38:36.355 iOS-Socket-C-Version-Client[9709:4234848] receive message from server: Hello, server, how are you?</span><br><span class="line">2015-12-06 15:38:36.356 iOS-Socket-C-Version-Client[9709:4234848] 发送成功</span><br><span class="line">2015-12-06 15:38:36.366 iOS-Socket-C-Version-Client[9709:4234848] receive message from server: Hello, server, how are you?</span><br><span class="line">2015-12-06 15:38:36.366 iOS-Socket-C-Version-Client[9709:4234848] 发送成功</span><br><span class="line">2015-12-06 15:38:36.372 iOS-Socket-C-Version-Client[9709:4234848] receive message from server: Hello, server, how are you?</span><br><span class="line">2015-12-06 15:38:36.373 iOS-Socket-C-Version-Client[9709:4234848] 发送成功</span><br><span class="line">2015-12-06 15:38:36.392 iOS-Socket-C-Version-Client[9709:4234848] receive message from server: Hello, server, how are you?</span><br></pre></td></tr></table></figure></p><h3 id="1-2-UDP-Socket服务器端"><a href="#1-2-UDP-Socket服务器端" class="headerlink" title="1.2 UDP Socket服务器端"></a>1.2 UDP Socket服务器端</h3><p>服务器端的工作流程：首先调用socket<br>函数创建一个套接字，然后调用bind<br>函数将其与本机地址以及一个本地端口号绑定，接收到一个客户端时，服务器显示该客户端的IP地址，并将字串返回给客户端。<br>笔者这里分成了五步：<br>第一步：创建socket<br>并配置socket</p><p>第二步：调用bind<br>绑定服务器本机ip及端口号<br>第三步：调用recvfrom<br>接收来自客户端的消息<br>第四步：调用sendto<br>将接收到服务器端的信息返回给客户端<br>第四步：调用close<br>关闭socket</p><p><strong>1.2.1 服务器端代码实现</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">- (void)udpServer &#123;</span><br><span class="line">  int serverSockerId = -1;</span><br><span class="line">  ssize_t len = -1;</span><br><span class="line">  socklen_t addrlen;</span><br><span class="line">  char buff[1024];</span><br><span class="line">  struct sockaddr_in ser_addr;</span><br><span class="line">  </span><br><span class="line">  // 第一步：创建socket</span><br><span class="line">  // 注意，第二个参数是SOCK_DGRAM，因为udp是数据报格式的</span><br><span class="line">  serverSockerId = socket(AF_INET, SOCK_DGRAM, 0);</span><br><span class="line">  </span><br><span class="line">  if(serverSockerId &lt; 0) &#123;</span><br><span class="line">    NSLog(@&quot;Create server socket fail&quot;);</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  addrlen = sizeof(struct sockaddr_in);</span><br><span class="line">  bzero(&amp;ser_addr, addrlen);</span><br><span class="line">  </span><br><span class="line">  ser_addr.sin_family = AF_INET;</span><br><span class="line">  ser_addr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line">  ser_addr.sin_port = htons(1024);</span><br><span class="line">  </span><br><span class="line">  // 第二步：绑定端口号</span><br><span class="line">  if(bind(serverSockerId, (struct sockaddr *)&amp;ser_addr, addrlen) &lt; 0) &#123;</span><br><span class="line">    NSLog(@&quot;server connect socket fail&quot;);</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  do &#123;</span><br><span class="line">    bzero(buff, sizeof(buff));</span><br><span class="line">    </span><br><span class="line">    // 第三步：接收客户端的消息</span><br><span class="line">    len = recvfrom(serverSockerId, buff, sizeof(buff), 0, (struct sockaddr *)&amp;ser_addr, &amp;addrlen);</span><br><span class="line">    // 显示client端的网络地址</span><br><span class="line">    NSLog(@&quot;receive from %s\n&quot;, inet_ntoa(ser_addr.sin_addr));</span><br><span class="line">    // 显示客户端发来的字符串</span><br><span class="line">    NSLog(@&quot;recevce:%s&quot;, buff);</span><br><span class="line">    </span><br><span class="line">    // 第四步：将接收到的客户端发来的消息，发回客户端</span><br><span class="line">    // 将字串返回给client端</span><br><span class="line">    sendto(serverSockerId, buff, len, 0, (struct sockaddr *)&amp;ser_addr, addrlen);</span><br><span class="line">  &#125; while (strcmp(buff, &quot;exit&quot;) != 0);</span><br><span class="line">  </span><br><span class="line">  // 第五步：关闭socket</span><br><span class="line">  close(serverSockerId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>1.2.2 服务器端的打印日志</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">2015-12-06 15:38:36.268 iOS-Socket-C-Version-Server[39130:2473780] receive from 192.168.1.100</span><br><span class="line">2015-12-06 15:38:36.269 iOS-Socket-C-Version-Server[39130:2473780] recevce:Hello, server, how are you?</span><br><span class="line">2015-12-06 15:38:36.372 iOS-Socket-C-Version-Server[39130:2473780] receive from 192.168.1.100</span><br><span class="line">2015-12-06 15:38:36.372 iOS-Socket-C-Version-Server[39130:2473780] recevce:Hello, server, how are you?</span><br><span class="line">2015-12-06 15:38:36.377 iOS-Socket-C-Version-Server[39130:2473780] receive from 192.168.1.100</span><br><span class="line">2015-12-06 15:38:36.377 iOS-Socket-C-Version-Server[39130:2473780] recevce:Hello, server, how are you?</span><br><span class="line">2015-12-06 15:38:36.382 iOS-Socket-C-Version-Server[39130:2473780] receive from 192.168.1.100</span><br><span class="line">2015-12-06 15:38:36.382 iOS-Socket-C-Version-Server[39130:2473780] recevce:Hello, server, how are you?</span><br><span class="line">2015-12-06 15:38:36.405 iOS-Socket-C-Version-Server[39130:2473780] receive from 192.168.1.100</span><br><span class="line">2015-12-06 15:38:36.405 iOS-Socket-C-Version-Server[39130:2473780] recevce:Hello, server, how are you?</span><br><span class="line">2015-12-06 15:38:36.409 iOS-Socket-C-Version-Server[39130:2473780] receive from 192.168.1.100</span><br><span class="line">2015-12-06 15:38:36.410 iOS-Socket-C-Version-Server[39130:2473780] recevce:Hello, server, how are you?</span><br><span class="line">2015-12-06 15:38:36.414 iOS-Socket-C-Version-Server[39130:2473780] receive from 192.168.1.100</span><br><span class="line">2015-12-06 15:38:36.415 iOS-Socket-C-Version-Server[39130:2473780] recevce:Hello, server, how are you?</span><br><span class="line">2015-12-06 15:38:36.425 iOS-Socket-C-Version-Server[39130:2473780] receive from 192.168.1.100</span><br><span class="line">2015-12-06 15:38:36.426 iOS-Socket-C-Version-Server[39130:2473780] recevce:Hello, server, how are you?</span><br><span class="line">2015-12-06 15:38:36.441 iOS-Socket-C-Version-Server[39130:2473780] receive from 192.168.1.100</span><br><span class="line">2015-12-06 15:38:36.441 iOS-Socket-C-Version-Server[39130:2473780] recevce:Hello, server, how are you?</span><br><span class="line">2015-12-06 15:38:36.452 iOS-Socket-C-Version-Server[39130:2473780] receive from 192.168.1.100</span><br><span class="line">2015-12-06 15:38:36.452 iOS-Socket-C-Version-Server[39130:2473780] recevce:Hello, server, how are you?</span><br><span class="line">2015-12-06 15:38:36.472 iOS-Socket-C-Version-Server[39130:2473780] receive from 192.168.1.100</span><br><span class="line">2015-12-06 15:38:36.473 iOS-Socket-C-Version-Server[39130:2473780] recevce:Hello, server, how are you?</span><br></pre></td></tr></table></figure></p><p>我们这里打印出了客户端发来的消息，由于上面实现的代码中，只发10次，所以这里只有10条。<br>源代码小伙伴们，可以到github下载了:<a href="http://www.huangyibiao.com/go.php?url=https://github.com/CoderJackyHuang/iOS-Socket-C-Version">https://github.com/CoderJackyHuang/iOS-Socket-C-Version</a><br><strong>注意</strong>：这里面有两个工程，一个是客户端，一个是服务器端。运行时，先运行服务器端，然后再选择客户端。另外，客户端所指定的服务器端的ip地址一定要修改成您本机对应的ip，不然使用笔者这里的ip就会失败。</p>]]></content>
      
      
      <categories>
          
          <category> XMPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Object-C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(二)即时通讯系列之TCP Socket</title>
      <link href="/2016/08/20/XMPP/(%E4%BA%8C)%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E7%B3%BB%E5%88%97%E4%B9%8BTCP%20Socket/"/>
      <url>/2016/08/20/XMPP/(%E4%BA%8C)%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E7%B3%BB%E5%88%97%E4%B9%8BTCP%20Socket/</url>
      
        <content type="html"><![CDATA[<p><a href="http://www.jianshu.com/p/94b138362173">即时通讯系列之Socket简介</a></p><h1 id="一、Socket连接"><a href="#一、Socket连接" class="headerlink" title="一、Socket连接"></a>一、Socket连接</h1><h2 id="1-连接过程"><a href="#1-连接过程" class="headerlink" title="1.连接过程"></a>1.连接过程</h2><p>建立Socket连接至少需要一对套接字，其中一个运行于客户端，称为ClientSocket，另一个运行于服务器端，称为ServerSocket。<br>套接字之间的连接过程分为三个步骤：<strong>服务器监听，客户端请求，连接确认</strong>。</p><ul><li>1)<strong>服务器监听</strong>：服务器端套接字并不定位具体的客户端套接字，而是处于等待连接的状态，实时监控网络状态，等待客户端的连接请求。</li><li>2)<strong>客户端请求</strong>：指客户端的套接字提出连接请求，要连接的目标是服务器端的套接字。为此，客户端的套接字必须首先描述它要连接的服务器的套接字，指出服务器端套接字的地址和端口号，然后就向服务器端套接字提出连接请求。</li><li>3)<strong>连接确认</strong>：当服务器端套接字监听到或者说接收到客户端套接字的连接请求时，就响应客户端套接字的请求，建立一个新的线程，把服务器端套接字的描述发给客户端，一旦客户端确认了此描述，双方就正式建立连接。而服务器端套接字继续处于监听状态，继续接收其他客户端套接字的连接请求。</li><li>4)<strong>断开连接</strong>.</li></ul><h2 id="2-TCP-Socket"><a href="#2-TCP-Socket" class="headerlink" title="2.TCP Socket"></a>2.TCP Socket</h2><p>常用的Socket类型有两种：流式Socket（SOCK_STREAM）和数据报式Socket（SOCK_DGRAM）。流式是一种面向连接的Socket，针对于面向连接的TCP服务应用；数据报式Socket是一种无连接的Socket，对应于无连接的UDP服务应用。</p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220519233740292.png" alt="基本TCP客户—服务器程序设计基本框架.png"></p><h5 id="2-1-TCP-Socket客户端"><a href="#2-1-TCP-Socket客户端" class="headerlink" title="2.1 TCP Socket客户端"></a>2.1 TCP Socket客户端</h5><p>客户端的工作流程：首先调用socket函数创建一个Socket，然后指定服务端的IP地址和端口号，就可以调用sendto将字符串传送给服务器端，并可以调用recvfrom接收服务器端返回的字符串，最后关闭该socket。<br>第一步：创建socket并配置socket<br>第二步：调用bind绑定监听ip和端口号<br>第三步：调用connect连接服务器<br>第四步：调用getsockname获取套接字信息<br>第五步：调用send发送消息到服务器端<br>第六步：调用close关闭socket</p><p>这里没有写接收来自服务器端的消息，大家可以自行添加。</p><h6 id="客户端的代码实现："><a href="#客户端的代码实现：" class="headerlink" title="客户端的代码实现："></a>客户端的代码实现：</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">- (void)tcpClient &#123;</span><br><span class="line">  // 第一步：创建soket</span><br><span class="line">  // TCP是基于数据流的，因此参数二使用SOCK_STREAM</span><br><span class="line">  int error = -1;</span><br><span class="line">  int clientSocketId = socket(AF_INET, SOCK_STREAM, 0);</span><br><span class="line">  BOOL success = (clientSocketId != -1);</span><br><span class="line">  struct sockaddr_in addr;</span><br><span class="line">  </span><br><span class="line">  // 第二步：绑定端口号</span><br><span class="line">  if (success) &#123;</span><br><span class="line">    NSLog(@&quot;client socket create success&quot;);</span><br><span class="line">    // 初始化</span><br><span class="line">    memset(&amp;addr, 0, sizeof(addr));</span><br><span class="line">    addr.sin_len = sizeof(addr);</span><br><span class="line">    </span><br><span class="line">    // 指定协议簇为AF_INET，比如TCP/UDP等</span><br><span class="line">    addr.sin_family = AF_INET;</span><br><span class="line">    </span><br><span class="line">    // 监听任何ip地址</span><br><span class="line">    addr.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line">    error = bind(clientSocketId, (const struct sockaddr *)&amp;addr, sizeof(addr));</span><br><span class="line">    success = (error == 0);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  if (success) &#123;</span><br><span class="line">    // p2p</span><br><span class="line">    struct sockaddr_in peerAddr;</span><br><span class="line">    memset(&amp;peerAddr, 0, sizeof(peerAddr));</span><br><span class="line">    peerAddr.sin_len = sizeof(peerAddr);</span><br><span class="line">    peerAddr.sin_family = AF_INET;</span><br><span class="line">    peerAddr.sin_port = htons(1024);</span><br><span class="line">    </span><br><span class="line">    // 指定服务端的ip地址，测试时，修改成对应自己服务器的ip</span><br><span class="line">    peerAddr.sin_addr.s_addr = inet_addr(&quot;192.168.1.107&quot;);</span><br><span class="line">    </span><br><span class="line">    socklen_t addrLen;</span><br><span class="line">    addrLen = sizeof(peerAddr);</span><br><span class="line">    NSLog(@&quot;will be connecting&quot;);</span><br><span class="line">    </span><br><span class="line">    // 第三步：连接服务器</span><br><span class="line">    error = connect(clientSocketId, (struct sockaddr *)&amp;peerAddr, addrLen);</span><br><span class="line">    success = (error == 0);</span><br><span class="line">    </span><br><span class="line">    if (success) &#123;</span><br><span class="line">      // 第四步：获取套接字信息</span><br><span class="line">      error = getsockname(clientSocketId, (struct sockaddr *)&amp;addr, &amp;addrLen);</span><br><span class="line">      success = (error == 0);</span><br><span class="line">      </span><br><span class="line">      if (success) &#123;</span><br><span class="line">        NSLog(@&quot;client connect success, local address:%s,port:%d&quot;,</span><br><span class="line">              inet_ntoa(addr.sin_addr),</span><br><span class="line">              ntohs(addr.sin_port));</span><br><span class="line">        </span><br><span class="line">        // 这里只发送10次</span><br><span class="line">        int count = 10;</span><br><span class="line">        do &#123;</span><br><span class="line">          // 第五步：发送消息到服务端</span><br><span class="line">          send(clientSocketId, &quot;哈哈，server您好！&quot;, 1024, 0);</span><br><span class="line">          count--;</span><br><span class="line">          </span><br><span class="line">          // 告诉server，客户端退出了</span><br><span class="line">          if (count == 0) &#123;</span><br><span class="line">            send(clientSocketId, &quot;exit&quot;, 1024, 0);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; while (count &gt;= 1);</span><br><span class="line">        </span><br><span class="line">        // 第六步：关闭套接字</span><br><span class="line">        close(clientSocketId);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      NSLog(@&quot;connect failed&quot;);</span><br><span class="line">      </span><br><span class="line">      // 第六步：关闭套接字</span><br><span class="line">      close(clientSocketId);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="客户端的打印日志"><a href="#客户端的打印日志" class="headerlink" title="客户端的打印日志"></a>客户端的打印日志</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2015-12-06 18:35:00.385 iOS-Socket-C-Version-Client[9726:4256295] client socket create success</span><br><span class="line">2015-12-06 18:35:00.386 iOS-Socket-C-Version-Client[9726:4256295] will be connecting</span><br><span class="line">2015-12-06 18:35:00.507 iOS-Socket-C-Version-Client[9726:4256295] client connect success, local address:192.168.1.100,port:50311</span><br></pre></td></tr></table></figure><p>说明连接服务器成功，然后发送了消息到服务器端。</p><h3 id="2-2-TCP-Socket服务器端"><a href="#2-2-TCP-Socket服务器端" class="headerlink" title="2.2 TCP Socket服务器端"></a>2.2 TCP Socket服务器端</h3><p>服务器端的工作流程：首先调用socket函数创建一个套接字，然后调用bind函数将其与本机地址以及一个本地端口号绑定，接收到一个客户端时，服务器显示该客户端的IP地址，并将字串返回给客户端。<br>第一步：创建socket并配置socket<br>第二步：调用bind绑定服务器本机ip及端口号<br>第三步：调用listen监听客户端的连接，并指定同时最多可让accept的数量<br>第四步：调用accept等待客户端的连接<br>第五步：调用recvfrom接收来自客户端的消息<br>第六步：调用close关闭socket</p><h5 id="服务器端代码实现"><a href="#服务器端代码实现" class="headerlink" title="服务器端代码实现"></a>服务器端代码实现</h5> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">- (void)tcpServer &#123;</span><br><span class="line">  // 第一步：创建socket</span><br><span class="line">  int error = -1;</span><br><span class="line">  </span><br><span class="line">  // 创建socket套接字</span><br><span class="line">  int serverSocketId = socket(AF_INET, SOCK_STREAM, 0);</span><br><span class="line">  // 判断创建socket是否成功</span><br><span class="line">  BOOL success = (serverSocketId != -1);</span><br><span class="line">  </span><br><span class="line">  // 第二步：绑定端口号</span><br><span class="line">  if (success) &#123;</span><br><span class="line">    NSLog(@&quot;server socket create success&quot;);</span><br><span class="line">    // Socket address</span><br><span class="line">    struct sockaddr_in addr;</span><br><span class="line">    </span><br><span class="line">    // 初始化全置为0</span><br><span class="line">    memset(&amp;addr, 0, sizeof(addr));</span><br><span class="line">    </span><br><span class="line">    // 指定socket地址长度</span><br><span class="line">    addr.sin_len = sizeof(addr);</span><br><span class="line">    </span><br><span class="line">    // 指定网络协议，比如这里使用的是TCP/UDP则指定为AF_INET</span><br><span class="line">    addr.sin_family = AF_INET;</span><br><span class="line">    </span><br><span class="line">    // 指定端口号</span><br><span class="line">    addr.sin_port = htons(1024);</span><br><span class="line">    </span><br><span class="line">    // 指定监听的ip，指定为INADDR_ANY时，表示监听所有的ip</span><br><span class="line">    addr.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line">    </span><br><span class="line">    // 绑定套接字</span><br><span class="line">    error = bind(serverSocketId, (const struct sockaddr *)&amp;addr, sizeof(addr));</span><br><span class="line">    success = (error == 0);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  // 第三步：监听</span><br><span class="line">  if (success) &#123;</span><br><span class="line">    NSLog(@&quot;bind server socket success&quot;);</span><br><span class="line">    error = listen(serverSocketId, 5);</span><br><span class="line">    success = (error == 0);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  if (success) &#123;</span><br><span class="line">    NSLog(@&quot;listen server socket success&quot;);</span><br><span class="line">    </span><br><span class="line">    while (true) &#123;</span><br><span class="line">      // p2p</span><br><span class="line">      struct sockaddr_in peerAddr;</span><br><span class="line">      int peerSocketId;</span><br><span class="line">      socklen_t addrLen = sizeof(peerAddr);</span><br><span class="line">      </span><br><span class="line">      // 第四步：等待客户端连接</span><br><span class="line">      // 服务器端等待从编号为serverSocketId的Socket上接收客户连接请求</span><br><span class="line">      peerSocketId = accept(serverSocketId, (struct sockaddr *)&amp;peerAddr, &amp;addrLen);</span><br><span class="line">      success = (peerSocketId != -1);</span><br><span class="line">      </span><br><span class="line">      if (success) &#123;</span><br><span class="line">        NSLog(@&quot;accept server socket success,remote address:%s,port:%d&quot;,</span><br><span class="line">              inet_ntoa(peerAddr.sin_addr),</span><br><span class="line">              ntohs(peerAddr.sin_port));</span><br><span class="line">        char buf[1024];</span><br><span class="line">        size_t len = sizeof(buf);</span><br><span class="line">        </span><br><span class="line">        // 第五步：接收来自客户端的信息</span><br><span class="line">        // 当客户端输入exit时才退出</span><br><span class="line">        do &#123;</span><br><span class="line">          // 接收来自客户端的信息</span><br><span class="line">          recv(peerSocketId, buf, len, 0);</span><br><span class="line">          if (strlen(buf) != 0) &#123;</span><br><span class="line">            NSString *str = [NSString stringWithCString:buf encoding:NSUTF8StringEncoding];</span><br><span class="line">            if (str.length &gt;= 1) &#123;</span><br><span class="line">              NSLog(@&quot;received message from client：%@&quot;,str);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; while (strcmp(buf, &quot;exit&quot;) != 0);</span><br><span class="line">        </span><br><span class="line">        NSLog(@&quot;收到exit信号，本次socket通信完毕&quot;);</span><br><span class="line">        </span><br><span class="line">        // 第六步：关闭socket</span><br><span class="line">        close(peerSocketId);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="服务器端的打印日志"><a href="#服务器端的打印日志" class="headerlink" title="服务器端的打印日志"></a>服务器端的打印日志</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">2015-12-06 18:34:31.258 iOS-Socket-C-Version-Server[39929:2622200] server socket create success</span><br><span class="line">2015-12-06 18:34:31.258 iOS-Socket-C-Version-Server[39929:2622200] bind server socket success</span><br><span class="line">2015-12-06 18:34:31.259 iOS-Socket-C-Version-Server[39929:2622200] listen server socket success</span><br><span class="line">2015-12-06 18:35:00.743 iOS-Socket-C-Version-Server[39929:2622200] accept server socket success,remote address:192.168.1.100,port:50311</span><br><span class="line">2015-12-06 18:35:00.743 iOS-Socket-C-Version-Server[39929:2622200] received message from client：哈哈，server您好！</span><br><span class="line">2015-12-06 18:35:00.743 iOS-Socket-C-Version-Server[39929:2622200] received message from client：哈哈，server您好！</span><br><span class="line">2015-12-06 18:35:00.743 iOS-Socket-C-Version-Server[39929:2622200] received message from client：哈哈，server您好！</span><br><span class="line">2015-12-06 18:35:00.744 iOS-Socket-C-Version-Server[39929:2622200] received message from client：哈哈，server您好！</span><br><span class="line">2015-12-06 18:35:00.744 iOS-Socket-C-Version-Server[39929:2622200] received message from client：哈哈，server您好！</span><br><span class="line">2015-12-06 18:35:00.744 iOS-Socket-C-Version-Server[39929:2622200] received message from client：哈哈，server您好！</span><br><span class="line">2015-12-06 18:35:00.744 iOS-Socket-C-Version-Server[39929:2622200] received message from client：哈哈，server您好！</span><br><span class="line">2015-12-06 18:35:00.744 iOS-Socket-C-Version-Server[39929:2622200] received message from client：哈哈，server您好！</span><br><span class="line">2015-12-06 18:35:00.744 iOS-Socket-C-Version-Server[39929:2622200] received message from client：哈哈，server您好！</span><br><span class="line">2015-12-06 18:35:00.745 iOS-Socket-C-Version-Server[39929:2622200] received message from client：哈哈，server您好！</span><br><span class="line">2015-12-06 18:35:00.745 iOS-Socket-C-Version-Server[39929:2622200] received message from client：exit</span><br><span class="line">2015-12-06 18:35:00.745 iOS-Socket-C-Version-Server[39929:2622200] 收到exit信号，本次socket通信完毕</span><br></pre></td></tr></table></figure><p>我们这里打印出了客户端发来的消息，由于上面实现的代码中，只发10次，所以这里只有10条。</p>]]></content>
      
      
      <categories>
          
          <category> XMPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Object-C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(一)即时通讯系列之Socket简介</title>
      <link href="/2016/08/20/XMPP/(%E4%B8%80)%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E7%B3%BB%E5%88%97%E4%B9%8BSocket%E7%AE%80%E4%BB%8B/"/>
      <url>/2016/08/20/XMPP/(%E4%B8%80)%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E7%B3%BB%E5%88%97%E4%B9%8BSocket%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>前段时间使用XMPPFramework完成了一个仿微信的小项目,故特此来记录下即时通讯开发过程中的知识点以及存在一些问题,欢迎大家前来指教.<br>关于仿微信的demo在后面的篇章中会有github地址,请关注.</p><p>本篇是关于Socket的相关介绍</p></blockquote><h1 id="一、Socket简介"><a href="#一、Socket简介" class="headerlink" title="一、Socket简介"></a>一、Socket简介</h1><h2 id="1-Socket起源"><a href="#1-Socket起源" class="headerlink" title="1.Socket起源"></a>1.Socket起源</h2><p>socket起源于Unix，而Unix/Linux基本哲学之一就是：“一切即文件”，都可以用”打开open -&gt; 读写write/read _&gt; 关闭close”模式来操作。</p><p>简单来说socket就是该模式的一个实现，socket即是一种特殊的文件，一些socket函数就是对其进行的操作(读/写IO,关闭，打开)，这些函数我们在后面进行介绍。</p><p>我们在传输数据的时候，可以只使用（传输层）TCP/IP协议，但是那样的话，如果没有应用层，便无法识别数据内容，如果想要使传输的数据有意义，则必须使用到应用成协议，应用层协议有很多，比如HTTP,FTP,TELNET等，也可以自己定义应用层协议。WEB协议使用HTTP协议作应用层协议，以封装HTTP文本信息，然后使用TCP/IP协议作传输层协议将它发到网络上。</p><h2 id="2-Socket概念"><a href="#2-Socket概念" class="headerlink" title="2.Socket概念"></a>2.Socket概念</h2><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240.png" alt="socket展示.png"><br> 1) Socket是一个针对TCP和UDP编程的接口，你可以借助它建立TCP/IP连接等等。而TCP和UDP协议属于传输层。而HTTP是个应用层的协议，它实际上也建立在 TCP协议之上.（HTTP是轿车，提供了封装或者是现实数据的具体形式；socket是发动机，提供了网络通信的能力)。</p><p> 2) socket称为”套接字”,适用于网络通信的方法。socket是对tcp/IP协议的封装，socket本身并不是协议，而是一个调用接口(api)。通过socket我们才能使用TCP/IP协议。Socket的出现只是使得程序员更方便地使用TCP/IP协议栈而已，是对TCP/IP协议的抽象，从而形成了我们知道的一些最基本的函数接口。</p><h2 id="3-Socket通讯原理"><a href="#3-Socket通讯原理" class="headerlink" title="3.Socket通讯原理"></a>3.Socket通讯原理</h2><p>socket是支持TCP/IP协议的网络通信的基本单元,包括:</p><ul><li>传输控制协议<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TCP(传输控制协议)</span><br><span class="line">UDP(数据报文协议)</span><br></pre></td></tr></table></figure></li><li>本地主机的IP地址<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">网络中设备的标示</span><br><span class="line">不易记忆，可以用主机名</span><br><span class="line">本地回环地址：127.0.0.1主机名：localhost</span><br><span class="line">每台计算机都有一个127.0.0.1</span><br><span class="line">如果 127.0.0.1ping不通，说明网卡不工作</span><br><span class="line">如果本机地址ping不通，说明网线坏了</span><br></pre></td></tr></table></figure></li><li>本地进程的协议端口号<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">用于标示进程的逻辑地址，不同进程的标示</span><br><span class="line">有效端口：0~65535</span><br><span class="line">其中0~1024由系统使用或者保留端口</span><br><span class="line">开发中不要使用1024以下的端口</span><br></pre></td></tr></table></figure></li><li>远程主机的IP地址</li><li>远程主机的协议端口号<br><strong>通过IP找机器，通过端口找程序，通过协议确定如何传输数据</strong></li></ul><p>多个TCP连接或多个应用程序进程可能需要通过同一个TCP协议端口传输数据.为了区别不同的应用程序进程和连接,计算机操作系统为应用程序与TCP/IP协议交互提供了套接字(socket)接口.应用层可以和传输层通过<strong>socket接口,区分来自不同应用程序进程或网络连接的通信</strong>,实现数据传输的并发服务.</p><h1 id="二、网络协议"><a href="#二、网络协议" class="headerlink" title="二、网络协议"></a>二、网络协议</h1><p>网络七层由<strong>下往上</strong>分别为<strong>物理层、数据链路层、网络层、传输层、会话层、表示层和应用层</strong>。</p><p>​                        </p><p>其中物理层、数据链路层和网络层通常被称作媒体层，是网络工程师所研究的对象；</p><p>传输层、会话层、表示层和应用层则被称作主机层，是用户所面向和关心的内容。</p><p><strong>http协议 对应于应用层tcp协议 对应于传输层ip协议 对应于网络层</strong></p><p>三者本质上没有可比性。 何况HTTP协议是基于TCP连接的。<br>TCP/IP是传输层协议，主要解决数据如何在网络中传输；而HTTP是应用层协议，主要解决如何包装数据。</p><p>我们在传输数据时，可以只使用传输层（TCP/IP），但是那样的话，由于没有应用层，便无法识别数据内容，如果想要使传输的数据有意义，则必须使用应用层协议，应用层协议很多，有HTTP、FTP、TELNET等等，也可以自己定义应用层协议。WEB使用HTTP作传输层协议，以封装HTTP文本信息，然后使用TCP/IP做传输层协议将它发送到网络上。</p><p>Socket是对TCP/IP协议的封装，Socket本身并不是协议，而是一个调用接口（API），通过Socket，我们才能使用TCP/IP协议。</p><h2 id="TCP-UDP"><a href="#TCP-UDP" class="headerlink" title="TCP/UDP"></a>TCP/UDP</h2><p>tcp和udp的区别<br>在这里就必须讲一下udp和tcp的区别了</p><p>TCP：面向连接、传输可靠(保证数据正确性,保证数据顺序)、用于传输大量数据(流模式)、速度慢，建立连接需要开销较多(时间，系统资源)。</p><p>UDP：面向非连接、传输不可靠、用于传输少量数据(数据包模式)、速度快。</p><p>关于TCP是一种流模式的协议，UDP是一种数据报模式的协议，这里要说明一下，TCP是面向连接的，也就是说，在连接持续的过程中，socket中收到的数据都是由同一台主机发出的（劫持什么的不考虑），因此，知道保证数据是有序的到达就行了，至于每次读取多少数据自己看着办。</p><p>而UDP是无连接的协议，也就是说，只要知道接收端的IP和端口，且网络是可达的，任何主机都可以向接收端发送数据。这时候，如果一次能读取超过一个报文的数据，则会乱套。比如，主机A向发送了报文P1，主机B发送了报文P2，如果能够读取超过一个报文的数据，那么就会将P1和P2的数据合并在了一起，这样的数据是没有意义的。</p><p>TCP三次握手和四次挥手<br>相对于SOCKET开发者，TCP创建过程和连接拆除过程是由TCP/IP协议栈自动创建的。因此开发者并不需要控制这个过程。但是对于理解TCP底层运作机制，相当有帮助。</p><p>因此在这里详细解释一下这两个过程。</p><p><strong>TCP三次握手</strong></p><p>所谓三次握手(Three-way Handshake)，是指建立一个TCP连接时，需要客户端和服务器总共发送3个包。</p><p> 三次握手的目的是连接服务器指定端口，建立TCP连接,并同步连接双方的序列号和确认号并交换 TCP 窗口大小信息.在socket编程中，客户端执行connect()时。将触发三次握手。</p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220519233307711.png" alt="TCP三次握手.png"></p><p>首先了解一下几个标志，SYN（synchronous），同步标志，ACK (Acknowledgement），即确认标志，seq应该是Sequence Number，序列号的意思，另外还有四次握手的fin，应该是final，表示结束标志。</p><p>第一次握手：客户端发送一个TCP的SYN标志位置1的包指明客户打算连接的服务器的端口，以及初始序号X,保存在包头的序列号(Sequence Number)字段里。</p><p>第二次握手：服务器发回确认包(ACK)应答。即SYN标志位和ACK标志位均为1同时，将确认序号(Acknowledgement Number)设置为客户的序列号加1以，即X+1。</p><p>第三次握手：客户端再次发送确认包(ACK) SYN标志位为0，ACK标志位为1。并且把服务器发来ACK的序号字段+1，放在确定字段中发送给对方.并且在数据段放写序列号的+1。</p><p><strong>tcp四次挥手</strong></p><p>TCP的连接的拆除需要发送四个包，因此称为四次挥手(four-way handshake)。客户端或服务器均可主动发起挥手动作，在socket</p><p>编程中，任何一方执行close()操作即可产生挥手操作。</p><p><img src="http://huayoyu-1254261238.cossh.myqcloud.com/md/1240-20220519233307773.png" alt="tcp四次挥手.png"></p><p>其实有个问题，为什么连接的时候是三次握手，关闭的时候却是四次挥手？</p><p>因为当Server端收到Client端的SYN连接请求报文后，可以直接发送SYN+ACK报文。其中ACK报文是用来应答的，SYN报文是用来同步的。但是关闭连接时，当Server端收到FIN报文时，很可能并不会立即关闭SOCKET，所以只能先回复一个ACK报文，告诉Client端，”你发的FIN报文我收到了”。只有等到我Server端所有的报文都发送完了，我才能发送FIN报文，因此不能一起发送。故需要四步握手。</p><h1 id="三、TCP-UDP-Socket"><a href="#三、TCP-UDP-Socket" class="headerlink" title="三、TCP/UDP Socket"></a>三、TCP/UDP Socket</h1><p><a href="http://www.jianshu.com/p/9029d808e4b6">TCP Socket编程</a></p><p><a href="http://www.jianshu.com/p/1068eada40f4">UDP Socket编程</a></p><p>另外还有关于心跳包,断开重连,网络字节序等内容,该内容可以结合下面的CocoaSocket进行了解</p><h1 id="四、CocoaSocket"><a href="#四、CocoaSocket" class="headerlink" title="四、CocoaSocket"></a>四、CocoaSocket</h1><p>用socket可以实现像QQ那样发送即时消息的功能。客户端和服务端需要建立长连接，在长连接的情况下，发送消息。客户端可以发送心跳包来检测长连接。<br>在iOS开发中使用socket，一般都是用第三方库AsyncSocket，不得不承认这个库确实很强大。<br>使用AsyncSocket的时候可以做一层封装，根据需求提供几个接口出来。比如：连接、断开连接、发送消息等等。还有接受消息，接受到的消息可以通过通知、代理、block等传出去。</p><p>具体的可以查询相关知识</p><p>使用CocoaSocket可以极大程度的方便使用socket,而不需要去记那些晦涩难懂的socket原语.<br><a href="http://www.superqq.com/blog/2015/04/03/ioskai-fa-zhi-asyncsocketshi-yong-jiao-cheng/">CococaSocket使用教程</a></p>]]></content>
      
      
      <categories>
          
          <category> XMPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Object-C </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
